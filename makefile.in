#make commands:
# make TARGET=<some soc> BOARD=<some board> BOARD_REVISION=<board revision> TEST=<some test>
# example:
# 		make TARGET=mx6dq BOARD=smart_device BOARD_REVISION=b TEST=vpu 

PROJ_DIR := $(shell pwd)

UNAME := $(shell uname)
ifneq ($(UNAME), Linux)
PROJ_DIR := $(shell ./tools/windows/dirpath $(PROJ_DIR))
endif

PROJ_OUT := $(PROJ_DIR)/output/$(TARGET)/$(BOARD)_rev_$(BOARD_REVISION)
PROJ_OUT_REL := output/$(TARGET)/$(BOARD)_rev_$(BOARD_REVISION)
TARGET_LIB := $(PROJ_OUT)/lib/libsdk.a
TARGET_LIB_DIR :=$(PROJ_OUT)/lib
TARGET_BIN_DIR :=$(PROJ_OUT)/bin

export PROJ_DIR
export PROJ_OUT
export PROJ_OUT_REL
export TARGET_LIB
export TARGET_LIB_DIR
export TARGET_BIN_DIR

include make.def

SUB_DIRS := sdk

.PHONY: default clean build_dir #bin
default: build_dir $(SUB_DIRS) $(OUTPUT_ELF) $(OUTPUT_BIN) # all bin
	@echo "**************************************************"
	@echo "  Build has completed. ELF file available at:"
	@echo "  =>" $(OUTPUT_ELF)

build_dir:
	@mkdir -p $(PROJ_OUT_REL)
ifneq "$(TARGET_LIB_DIR)" ""
	@mkdir -p $(TARGET_LIB_DIR)
endif
ifneq "$(TARGET_BIN_DIR)" ""
	@mkdir -p $(TARGET_BIN_DIR)
endif

$(SUB_DIRS): build_dir
	@make -s -S -C $@ dir # --no-print-directory
#	@make --debug=b -S -C $@ dir # --no-print-directory

$(OUTPUT_ELF): $(TARGET_LIB) $(LD_FILE)
	@echo Linking $(OUTPUT_ELF)
	@$(CC) -o $(OUTPUT_ELF) $(C_FLAGS) $(C_INCLUDES) $(C_DEFINES) -Wl,--whole-archive $(TARGET_LIB) -Wl,--no-whole-archive $(LD_FLAGS)

$(OUTPUT_BIN): $(OUTPUT_ELF)
	@echo Generating $(OUTPUT_BIN)
	@arm-none-eabi-objcopy -O binary $(OUTPUT_ELF) $(OUTPUT_BIN)

clean:
	rm -rf $(PROJ_OUT_REL)

include make.rules

