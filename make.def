#make.def. please replace following defines if needed
# For example, if using ARM tools
#CC = armcc
#AS = armasm
#AR = armar
#LN = armlink

# The following are defines for the GCC tool chain
CC= arm-none-eabi-gcc
AS = arm-none-eabi-as
AR = arm-none-eabi-ar
LN = arm-none-eabi-ld

IMAGENAME = $(TARGET)_$(BOARD)_rev_$(BOARD_REVISION)-$(TEST)-sdk

OUTPUT_BIN = $(PROJ_OUT)/bin/$(IMAGENAME).bin
OUTPUT_TXT = $(PROJ_OUT)/bin/$(IMAGENAME).txt
OUTPUT_ELF = $(PROJ_OUT)/bin/$(IMAGENAME).elf
MAP_FILE = $(PROJ_OUT)/bin/$(IMAGENAME).map
INIT_FILE = $(PROJ_DIR)/src/init/main.c $(PROJ_DIR)/src/init/vectors.S
INIT_FILE += $(PROJ_DIR)/src/init/system_util.c $(PROJ_DIR)/src/init/version.c

CP = cp
RM = rm -rf
MKDIR = mkdir -p
MAKE = make
#BOARD_UC=`echo $(BOARD) | tr [:lower:] [:upper:]`

ifeq "$(TARGET)" "mx53"
C_DEFINES +=-DMX53
CPU	=cortex-a8
ifeq "$(BOARD)" "evk"
C_DEFINES +=-DMX53_EVK
endif
ifeq "$(BOARD)" "ard"
C_DEFINES +=-DMX53_ARD
endif
ifeq "$(BOARD)" "cpu2"
C_DEFINES +=-DMX53_CPU2
endif
ifeq "$(BOARD)" "lcb"
C_DEFINES +=-DMX53_LCB
endif
ifeq "$(BOARD)" "smd"
C_DEFINES +=-DMX53_SMD
endif
endif

ifeq "$(TARGET)" "mx6dq"
C_DEFINES +=-DMX6DQ
CPU	=cortex-a9
INIT_FILE += $(PROJ_DIR)/src/cortex_a9/gic.s $(PROJ_DIR)/src/$(TARGET)/startup.s
INIT_FILE += $(PROJ_DIR)/src/cortex_a9/cortexA9.s
ifeq "$(BOARD)" "evb"
C_DEFINES +=-DMX6DQ_EVB
endif
ifeq "$(BOARD)" "sabre_ai"
C_DEFINES +=-DMX6DQ_SABRE_AI
endif
ifeq "$(BOARD)" "sabre_lite"
C_DEFINES +=-DMX6DQ_SABRE_LITE
endif
ifeq "$(BOARD)" "smart_device"
C_DEFINES +=-DMX6DQ_SMART_DEVICE
endif
endif

ifeq "$(TARGET)" "mx6sdl"
C_DEFINES +=-DMX6SDL
CPU	=cortex-a9
INIT_FILE += $(PROJ_DIR)/src/cortex_a9/gic.s $(PROJ_DIR)/src/$(TARGET)/startup.s
INIT_FILE += $(PROJ_DIR)/src/cortex_a9/cortexA9.s
ifeq "$(BOARD)" "evb"
C_DEFINES +=-DMX6SDL_EVB
endif
ifeq "$(BOARD)" "sabre_ai"
C_DEFINES +=-DMX6SDL_SABRE_AI
endif
ifeq "$(BOARD)" "sabre_lite"
C_DEFINES +=-DMX6SDL_SABRE_LITE
endif
ifeq "$(BOARD)" "smart_device"
C_DEFINES +=-DMX6SDL_SMART_DEVICE
endif
endif

ifeq "$(BOARD_REVISION)" "b"
C_DEFINES +=-DBOARD_VERSION2
endif
ifeq "$(BOARD_REVISION)" "a"
C_DEFINES +=-DBOARD_VERSION1
endif

ifeq "$(TEST)" "ALL"
C_DEFINES +=-DALL_TEST_ENABLE
endif

LD_FLAGS := $(DEBUG_FLAGS) $(THUMB_FLAGS) -nostartfiles
LD_FLAGS += -lm -Wl,-Map,$(MAP_FILE)
LD_FLAGS += -T $(PROJ_DIR)/src/$(TARGET)/$(TARGET).ld

C_DEFINES +=-DSTANDALONE -DSDK_TEST=$(TEST)_test

# enables all warnings and treat them as errors except those preceded with -Wno-
C_FLAGS_WARNINGS = -Wall -Werror -Wno-unused-function -fdiagnostics-show-option
C_FLAGS_WARNINGS += -Wno-unused-but-set-variable -Wno-nonnull

# Basic compiler flags. Enable debugging.
C_FLAGS = $(C_FLAGS_WARNINGS) -g

# Disable placing globals into the common section.
C_FLAGS += -fno-common

# Set the C standard to C99 with GNU extensions.
# Use traditional GNU inline function semantics.
C_FLAGS += -std=gnu99 -fgnu89-inline

# Optimization flags.
# No optimization, but turn on dead code elimination.
C_FLAGS += -O0 -fdce

# ARM flags.
# Set the CPU, enable APCS, and enable ARM/thumb interworking.
C_FLAGS += -march=armv7-a -mcpu=$(CPU) -mtune=$(CPU) -mapcs -mthumb-interwork

# Turn on NEON FPU.
C_FLAGS += -mfpu=neon -mfloat-abi=softfp

# C++ flags. Disable exceptions and RTTI.
CPP_FLAGS = -fno-exceptions -fno-rtti

C_INCLUDES = \
    -I$(PROJ_DIR)/src/include  \
    -I$(PROJ_DIR)/src/sdk \
    -I$(PROJ_DIR)/src/include/$(TARGET)/ \
    -I$(PROJ_DIR)/src/$(TARGET)/$(BOARD)_rev_$(BOARD_REVISION)/ \
    -I. \
    -I../inc

A_FLAGS 		=
A_INCLUDES += \
    -I$(PROJ_DIR) \
    -I$(PROJ_DIR)/include \
    -I$(PROJ_DIR)/src/include \
    -I$(PROJ_DIR)/src/include/$(TARGET)/ \
    -I.
A_DEFINES 	=
