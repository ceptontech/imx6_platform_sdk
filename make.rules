# make.rules

C_FLAGS 	+= $(MODULE_C_FLAGS)
C_INCLUDES 	+= $(MODULE_C_INCLUDES)
C_DEFINES 	+= $(MODULE_C_DEFINES)

A_FLAGS 	+= $(MODULE_A_FLAGS)
A_INCLUDES 	+= $(MODULE_A_INCLUDES)
A_DEFINES 	+= $(MODULE_A_DEFINES)

all:: $(MODULE_OUT) $(MODULE_OBJS) $(TARGET_LIB)

ifneq "$(strip $(MODULE_OBJS))" ""
$(TARGET_LIB): $(MODULE_OBJS)
	@echo Archiving $(notdir $?)
	@$(AR) -roucs $(TARGET_LIB) $?
endif
	
$(MODULE_OUT): 
	@-$(MKDIR) $(MODULE_OUT)

$(MODULE_OUT)/%.o: %.c
# Generate make dependencies and compile. The -MP option creates empty targets
# for each header file so that a rebuild will be forced if the file goes missing, but
# no error will occur.
	@echo Compiling $(addprefix $(MODULE_REL_DIR)$(MODULE)/,$<)
	@$(CC) $(C_FLAGS) $(C_INCLUDES) $(C_DEFINES) -MMD -MF $(MODULE_OUT)/$*.d -MP -o $@ -c $<

$(MODULE_OUT)/%.o: %.cpp
# Generate make dependencies and compile. The -MP option creates empty targets
# for each header file so that a rebuild will be forced if the file goes missing, but
# no error will occur.
	@echo Compiling $(addprefix $(MODULE_REL_DIR)$(MODULE)/,$<)
	@$(CXX) $(CXX_FLAGS) $(C_INCLUDES) $(C_DEFINES) -MD -MF $(MODULE_OUT)/$*.d -MP -o $@ -c $<

# For .S assembly files, first run through the C preprocessor then assemble.
$(MODULE_OUT)/%.o: %.S
	@echo Assembling $(addprefix $(MODULE_REL_DIR)$(MODULE)/,$<)
	@$(CPP) -D__LANGUAGE_ASM__ $(C_INCLUDES) $(C_DEFINES) -o $(basename $@).s $<
	@$(AS) $(A_FLAGS) $(C_INCLUDES) $(A_DEFINES) -MD $(MODULE_OUT)/$*.d -o $@ $(basename $@).s

$(MODULE_OUT)/%.o: %.s
	@echo Assembling $(addprefix $(MODULE_REL_DIR)$(MODULE)/,$<)
	@$(AS) $(A_FLAGS) $(C_INCLUDES) $(A_DEFINES) -MD $(MODULE_OUT)/$*.d -o $@ $<
