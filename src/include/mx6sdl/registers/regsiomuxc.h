/*
 * Copyright (C) 2012, Freescale Semiconductor, Inc. All Rights Reserved
 * THIS SOURCE CODE IS CONFIDENTIAL AND PROPRIETARY AND MAY NOT
 * BE USED OR DISTRIBUTED WITHOUT THE WRITTEN PERMISSION OF
 * Freescale Semiconductor, Inc.
 */

#ifndef _IOMUXC_H
#define _IOMUXC_H

#include "regs.h"

/*
 * Registers defined in this header file.
 *
 * - HW_IOMUXC_IOMUXC_GPR0 - GPR0
 * - HW_IOMUXC_IOMUXC_GPR1 - GPR1
 * - HW_IOMUXC_IOMUXC_GPR2 - GPR2
 * - HW_IOMUXC_IOMUXC_GPR3 - GPR3
 * - HW_IOMUXC_IOMUXC_GPR4 - GPR4
 * - HW_IOMUXC_IOMUXC_GPR5 - GPR5
 * - HW_IOMUXC_IOMUXC_GPR6 - GPR6
 * - HW_IOMUXC_IOMUXC_GPR7 - GPR7
 * - HW_IOMUXC_IOMUXC_GPR8 - GPR8
 * - HW_IOMUXC_IOMUXC_GPR9 - GPR9
 * - HW_IOMUXC_IOMUXC_GPR10 - GPR10
 * - HW_IOMUXC_IOMUXC_GPR11 - GPR11
 * - HW_IOMUXC_IOMUXC_GPR12 - GPR12
 * - HW_IOMUXC_IOMUXC_GPR13 - GPR13
 * - HW_IOMUXC_IOMUXC_OBSERVE_MUX_0 - OBSRV
 * - HW_IOMUXC_IOMUXC_OBSERVE_MUX_1 - OBSRV
 * - HW_IOMUXC_IOMUXC_OBSERVE_MUX_2 - OBSRV
 * - HW_IOMUXC_IOMUXC_OBSERVE_MUX_3 - OBSRV
 * - HW_IOMUXC_IOMUXC_OBSERVE_MUX_4 - OBSRV
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7 - SW_MUX_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7 - SW_PAD_CTL
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM - SW_GRP
 * - HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS - SW_GRP
 * - HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT - DAISY
 * - HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT - DAISY
 *
 * hw_iomuxc_t - Struct containing all module registers.
 */

//! @name Module base addresses
//@{
#ifndef REGS_IOMUXC_BASE
#define REGS_IOMUXC_BASE (0x020e0000) //!< Base address for IOMUXC.
#endif
//@}

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR0 - GPR0 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DMAREQ_MUX_SEL0 : 1; //!< Selects between two possible sources for SDMA_EVENT[2]:
        unsigned DMAREQ_MUX_SEL1 : 1; //!< Selects between two possible sources for SDMA_EVENT[3]:
        unsigned DMAREQ_MUX_SEL2 : 1; //!< Selects between two possible sources for SDMA_EVENT[4]:
        unsigned DMAREQ_MUX_SEL3 : 1; //!< Selects between two possible sources for SDMA_EVENT[5]:
        unsigned DMAREQ_MUX_SEL4 : 1; //!< Selects between two possible sources for SDMA_EVENT[10]:
        unsigned DMAREQ_MUX_SEL5 : 1; //!< Selects between two possible sources for SDMA_EVENT[9]:
        unsigned DMAREQ_MUX_SEL6 : 1; //!< Selects between two possible sources for SDMA_EVENT[23]:
        unsigned DMAREQ_MUX_SEL7 : 1; //!< Selects between two possible sources for SDMA_EVENT[14]:
        unsigned PCIE_RX0_EQ : 3; //!< control pcie phy's rx0_eq bits
        unsigned RESERVED0 : 3; //!< 
        unsigned TX_CLK2_MUX_SEL : 2; //!< Selects the source of tx_clk2 in SPDIF according to ASRC clock muxing scheme:
        unsigned CLOCK_1_MUX_SEL : 2; //!< Selects the source of asrck_clock_1 in ASRC according to clock muxing scheme:
        unsigned CLOCK_9_MUX_SEL : 2; //!< Selects the source of asrck_clock_9 in ASRC according to clock muxing scheme:
        unsigned CLOCK_2_MUX_SEL : 2; //!< Selects the source of asrck_clock_2 in ASRC according to clock muxing scheme:
        unsigned CLOCK_A_MUX_SEL : 2; //!< Selects the source of asrck_clock_a in ASRC according to clock muxing scheme:
        unsigned CLOCK_3_MUX_SEL : 2; //!< Selects the source of asrck_clock_3 in ASRC according to clock muxing scheme:
        unsigned CLOCK_B_MUX_SEL : 2; //!< Selects the source of asrck_clock_b in ASRC according to clock muxing scheme:
        unsigned CLOCK_0_MUX_SEL : 2; //!< Selects the source of asrck_clock_0 in ASRC according to clock muxing scheme:
        unsigned CLOCK_8_MUX_SEL : 2; //!< Selects the source of asrck_clock_8 in ASRC according to clock muxing scheme
    } B;
} hw_iomuxc_iomuxc_gpr0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR0 register
 */
#define HW_IOMUXC_IOMUXC_GPR0_ADDR      (REGS_IOMUXC_BASE + 0x0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR0           (*(volatile hw_iomuxc_iomuxc_gpr0_t *) HW_IOMUXC_IOMUXC_GPR0_ADDR)
#define HW_IOMUXC_IOMUXC_GPR0_RD()      (HW_IOMUXC_IOMUXC_GPR0.U)
#define HW_IOMUXC_IOMUXC_GPR0_WR(v)     (HW_IOMUXC_IOMUXC_GPR0.U = (v))
#define HW_IOMUXC_IOMUXC_GPR0_SET(v)    (HW_IOMUXC_IOMUXC_GPR0_WR(HW_IOMUXC_IOMUXC_GPR0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR0_CLR(v)    (HW_IOMUXC_IOMUXC_GPR0_WR(HW_IOMUXC_IOMUXC_GPR0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR0_TOG(v)    (HW_IOMUXC_IOMUXC_GPR0_WR(HW_IOMUXC_IOMUXC_GPR0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR0, field DMAREQ_MUX_SEL0[0:0] (RW)
 *
 * Selects between two possible sources for SDMA_EVENT[2]:
 *
 * Values:
 * 0 - ipu1.
 * 1 - iomux.sdma_events[0] - External DMA Request from pad DISP0_DAT16 or GPIO_17
 */

#define BP_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL0      (0)
#define BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL0      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL0(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL0)
#else
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL0(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL0)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DMAREQ_MUX_SEL0 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL0(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, DMAREQ_MUX_SEL0, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field DMAREQ_MUX_SEL1[1:1] (RW)
 *
 * Selects between two possible sources for SDMA_EVENT[3]:
 *
 * Values:
 * 0 - ecspi1.ipd_req_cspi_rdma_b
 * 1 - i2c3.ipi_int_b
 */

#define BP_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL1      (1)
#define BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL1      (0x00000002)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL1(v)   ((((reg32_t) v) << 1) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL1)
#else
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL1(v)   (((v) << 1) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL1)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DMAREQ_MUX_SEL1 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL1(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, DMAREQ_MUX_SEL1, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field DMAREQ_MUX_SEL2[2:2] (RW)
 *
 * Selects between two possible sources for SDMA_EVENT[4]:
 *
 * Values:
 * 0 - ecspi1.ipd_req_cspi_tdma_b
 * 1 - i2c2.ipi_int_b
 */

#define BP_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL2      (2)
#define BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL2      (0x00000004)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL2(v)   ((((reg32_t) v) << 2) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL2)
#else
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL2(v)   (((v) << 2) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL2)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DMAREQ_MUX_SEL2 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL2(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, DMAREQ_MUX_SEL2, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field DMAREQ_MUX_SEL3[3:3] (RW)
 *
 * Selects between two possible sources for SDMA_EVENT[5]:
 *
 * Values:
 * 0 - ecspi2.ipd_req_cspi_rdma_b
 * 1 - i2c1.ipi_int_b
 */

#define BP_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL3      (3)
#define BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL3      (0x00000008)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL3(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL3)
#else
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL3(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL3)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DMAREQ_MUX_SEL3 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL3(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, DMAREQ_MUX_SEL3, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field DMAREQ_MUX_SEL4[4:4] (RW)
 *
 * Selects between two possible sources for SDMA_EVENT[10]:
 *
 * Values:
 * 0 - ecspi4.ipd_req_cspi_tdma_b
 * 1 - i2c1.ipi_int_b
 */

#define BP_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL4      (4)
#define BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL4      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL4(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL4)
#else
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL4(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL4)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DMAREQ_MUX_SEL4 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL4(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, DMAREQ_MUX_SEL4, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field DMAREQ_MUX_SEL5[5:5] (RW)
 *
 * Selects between two possible sources for SDMA_EVENT[9]:
 *
 * Values:
 * 0 - ecspi4.ipd_req_cspi_rdma_b
 * 1 - epit2.ipi_int_epit_oc
 */

#define BP_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL5      (5)
#define BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL5      (0x00000020)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL5(v)   ((((reg32_t) v) << 5) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL5)
#else
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL5(v)   (((v) << 5) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL5)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DMAREQ_MUX_SEL5 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL5(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, DMAREQ_MUX_SEL5, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field DMAREQ_MUX_SEL6[6:6] (RW)
 *
 * Selects between two possible sources for SDMA_EVENT[23]:
 *
 * Values:
 * 0 - esai.
 * 1 - i2c3.ipi_int_b
 */

#define BP_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL6      (6)
#define BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL6      (0x00000040)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL6(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL6)
#else
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL6(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL6)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DMAREQ_MUX_SEL6 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL6(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, DMAREQ_MUX_SEL6, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field DMAREQ_MUX_SEL7[7:7] (RW)
 *
 * Selects between two possible sources for SDMA_EVENT[14]:
 *
 * Values:
 * 0 - spdif.drq0_spdif_b
 * 1 - iomux.sdma_ext_events[1] - External DMA Request via DISP0_DAT17 or GPIO_18
 */

#define BP_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL7      (7)
#define BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL7      (0x00000080)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL7(v)   ((((reg32_t) v) << 7) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL7)
#else
#define BF_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL7(v)   (((v) << 7) & BM_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL7)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DMAREQ_MUX_SEL7 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_DMAREQ_MUX_SEL7(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, DMAREQ_MUX_SEL7, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field PCIE_RX0_EQ[10:8] (RW)
 *
 * control pcie phy's rx0_eq bits
 */

#define BP_IOMUXC_IOMUXC_GPR0_PCIE_RX0_EQ      (8)
#define BM_IOMUXC_IOMUXC_GPR0_PCIE_RX0_EQ      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_PCIE_RX0_EQ(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_GPR0_PCIE_RX0_EQ)
#else
#define BF_IOMUXC_IOMUXC_GPR0_PCIE_RX0_EQ(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_GPR0_PCIE_RX0_EQ)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_RX0_EQ field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_PCIE_RX0_EQ(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, PCIE_RX0_EQ, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR0, field TX_CLK2_MUX_SEL[15:14] (RW)
 *
 * Selects the source of tx_clk2 in SPDIF according to ASRC clock muxing scheme:
 *
 * Values:
 * 00 - same source as for asrc.asrck_clock_1
 * 01 - same source as for asrc.asrck_clock_2
 * 10 - same source as for asrc.asrck_clock_3
 * 11 - Reserved
 */

#define BP_IOMUXC_IOMUXC_GPR0_TX_CLK2_MUX_SEL      (14)
#define BM_IOMUXC_IOMUXC_GPR0_TX_CLK2_MUX_SEL      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_TX_CLK2_MUX_SEL(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_GPR0_TX_CLK2_MUX_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR0_TX_CLK2_MUX_SEL(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_GPR0_TX_CLK2_MUX_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the TX_CLK2_MUX_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_TX_CLK2_MUX_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, TX_CLK2_MUX_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field CLOCK_1_MUX_SEL[17:16] (RW)
 *
 * Selects the source of asrck_clock_1 in ASRC according to clock muxing scheme:
 *
 * Values:
 * 00 - audmux.amx_output_rxclk_p1 muxed with ssi1.ssi_srck
 * 01 - audmux.amx_output_rxclk_p1
 * 10 - ssi1.ssi_srck
 * 11 - ssi1.rx_bit_clk
 */

#define BP_IOMUXC_IOMUXC_GPR0_CLOCK_1_MUX_SEL      (16)
#define BM_IOMUXC_IOMUXC_GPR0_CLOCK_1_MUX_SEL      (0x00030000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_1_MUX_SEL(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_1_MUX_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_1_MUX_SEL(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_1_MUX_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CLOCK_1_MUX_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_CLOCK_1_MUX_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, CLOCK_1_MUX_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field CLOCK_9_MUX_SEL[19:18] (RW)
 *
 * Selects the source of asrck_clock_9 in ASRC according to clock muxing scheme:
 *
 * Values:
 * 00 - audmux.amx_output_txclk_p1 muxed with ssi1.ssi_stck
 * 01 - audmux.amx_output_txclk_p1
 * 10 - ssi1.ssi_stck
 * 11 - ssi1.tx_bit_clk
 */

#define BP_IOMUXC_IOMUXC_GPR0_CLOCK_9_MUX_SEL      (18)
#define BM_IOMUXC_IOMUXC_GPR0_CLOCK_9_MUX_SEL      (0x000c0000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_9_MUX_SEL(v)   ((((reg32_t) v) << 18) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_9_MUX_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_9_MUX_SEL(v)   (((v) << 18) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_9_MUX_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CLOCK_9_MUX_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_CLOCK_9_MUX_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, CLOCK_9_MUX_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field CLOCK_2_MUX_SEL[21:20] (RW)
 *
 * Selects the source of asrck_clock_2 in ASRC according to clock muxing scheme:
 *
 * Values:
 * 00 - audmux.amx_output_rxclk_p2 muxed with ssi2.ssi_srck
 * 01 - audmux.amx_output_rxclk_p2
 * 10 - ssi2.ssi_srck
 * 11 - ssi2.rx_bit_clk
 */

#define BP_IOMUXC_IOMUXC_GPR0_CLOCK_2_MUX_SEL      (20)
#define BM_IOMUXC_IOMUXC_GPR0_CLOCK_2_MUX_SEL      (0x00300000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_2_MUX_SEL(v)   ((((reg32_t) v) << 20) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_2_MUX_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_2_MUX_SEL(v)   (((v) << 20) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_2_MUX_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CLOCK_2_MUX_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_CLOCK_2_MUX_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, CLOCK_2_MUX_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field CLOCK_A_MUX_SEL[23:22] (RW)
 *
 * Selects the source of asrck_clock_a in ASRC according to clock muxing scheme:
 *
 * Values:
 * 00 - audmux.amx_output_txclk_p2 muxed with ssi2.ssi_stck
 * 01 - audmux.amx_output_txclk_p2
 * 10 - ssi2.ssi_stck
 * 11 - ssi2.tx_bit_clk
 */

#define BP_IOMUXC_IOMUXC_GPR0_CLOCK_A_MUX_SEL      (22)
#define BM_IOMUXC_IOMUXC_GPR0_CLOCK_A_MUX_SEL      (0x00c00000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_A_MUX_SEL(v)   ((((reg32_t) v) << 22) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_A_MUX_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_A_MUX_SEL(v)   (((v) << 22) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_A_MUX_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CLOCK_A_MUX_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_CLOCK_A_MUX_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, CLOCK_A_MUX_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field CLOCK_3_MUX_SEL[25:24] (RW)
 *
 * Selects the source of asrck_clock_3 in ASRC according to clock muxing scheme:
 *
 * Values:
 * 00 - audmux.amx_output_rxclk_p7 muxed with ssi3.ssi_srck
 * 01 - audmux.amx_output_rxclk_p7
 * 10 - ssi3.ssi_srck
 * 11 - ssi3.rx_bit_clk
 */

#define BP_IOMUXC_IOMUXC_GPR0_CLOCK_3_MUX_SEL      (24)
#define BM_IOMUXC_IOMUXC_GPR0_CLOCK_3_MUX_SEL      (0x03000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_3_MUX_SEL(v)   ((((reg32_t) v) << 24) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_3_MUX_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_3_MUX_SEL(v)   (((v) << 24) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_3_MUX_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CLOCK_3_MUX_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_CLOCK_3_MUX_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, CLOCK_3_MUX_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field CLOCK_B_MUX_SEL[27:26] (RW)
 *
 * Selects the source of asrck_clock_b in ASRC according to clock muxing scheme:
 *
 * Values:
 * 00 - audmux.amx_output_txclk_p7 muxed with ssi3.ssi_stck
 * 01 - audmux.amx_output_txclk_p7
 * 10 - ssi3.ssi_stck
 * 11 - ssi3.tx_bit_clk
 */

#define BP_IOMUXC_IOMUXC_GPR0_CLOCK_B_MUX_SEL      (26)
#define BM_IOMUXC_IOMUXC_GPR0_CLOCK_B_MUX_SEL      (0x0c000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_B_MUX_SEL(v)   ((((reg32_t) v) << 26) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_B_MUX_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_B_MUX_SEL(v)   (((v) << 26) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_B_MUX_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CLOCK_B_MUX_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_CLOCK_B_MUX_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, CLOCK_B_MUX_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field CLOCK_0_MUX_SEL[29:28] (RW)
 *
 * Selects the source of asrck_clock_0 in ASRC according to clock muxing scheme:
 *
 * Values:
 * 00 - esai.ipp_ind_sckr muxed with esai.ipp_do_sckr
 * 01 - esai.ipp_ind_sckr
 * 10 - esai.ipp_do_sckr
 * 11 - Reserved
 */

#define BP_IOMUXC_IOMUXC_GPR0_CLOCK_0_MUX_SEL      (28)
#define BM_IOMUXC_IOMUXC_GPR0_CLOCK_0_MUX_SEL      (0x30000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_0_MUX_SEL(v)   ((((reg32_t) v) << 28) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_0_MUX_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_0_MUX_SEL(v)   (((v) << 28) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_0_MUX_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CLOCK_0_MUX_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_CLOCK_0_MUX_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, CLOCK_0_MUX_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR0, field CLOCK_8_MUX_SEL[31:30] (RW)
 *
 * Selects the source of asrck_clock_8 in ASRC according to clock muxing scheme
 *
 * Values:
 * 00 - audmux.amx_output_rxclk_p7 muxed with ssi3.ssi_srck
 * 01 - audmux.amx_output_rxclk_p7
 * 10 - ssi3.ssi_srck
 * 11 - ssi3.rx_bit_clk
 */

#define BP_IOMUXC_IOMUXC_GPR0_CLOCK_8_MUX_SEL      (30)
#define BM_IOMUXC_IOMUXC_GPR0_CLOCK_8_MUX_SEL      (0xc0000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_8_MUX_SEL(v)   ((((reg32_t) v) << 30) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_8_MUX_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR0_CLOCK_8_MUX_SEL(v)   (((v) << 30) & BM_IOMUXC_IOMUXC_GPR0_CLOCK_8_MUX_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CLOCK_8_MUX_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR0_CLOCK_8_MUX_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR0, CLOCK_8_MUX_SEL, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR1 - GPR1 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned ACT_CS0 : 1; //!< See description for ADDRS3[10]
        unsigned ADDRS0 : 2; //!< See description for ADDRS3[10]
        unsigned ACT_CS1 : 1; //!< See description for ADDRS3[10]
        unsigned ADDRS1 : 2; //!< See description for ADDRS3[10]
        unsigned ACT_CS2 : 1; //!< See description for ADDRS3[10]
        unsigned ADDRS2 : 2; //!< See description for ADDRS3[10]
        unsigned ACT_CS3 : 1; //!< See description for ADDRS3[10]
        unsigned ADDRS3 : 2; //!< Active Chip Select and Address Space. Each of the ACT_CSx represents one of the four chip selects of the WEIM. When ACT_CSx=1'b1, the corresponding chip select is active and has a valid address space according to its address space configuration determined by ADDRSx[10] bits ADDRSx[10] is setting the space for each chip select which is active. The address space of the first active chip select must be the biggest one, the following active chip select address spaces may be equal or lower. Total address space size is 128 MByte. The supported configurations are: CS0(128M), CS1 (0M), CS2 (0M), CS3(0M) [default configuration] CS0(64M), CS1(64M), CS2(0M), CS3(0M) CS0(64M), CS1(32M), CS2(32M), CS3(0M) CS0(32M), CS1(32M), CS2(32M), CS3(32M) Address Space Configuration options (ADDRSx[10]):
        unsigned GINT : 1; //!< Global interrupt "0" bit (connected to ARM IRQ#0 and GPC)
        unsigned RESERVED0 : 1; //!< ''usb_otg_id' pin iomux select control. (It functions as the 'daisy chain' mux control)
        unsigned PCIE_INT : 1; //!< PCIe system interrupt request
        unsigned USB_EXP_MODE : 1; //!< USB Exposure mode
        unsigned PCIE_REF_CLK_EN : 1; //!< PCIe PHY reference clock enable
        unsigned RESERVED1 : 1; //!< 
        unsigned PCIE_TEST_PD : 1; //!< PCIe test power down control
        unsigned RESERVED2 : 2; //!< 
        unsigned MIPI_IPU2_SEL : 1; //!< MIPI sensor to the IPU2 mux control (choose between gasket and IOMUX).
        unsigned EXC_MON : 1; //!< Exclusive monitor response select of illegal command (of lal gaskets, except MMDC)
        unsigned RESERVED3 : 1; //!< Reserved
        unsigned MIPI_DPI_OFF : 1; //!< MIPI DPI shutdown request
        unsigned MIPI_COLOR_SW : 1; //!< MIPI color switch control
        unsigned PCIE_ENTER_L1 : 1; //!< PCIe application request to enter L1
        unsigned PCIE_RDY_L23 : 1; //!< PCIe application ready to enter L23
        unsigned PCIE_EXIT_L1 : 1; //!< PCIe application request to exit L1
        unsigned RESERVED4 : 1; //!< Reserved
        unsigned PCIE_REQ : 2; //!< PCIe request
    } B;
} hw_iomuxc_iomuxc_gpr1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR1 register
 */
#define HW_IOMUXC_IOMUXC_GPR1_ADDR      (REGS_IOMUXC_BASE + 0x4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR1           (*(volatile hw_iomuxc_iomuxc_gpr1_t *) HW_IOMUXC_IOMUXC_GPR1_ADDR)
#define HW_IOMUXC_IOMUXC_GPR1_RD()      (HW_IOMUXC_IOMUXC_GPR1.U)
#define HW_IOMUXC_IOMUXC_GPR1_WR(v)     (HW_IOMUXC_IOMUXC_GPR1.U = (v))
#define HW_IOMUXC_IOMUXC_GPR1_SET(v)    (HW_IOMUXC_IOMUXC_GPR1_WR(HW_IOMUXC_IOMUXC_GPR1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR1_CLR(v)    (HW_IOMUXC_IOMUXC_GPR1_WR(HW_IOMUXC_IOMUXC_GPR1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR1_TOG(v)    (HW_IOMUXC_IOMUXC_GPR1_WR(HW_IOMUXC_IOMUXC_GPR1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR1, field ACT_CS0[0:0] (RW)
 *
 * See description for ADDRS3[10]
 */

#define BP_IOMUXC_IOMUXC_GPR1_ACT_CS0      (0)
#define BM_IOMUXC_IOMUXC_GPR1_ACT_CS0      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_ACT_CS0(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_GPR1_ACT_CS0)
#else
#define BF_IOMUXC_IOMUXC_GPR1_ACT_CS0(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_GPR1_ACT_CS0)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ACT_CS0 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_ACT_CS0(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, ACT_CS0, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR1, field ADDRS0[2:1] (RW)
 *
 * See description for ADDRS3[10]
 */

#define BP_IOMUXC_IOMUXC_GPR1_ADDRS0      (1)
#define BM_IOMUXC_IOMUXC_GPR1_ADDRS0      (0x00000006)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_ADDRS0(v)   ((((reg32_t) v) << 1) & BM_IOMUXC_IOMUXC_GPR1_ADDRS0)
#else
#define BF_IOMUXC_IOMUXC_GPR1_ADDRS0(v)   (((v) << 1) & BM_IOMUXC_IOMUXC_GPR1_ADDRS0)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ADDRS0 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_ADDRS0(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, ADDRS0, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR1, field ACT_CS1[3:3] (RW)
 *
 * See description for ADDRS3[10]
 */

#define BP_IOMUXC_IOMUXC_GPR1_ACT_CS1      (3)
#define BM_IOMUXC_IOMUXC_GPR1_ACT_CS1      (0x00000008)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_ACT_CS1(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_GPR1_ACT_CS1)
#else
#define BF_IOMUXC_IOMUXC_GPR1_ACT_CS1(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_GPR1_ACT_CS1)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ACT_CS1 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_ACT_CS1(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, ACT_CS1, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR1, field ADDRS1[5:4] (RW)
 *
 * See description for ADDRS3[10]
 */

#define BP_IOMUXC_IOMUXC_GPR1_ADDRS1      (4)
#define BM_IOMUXC_IOMUXC_GPR1_ADDRS1      (0x00000030)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_ADDRS1(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_GPR1_ADDRS1)
#else
#define BF_IOMUXC_IOMUXC_GPR1_ADDRS1(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_GPR1_ADDRS1)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ADDRS1 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_ADDRS1(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, ADDRS1, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR1, field ACT_CS2[6:6] (RW)
 *
 * See description for ADDRS3[10]
 */

#define BP_IOMUXC_IOMUXC_GPR1_ACT_CS2      (6)
#define BM_IOMUXC_IOMUXC_GPR1_ACT_CS2      (0x00000040)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_ACT_CS2(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_GPR1_ACT_CS2)
#else
#define BF_IOMUXC_IOMUXC_GPR1_ACT_CS2(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_GPR1_ACT_CS2)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ACT_CS2 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_ACT_CS2(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, ACT_CS2, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR1, field ADDRS2[8:7] (RW)
 *
 * See description for ADDRS3[10]
 */

#define BP_IOMUXC_IOMUXC_GPR1_ADDRS2      (7)
#define BM_IOMUXC_IOMUXC_GPR1_ADDRS2      (0x00000180)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_ADDRS2(v)   ((((reg32_t) v) << 7) & BM_IOMUXC_IOMUXC_GPR1_ADDRS2)
#else
#define BF_IOMUXC_IOMUXC_GPR1_ADDRS2(v)   (((v) << 7) & BM_IOMUXC_IOMUXC_GPR1_ADDRS2)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ADDRS2 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_ADDRS2(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, ADDRS2, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR1, field ACT_CS3[9:9] (RW)
 *
 * See description for ADDRS3[10]
 */

#define BP_IOMUXC_IOMUXC_GPR1_ACT_CS3      (9)
#define BM_IOMUXC_IOMUXC_GPR1_ACT_CS3      (0x00000200)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_ACT_CS3(v)   ((((reg32_t) v) << 9) & BM_IOMUXC_IOMUXC_GPR1_ACT_CS3)
#else
#define BF_IOMUXC_IOMUXC_GPR1_ACT_CS3(v)   (((v) << 9) & BM_IOMUXC_IOMUXC_GPR1_ACT_CS3)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ACT_CS3 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_ACT_CS3(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, ACT_CS3, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR1, field ADDRS3[11:10] (RW)
 *
 * Active Chip Select and Address Space. Each of the ACT_CSx represents one of the four chip selects
 * of the WEIM. When ACT_CSx=1'b1, the corresponding chip select is active and has a valid address
 * space according to its address space configuration determined by ADDRSx[10] bits ADDRSx[10] is
 * setting the space for each chip select which is active. The address space of the first active
 * chip select must be the biggest one, the following active chip select address spaces may be equal
 * or lower. Total address space size is 128 MByte. The supported configurations are: CS0(128M), CS1
 * (0M), CS2 (0M), CS3(0M) [default configuration] CS0(64M), CS1(64M), CS2(0M), CS3(0M) CS0(64M),
 * CS1(32M), CS2(32M), CS3(0M) CS0(32M), CS1(32M), CS2(32M), CS3(32M) Address Space Configuration
 * options (ADDRSx[10]):
 *
 * Values:
 * 00 - 32 MByte
 * 01 - 64 MByte
 * 10 - 128 MByte
 * 11 - Reserved
 */

#define BP_IOMUXC_IOMUXC_GPR1_ADDRS3      (10)
#define BM_IOMUXC_IOMUXC_GPR1_ADDRS3      (0x00000c00)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_ADDRS3(v)   ((((reg32_t) v) << 10) & BM_IOMUXC_IOMUXC_GPR1_ADDRS3)
#else
#define BF_IOMUXC_IOMUXC_GPR1_ADDRS3(v)   (((v) << 10) & BM_IOMUXC_IOMUXC_GPR1_ADDRS3)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ADDRS3 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_ADDRS3(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, ADDRS3, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field GINT[12:12] (RW)
 *
 * Global interrupt "0" bit (connected to ARM IRQ#0 and GPC)
 *
 * Values:
 * 0 - Global interrupt request is not asserted
 * 1 - Global interrupt request is asserted
 */

#define BP_IOMUXC_IOMUXC_GPR1_GINT      (12)
#define BM_IOMUXC_IOMUXC_GPR1_GINT      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_GINT(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_GPR1_GINT)
#else
#define BF_IOMUXC_IOMUXC_GPR1_GINT(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_GPR1_GINT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the GINT field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_GINT(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, GINT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field PCIE_INT[14:14] (RW)
 *
 * PCIe system interrupt request
 *
 * Values:
 * 0 - PCIe system interrupt request is not asserted
 * 1 - PCIe system interrupt request is asserted
 */

#define BP_IOMUXC_IOMUXC_GPR1_PCIE_INT      (14)
#define BM_IOMUXC_IOMUXC_GPR1_PCIE_INT      (0x00004000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_INT(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_GPR1_PCIE_INT)
#else
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_INT(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_GPR1_PCIE_INT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_INT field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_PCIE_INT(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, PCIE_INT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field USB_EXP_MODE[15:15] (RW)
 *
 * USB Exposure mode
 *
 * Values:
 * 0 - Exposure mode is disabled.
 * 1 - Exposure mode is enabled.
 */

#define BP_IOMUXC_IOMUXC_GPR1_USB_EXP_MODE      (15)
#define BM_IOMUXC_IOMUXC_GPR1_USB_EXP_MODE      (0x00008000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_USB_EXP_MODE(v)   ((((reg32_t) v) << 15) & BM_IOMUXC_IOMUXC_GPR1_USB_EXP_MODE)
#else
#define BF_IOMUXC_IOMUXC_GPR1_USB_EXP_MODE(v)   (((v) << 15) & BM_IOMUXC_IOMUXC_GPR1_USB_EXP_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the USB_EXP_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_USB_EXP_MODE(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, USB_EXP_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field PCIE_REF_CLK_EN[16:16] (RW)
 *
 * PCIe PHY reference clock enable
 *
 * Values:
 * 0 - PCIe PHY reference clock is disabled
 * 1 - PCIe PHY reference clock is enabled
 */

#define BP_IOMUXC_IOMUXC_GPR1_PCIE_REF_CLK_EN      (16)
#define BM_IOMUXC_IOMUXC_GPR1_PCIE_REF_CLK_EN      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_REF_CLK_EN(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_GPR1_PCIE_REF_CLK_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_REF_CLK_EN(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_GPR1_PCIE_REF_CLK_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_REF_CLK_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_PCIE_REF_CLK_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, PCIE_REF_CLK_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field PCIE_TEST_PD[18:18] (RW)
 *
 * PCIe test power down control
 *
 * Values:
 * 0 - Power down is not requested
 * 1 - Power down is requested
 */

#define BP_IOMUXC_IOMUXC_GPR1_PCIE_TEST_PD      (18)
#define BM_IOMUXC_IOMUXC_GPR1_PCIE_TEST_PD      (0x00040000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_TEST_PD(v)   ((((reg32_t) v) << 18) & BM_IOMUXC_IOMUXC_GPR1_PCIE_TEST_PD)
#else
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_TEST_PD(v)   (((v) << 18) & BM_IOMUXC_IOMUXC_GPR1_PCIE_TEST_PD)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_TEST_PD field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_PCIE_TEST_PD(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, PCIE_TEST_PD, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field MIPI_IPU2_SEL[21:21] (RW)
 *
 * MIPI sensor to the IPU2 mux control (choose between gasket and IOMUX).
 *
 * Values:
 * 0 - Select gasket
 * 1 - Select IOMUX
 */

#define BP_IOMUXC_IOMUXC_GPR1_MIPI_IPU2_SEL      (21)
#define BM_IOMUXC_IOMUXC_GPR1_MIPI_IPU2_SEL      (0x00200000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_MIPI_IPU2_SEL(v)   ((((reg32_t) v) << 21) & BM_IOMUXC_IOMUXC_GPR1_MIPI_IPU2_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR1_MIPI_IPU2_SEL(v)   (((v) << 21) & BM_IOMUXC_IOMUXC_GPR1_MIPI_IPU2_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MIPI_IPU2_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_MIPI_IPU2_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, MIPI_IPU2_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field EXC_MON[22:22] (RW)
 *
 * Exclusive monitor response select of illegal command (of lal gaskets, except MMDC)
 *
 * Values:
 * 0 - OKEY response
 * 1 - SLVError (default)
 */

#define BP_IOMUXC_IOMUXC_GPR1_EXC_MON      (22)
#define BM_IOMUXC_IOMUXC_GPR1_EXC_MON      (0x00400000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_EXC_MON(v)   ((((reg32_t) v) << 22) & BM_IOMUXC_IOMUXC_GPR1_EXC_MON)
#else
#define BF_IOMUXC_IOMUXC_GPR1_EXC_MON(v)   (((v) << 22) & BM_IOMUXC_IOMUXC_GPR1_EXC_MON)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the EXC_MON field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_EXC_MON(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, EXC_MON, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field MIPI_DPI_OFF[24:24] (RW)
 *
 * MIPI DPI shutdown request
 *
 * Values:
 * 0 - MIPI DPI shutdown request is not set
 * 1 - MIPI DPI shutdown request is set
 */

#define BP_IOMUXC_IOMUXC_GPR1_MIPI_DPI_OFF      (24)
#define BM_IOMUXC_IOMUXC_GPR1_MIPI_DPI_OFF      (0x01000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_MIPI_DPI_OFF(v)   ((((reg32_t) v) << 24) & BM_IOMUXC_IOMUXC_GPR1_MIPI_DPI_OFF)
#else
#define BF_IOMUXC_IOMUXC_GPR1_MIPI_DPI_OFF(v)   (((v) << 24) & BM_IOMUXC_IOMUXC_GPR1_MIPI_DPI_OFF)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MIPI_DPI_OFF field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_MIPI_DPI_OFF(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, MIPI_DPI_OFF, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field MIPI_COLOR_SW[25:25] (RW)
 *
 * MIPI color switch control
 *
 * Values:
 * 0 - MIPI color switch request is not set
 * 1 - MIPI color switch request is set
 */

#define BP_IOMUXC_IOMUXC_GPR1_MIPI_COLOR_SW      (25)
#define BM_IOMUXC_IOMUXC_GPR1_MIPI_COLOR_SW      (0x02000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_MIPI_COLOR_SW(v)   ((((reg32_t) v) << 25) & BM_IOMUXC_IOMUXC_GPR1_MIPI_COLOR_SW)
#else
#define BF_IOMUXC_IOMUXC_GPR1_MIPI_COLOR_SW(v)   (((v) << 25) & BM_IOMUXC_IOMUXC_GPR1_MIPI_COLOR_SW)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MIPI_COLOR_SW field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_MIPI_COLOR_SW(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, MIPI_COLOR_SW, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field PCIE_ENTER_L1[26:26] (RW)
 *
 * PCIe application request to enter L1
 *
 * Values:
 * 0 - PCIe application request is not set
 * 1 - PCIe application request is set
 */

#define BP_IOMUXC_IOMUXC_GPR1_PCIE_ENTER_L1      (26)
#define BM_IOMUXC_IOMUXC_GPR1_PCIE_ENTER_L1      (0x04000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_ENTER_L1(v)   ((((reg32_t) v) << 26) & BM_IOMUXC_IOMUXC_GPR1_PCIE_ENTER_L1)
#else
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_ENTER_L1(v)   (((v) << 26) & BM_IOMUXC_IOMUXC_GPR1_PCIE_ENTER_L1)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_ENTER_L1 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_PCIE_ENTER_L1(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, PCIE_ENTER_L1, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field PCIE_RDY_L23[27:27] (RW)
 *
 * PCIe application ready to enter L23
 *
 * Values:
 * 0 - PCIe application is not ready to enter L23
 * 1 - PCIe application is ready to enter L23
 */

#define BP_IOMUXC_IOMUXC_GPR1_PCIE_RDY_L23      (27)
#define BM_IOMUXC_IOMUXC_GPR1_PCIE_RDY_L23      (0x08000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_RDY_L23(v)   ((((reg32_t) v) << 27) & BM_IOMUXC_IOMUXC_GPR1_PCIE_RDY_L23)
#else
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_RDY_L23(v)   (((v) << 27) & BM_IOMUXC_IOMUXC_GPR1_PCIE_RDY_L23)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_RDY_L23 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_PCIE_RDY_L23(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, PCIE_RDY_L23, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field PCIE_EXIT_L1[28:28] (RW)
 *
 * PCIe application request to exit L1
 *
 * Values:
 * 0 - PCIe application request is not set
 * 1 - PCIe application request is set
 */

#define BP_IOMUXC_IOMUXC_GPR1_PCIE_EXIT_L1      (28)
#define BM_IOMUXC_IOMUXC_GPR1_PCIE_EXIT_L1      (0x10000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_EXIT_L1(v)   ((((reg32_t) v) << 28) & BM_IOMUXC_IOMUXC_GPR1_PCIE_EXIT_L1)
#else
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_EXIT_L1(v)   (((v) << 28) & BM_IOMUXC_IOMUXC_GPR1_PCIE_EXIT_L1)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_EXIT_L1 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_PCIE_EXIT_L1(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, PCIE_EXIT_L1, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR1, field PCIE_REQ[31:30] (RW)
 *
 * PCIe request
 */

#define BP_IOMUXC_IOMUXC_GPR1_PCIE_REQ      (30)
#define BM_IOMUXC_IOMUXC_GPR1_PCIE_REQ      (0xc0000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_REQ(v)   ((((reg32_t) v) << 30) & BM_IOMUXC_IOMUXC_GPR1_PCIE_REQ)
#else
#define BF_IOMUXC_IOMUXC_GPR1_PCIE_REQ(v)   (((v) << 30) & BM_IOMUXC_IOMUXC_GPR1_PCIE_REQ)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_REQ field to a new value.
#define BW_IOMUXC_IOMUXC_GPR1_PCIE_REQ(v)   BF_CS1(IOMUXC_IOMUXC_GPR1, PCIE_REQ, v)
#endif

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR2 - GPR2 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned CH0_MODE : 2; //!< LVDS channel 0 operation mode
        unsigned CH1_MODE : 2; //!< LVDS channel 1 operation mode
        unsigned SPLIT_MODE_EN : 1; //!< Enable split mode.
        unsigned DATA_WIDTH_CH0 : 1; //!< Data width for LVDS channel 0. This bit must be set when using JEIDA standard (bit_mapping_ch0 is set)
        unsigned BIT_MAPPING_CH0 : 1; //!< Data mapping for LVDS channel 0.
        unsigned DATA_WIDTH_CH1 : 1; //!< Data width for LVDS channel 1. This bit must be set when using JEIDA standard (bit_mapping_ch1 is set)
        unsigned BIT_MAPPING_CH1 : 1; //!< Data mapping for LVDS channel 1.
        unsigned DI0_VS_POLARITY : 1; //!< Vsync polarity for IPU's DI0 interface.
        unsigned DI1_VS_POLARITY : 1; //!< Vsync polarity for IPU's DI1 interface.
        unsigned RESERVED0 : 4; //!< Reserved
        unsigned BGREF_RRMODE : 1; //!< Select reference resistor for bandgap
        unsigned LVDS_CLK_SHIFT : 3; //!< Shifts the LVDS output clock in relation to the data. Used for debug purposes only. In normal functional operation must be '000'
        unsigned RESERVED1 : 1; //!< Reserved
        unsigned COUNTER_RESET_VAL : 2; //!< Reset value for the LDB counter which determines when the shift registers are loaded with data. Used for debug purposes only. In normal functional operation must be '00'
        unsigned RESERVED2 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_gpr2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR2 register
 */
#define HW_IOMUXC_IOMUXC_GPR2_ADDR      (REGS_IOMUXC_BASE + 0x8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR2           (*(volatile hw_iomuxc_iomuxc_gpr2_t *) HW_IOMUXC_IOMUXC_GPR2_ADDR)
#define HW_IOMUXC_IOMUXC_GPR2_RD()      (HW_IOMUXC_IOMUXC_GPR2.U)
#define HW_IOMUXC_IOMUXC_GPR2_WR(v)     (HW_IOMUXC_IOMUXC_GPR2.U = (v))
#define HW_IOMUXC_IOMUXC_GPR2_SET(v)    (HW_IOMUXC_IOMUXC_GPR2_WR(HW_IOMUXC_IOMUXC_GPR2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR2_CLR(v)    (HW_IOMUXC_IOMUXC_GPR2_WR(HW_IOMUXC_IOMUXC_GPR2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR2_TOG(v)    (HW_IOMUXC_IOMUXC_GPR2_WR(HW_IOMUXC_IOMUXC_GPR2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR2, field CH0_MODE[1:0] (RW)
 *
 * LVDS channel 0 operation mode
 *
 * Values:
 * 00 - Channel disabled.
 * 01 - Channel enabled, routed to DI0
 * 10 - Channel disabled.
 * 11 - Channel enabled, routed to DI1.
 */

#define BP_IOMUXC_IOMUXC_GPR2_CH0_MODE      (0)
#define BM_IOMUXC_IOMUXC_GPR2_CH0_MODE      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_CH0_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_GPR2_CH0_MODE)
#else
#define BF_IOMUXC_IOMUXC_GPR2_CH0_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_GPR2_CH0_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CH0_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_CH0_MODE(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, CH0_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR2, field CH1_MODE[3:2] (RW)
 *
 * LVDS channel 1 operation mode
 *
 * Values:
 * 00 - Channel disabled.
 * 01 - Channel enabled, routed to DI0
 * 10 - Channel disabled.
 * 11 - Channel enabled, routed to DI1.
 */

#define BP_IOMUXC_IOMUXC_GPR2_CH1_MODE      (2)
#define BM_IOMUXC_IOMUXC_GPR2_CH1_MODE      (0x0000000c)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_CH1_MODE(v)   ((((reg32_t) v) << 2) & BM_IOMUXC_IOMUXC_GPR2_CH1_MODE)
#else
#define BF_IOMUXC_IOMUXC_GPR2_CH1_MODE(v)   (((v) << 2) & BM_IOMUXC_IOMUXC_GPR2_CH1_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CH1_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_CH1_MODE(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, CH1_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR2, field SPLIT_MODE_EN[4:4] (RW)
 *
 * Enable split mode.
 *
 * Values:
 * 0 - Split mode is disabled.
 * 1 - Split mode is enabled. In this mode both channels should be enabled and working with the same DI
 *     (ch0_mode and ch1_mode should both be either '01' or '11')
 */

#define BP_IOMUXC_IOMUXC_GPR2_SPLIT_MODE_EN      (4)
#define BM_IOMUXC_IOMUXC_GPR2_SPLIT_MODE_EN      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_SPLIT_MODE_EN(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_GPR2_SPLIT_MODE_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR2_SPLIT_MODE_EN(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_GPR2_SPLIT_MODE_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPLIT_MODE_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_SPLIT_MODE_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, SPLIT_MODE_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR2, field DATA_WIDTH_CH0[5:5] (RW)
 *
 * Data width for LVDS channel 0. This bit must be set when using JEIDA standard (bit_mapping_ch0 is
 * set)
 *
 * Values:
 * 0 - Data width is 18 bits wide (lvds0_tx3 is not used)
 * 1 - Data width is 24 bits wide.
 */

#define BP_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH0      (5)
#define BM_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH0      (0x00000020)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH0(v)   ((((reg32_t) v) << 5) & BM_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH0)
#else
#define BF_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH0(v)   (((v) << 5) & BM_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH0)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA_WIDTH_CH0 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH0(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, DATA_WIDTH_CH0, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR2, field BIT_MAPPING_CH0[6:6] (RW)
 *
 * Data mapping for LVDS channel 0.
 *
 * Values:
 * 0 - Use SPWG standard.
 * 1 - Use JEIDA standard.
 */

#define BP_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH0      (6)
#define BM_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH0      (0x00000040)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH0(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH0)
#else
#define BF_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH0(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH0)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the BIT_MAPPING_CH0 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH0(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, BIT_MAPPING_CH0, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR2, field DATA_WIDTH_CH1[7:7] (RW)
 *
 * Data width for LVDS channel 1. This bit must be set when using JEIDA standard (bit_mapping_ch1 is
 * set)
 *
 * Values:
 * 0 - Data width is 18 bits wide (lvds1_tx3 is not used)
 * 1 - Data width is 24 bits wide.
 */

#define BP_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH1      (7)
#define BM_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH1      (0x00000080)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH1(v)   ((((reg32_t) v) << 7) & BM_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH1)
#else
#define BF_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH1(v)   (((v) << 7) & BM_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH1)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA_WIDTH_CH1 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_DATA_WIDTH_CH1(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, DATA_WIDTH_CH1, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR2, field BIT_MAPPING_CH1[8:8] (RW)
 *
 * Data mapping for LVDS channel 1.
 *
 * Values:
 * 0 - Use SPWG standard.
 * 1 - Use JEIDA standard.
 */

#define BP_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH1      (8)
#define BM_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH1      (0x00000100)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH1(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH1)
#else
#define BF_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH1(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH1)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the BIT_MAPPING_CH1 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_BIT_MAPPING_CH1(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, BIT_MAPPING_CH1, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR2, field DI0_VS_POLARITY[9:9] (RW)
 *
 * Vsync polarity for IPU's DI0 interface.
 *
 * Values:
 * 0 - ipu_di0_vsync is active high.
 * 1 - ipu_di0_vsync is active low.
 */

#define BP_IOMUXC_IOMUXC_GPR2_DI0_VS_POLARITY      (9)
#define BM_IOMUXC_IOMUXC_GPR2_DI0_VS_POLARITY      (0x00000200)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_DI0_VS_POLARITY(v)   ((((reg32_t) v) << 9) & BM_IOMUXC_IOMUXC_GPR2_DI0_VS_POLARITY)
#else
#define BF_IOMUXC_IOMUXC_GPR2_DI0_VS_POLARITY(v)   (((v) << 9) & BM_IOMUXC_IOMUXC_GPR2_DI0_VS_POLARITY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DI0_VS_POLARITY field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_DI0_VS_POLARITY(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, DI0_VS_POLARITY, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR2, field DI1_VS_POLARITY[10:10] (RW)
 *
 * Vsync polarity for IPU's DI1 interface.
 *
 * Values:
 * 0 - ipu_di1_vsync is active high.
 * 1 - ipu_di1_vsync is active low.
 */

#define BP_IOMUXC_IOMUXC_GPR2_DI1_VS_POLARITY      (10)
#define BM_IOMUXC_IOMUXC_GPR2_DI1_VS_POLARITY      (0x00000400)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_DI1_VS_POLARITY(v)   ((((reg32_t) v) << 10) & BM_IOMUXC_IOMUXC_GPR2_DI1_VS_POLARITY)
#else
#define BF_IOMUXC_IOMUXC_GPR2_DI1_VS_POLARITY(v)   (((v) << 10) & BM_IOMUXC_IOMUXC_GPR2_DI1_VS_POLARITY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DI1_VS_POLARITY field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_DI1_VS_POLARITY(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, DI1_VS_POLARITY, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR2, field BGREF_RRMODE[15:15] (RW)
 *
 * Select reference resistor for bandgap
 *
 * Values:
 * 0 - External resistor of 29kOhm is selected
 * 1 - Internal resistor is selected
 */

#define BP_IOMUXC_IOMUXC_GPR2_BGREF_RRMODE      (15)
#define BM_IOMUXC_IOMUXC_GPR2_BGREF_RRMODE      (0x00008000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_BGREF_RRMODE(v)   ((((reg32_t) v) << 15) & BM_IOMUXC_IOMUXC_GPR2_BGREF_RRMODE)
#else
#define BF_IOMUXC_IOMUXC_GPR2_BGREF_RRMODE(v)   (((v) << 15) & BM_IOMUXC_IOMUXC_GPR2_BGREF_RRMODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the BGREF_RRMODE field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_BGREF_RRMODE(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, BGREF_RRMODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR2, field LVDS_CLK_SHIFT[18:16] (RW)
 *
 * Shifts the LVDS output clock in relation to the data. Used for debug purposes only. In normal
 * functional operation must be '000'
 *
 * Values:
 * 000 - Output clock is '1100011' (normal operation)
 * 001 - Output clock is '1110001'
 * 010 - Output clock is '1111000'
 * 011 - Output clock is '1000111'
 * 100 - Output clock is '0001111'
 * 101 - Output clock is '0011111'
 * 110 - Output clock is '0111100'
 * 111 - Output clock is '1100011'
 */

#define BP_IOMUXC_IOMUXC_GPR2_LVDS_CLK_SHIFT      (16)
#define BM_IOMUXC_IOMUXC_GPR2_LVDS_CLK_SHIFT      (0x00070000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_LVDS_CLK_SHIFT(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_GPR2_LVDS_CLK_SHIFT)
#else
#define BF_IOMUXC_IOMUXC_GPR2_LVDS_CLK_SHIFT(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_GPR2_LVDS_CLK_SHIFT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LVDS_CLK_SHIFT field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_LVDS_CLK_SHIFT(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, LVDS_CLK_SHIFT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR2, field COUNTER_RESET_VAL[21:20] (RW)
 *
 * Reset value for the LDB counter which determines when the shift registers are loaded with data.
 * Used for debug purposes only. In normal functional operation must be '00'
 *
 * Values:
 * 00 - Reset value is 5
 * 01 - Reset value is 3
 * 10 - Reset value is 4
 * 11 - Reset value is 6
 */

#define BP_IOMUXC_IOMUXC_GPR2_COUNTER_RESET_VAL      (20)
#define BM_IOMUXC_IOMUXC_GPR2_COUNTER_RESET_VAL      (0x00300000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR2_COUNTER_RESET_VAL(v)   ((((reg32_t) v) << 20) & BM_IOMUXC_IOMUXC_GPR2_COUNTER_RESET_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR2_COUNTER_RESET_VAL(v)   (((v) << 20) & BM_IOMUXC_IOMUXC_GPR2_COUNTER_RESET_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the COUNTER_RESET_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR2_COUNTER_RESET_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR2, COUNTER_RESET_VAL, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR3 - GPR3 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned HDMI_MUX_CTL : 2; //!< HDMI MUX control
        unsigned MIPI_MUX_CTL : 2; //!< MIPI MUX control
        unsigned LVDS0_MUX_CTL : 2; //!< LVDS0 MUX control
        unsigned LVDS1_MUX_CTL : 2; //!< LVDS1 MUX control
        unsigned MIPI_DBI_MUX_CTL : 1; //!< MIPI DBI mux control
        unsigned TZASC1_BOOT_LOCK : 1; //!< TZASC-1 secure boot lock
        unsigned TZASC2_BOOT_LOCK : 1; //!< TZASC-2 secure boot lock
        unsigned CORE0_DBG_ACK_EN : 1; //!< Mask control of Core 1 debug acknowledge to global debug acknowledge
        unsigned CORE1_DBG_ACK_EN : 1; //!< Mask control of Core 1 debug acknowledge to global debug acknowledge.
        unsigned RESERVED1 : 2; //!< Mask control of Core 2 debug acknowledge to global debug acknowledge
        unsigned OCRAM_STATUS : 4; //!< This field shows the OCRAM pipeline settings status, controlled by OCRAM_CTL[24:21] bits respectively. When the control bit is changed, the corresponding status bit goes high and keeps high until this new configuration is applied the internal logic. This provides a way for software to detect that the configuration has become valid. The suggested flow for changing the configuration in software is: set/clear the control bit poll the status bit until it goes to 0 OCRAM_STATUS[17] shows the write address pipeline status. This bit value reflects the propagation of the respective control bit to OCRAM memory. OCRAM_STATUS[18] shows the write data pipeline status. This bit value reflects the propagation of the respective control bit to OCRAM memory. OCRAM_STATUS[19] shows the read address pipeline status. This bit value reflects the propagation of the respective control bit to OCRAM memory. OCRAM_STATUS[20] shows the read data pipeline status. This bit value reflects the propagation of the respective control bit to OCRAM memory.
        unsigned OCRAM_CTL : 4; //!< OCRAM_CTL[24] write address pipeline control bit. When this feature is enabled, the write address from the AXI master would be delayed 1 cycle before it can be accepted by the on-chip RAM. This can avoid setup time issue for the write access on the memory cell at high frequency. Enable this feature would cost at most 1 more clock cycle for each AXI write transaction, i.e., at most 1 more clock cycle for each write burst with multiple beats of data. When this feature is disabled, the write address from the AXI master can be accepted by the on-chip RAM without delay, and data can be written to memory at this cycle (if no other access and write data is also ready at this cycle). 0 write address pipeline is disabled 1 write address pipeline is enabled OCRAM_CTL[23] - write data pipeline control bit When this feature is enabled, the write data from the AXI master would be delayed 1 cycle before it can be accepted by the on-chip RAM. This can avoid setup time issue for the write access on the memory cell at high frequency. Enable this feature would cost at most 1 more clock cycle for each AXI write transaction, i.e., at most 1 more clock cycle for each write burst with multiple beats of data. When this feature is disabled, the write data from the AXI master can be accepted by the on-chip RAM without delay, and data can be written to memory at this cycle (if no other access and write address is also ready at this cycle). 0 write data pipeline is disabled 1 write data pipeline is enabled OCRAM_CTL[22] read address pipeline control bit. When this feature is enabled, the read address from the AXI master would be delayed 1 cycle before it can be accepted by the on-chip RAM. This can avoid setup time issue for the read access on the memory cell at high frequency. Enable this feature would cost at most 1 more clock cycle for each AXI read transaction, i.e., at most 1 more clock cycle for each read burst with multiple beats of data. When this feature is disabled, the read address from the AXI master can be accepted by the on-chip RAM without delay, and data can become ready for master at next clock cycle (if no other access and no read data wait). 0 read address pipeline is disabled 1 read address pipeline is enabled OCRAM_CTL[21] - read data wait state control bit When theread data wait state is enabled, it will cost 2 cycles for each read access, (each beat of a read burst). This can avoid the potential timing problem caused by the relatively longer memory access time at higher frequency. When this feature is disabled, it only costs 1 clock cycle to finish a read transaction, i.e., get read data back in the next cycle of read request becomes valid on the bus.
        unsigned USDHCX_RD_CACHE_CTL : 1; //!< Control uSDHCx [1-4] blocks cacheable attribute of AXI read transactions
        unsigned USDHCX_WR_CACHE_CTL : 1; //!< Control uSDHCx [1-4] blocks cacheable attribute of AXI write transactions
        unsigned BCH_RD_CACHE_CTL : 1; //!< Control BCH block cacheable attribute of AXI read transactions Set of the cache bits, enable packet optimization through the bus system to DDR controller. The only side affect - is that bus may change the nature of the accesses, which may lead to problems when accessing FIFO type address. In most typical cases - these bits should be set. For the GPU3D, GPU2D and OpenVG, such settings is possible through the IP programming model. For few peripherals, for these bits to take effect, it is required to also select set '1' to 'cache-mux' control bit.
        unsigned BCH_WR_CACHE_CTL : 1; //!< Control BCH block cacheable attribute of AXI write transactions
        unsigned GPU_DBG : 2; //!< GPU debug busses to IOMUX
        unsigned RESERVED2 : 1; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_gpr3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR3 register
 */
#define HW_IOMUXC_IOMUXC_GPR3_ADDR      (REGS_IOMUXC_BASE + 0xc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR3           (*(volatile hw_iomuxc_iomuxc_gpr3_t *) HW_IOMUXC_IOMUXC_GPR3_ADDR)
#define HW_IOMUXC_IOMUXC_GPR3_RD()      (HW_IOMUXC_IOMUXC_GPR3.U)
#define HW_IOMUXC_IOMUXC_GPR3_WR(v)     (HW_IOMUXC_IOMUXC_GPR3.U = (v))
#define HW_IOMUXC_IOMUXC_GPR3_SET(v)    (HW_IOMUXC_IOMUXC_GPR3_WR(HW_IOMUXC_IOMUXC_GPR3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR3_CLR(v)    (HW_IOMUXC_IOMUXC_GPR3_WR(HW_IOMUXC_IOMUXC_GPR3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR3_TOG(v)    (HW_IOMUXC_IOMUXC_GPR3_WR(HW_IOMUXC_IOMUXC_GPR3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR3, field HDMI_MUX_CTL[3:2] (RW)
 *
 * HDMI MUX control
 *
 * Values:
 * 00 - HDMI source is IPU1 DI0 port
 * 01 - HDMI source is IPU1 DI1 port
 * 10 - HDMI source is LCDIF
 */

#define BP_IOMUXC_IOMUXC_GPR3_HDMI_MUX_CTL      (2)
#define BM_IOMUXC_IOMUXC_GPR3_HDMI_MUX_CTL      (0x0000000c)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_HDMI_MUX_CTL(v)   ((((reg32_t) v) << 2) & BM_IOMUXC_IOMUXC_GPR3_HDMI_MUX_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR3_HDMI_MUX_CTL(v)   (((v) << 2) & BM_IOMUXC_IOMUXC_GPR3_HDMI_MUX_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HDMI_MUX_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_HDMI_MUX_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, HDMI_MUX_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field MIPI_MUX_CTL[5:4] (RW)
 *
 * MIPI MUX control
 *
 * Values:
 * 00 - MIPI source is IPU1 DI0 port
 * 01 - MIPI source is IPU1 DI1 port
 * 10 - MIPI source is LCDIF
 */

#define BP_IOMUXC_IOMUXC_GPR3_MIPI_MUX_CTL      (4)
#define BM_IOMUXC_IOMUXC_GPR3_MIPI_MUX_CTL      (0x00000030)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_MIPI_MUX_CTL(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_GPR3_MIPI_MUX_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR3_MIPI_MUX_CTL(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_GPR3_MIPI_MUX_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MIPI_MUX_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_MIPI_MUX_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, MIPI_MUX_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field LVDS0_MUX_CTL[7:6] (RW)
 *
 * LVDS0 MUX control
 *
 * Values:
 * 00 - LVDS0 source is IPU1 DI0 port
 * 01 - LVDS0 source is IPU1 DI1 port
 * 10 - LVDS0 source is LCDIF
 */

#define BP_IOMUXC_IOMUXC_GPR3_LVDS0_MUX_CTL      (6)
#define BM_IOMUXC_IOMUXC_GPR3_LVDS0_MUX_CTL      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_LVDS0_MUX_CTL(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_GPR3_LVDS0_MUX_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR3_LVDS0_MUX_CTL(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_GPR3_LVDS0_MUX_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LVDS0_MUX_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_LVDS0_MUX_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, LVDS0_MUX_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field LVDS1_MUX_CTL[9:8] (RW)
 *
 * LVDS1 MUX control
 *
 * Values:
 * 00 - LVDS1 source is IPU1 DI0 port
 * 01 - LVDS1 source is IPU1 DI1 port
 * 10 - LVDS1 source is LCDIF
 */

#define BP_IOMUXC_IOMUXC_GPR3_LVDS1_MUX_CTL      (8)
#define BM_IOMUXC_IOMUXC_GPR3_LVDS1_MUX_CTL      (0x00000300)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_LVDS1_MUX_CTL(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_GPR3_LVDS1_MUX_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR3_LVDS1_MUX_CTL(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_GPR3_LVDS1_MUX_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LVDS1_MUX_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_LVDS1_MUX_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, LVDS1_MUX_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field MIPI_DBI_MUX_CTL[10:10] (RW)
 *
 * MIPI DBI mux control
 *
 * Values:
 * 0 - IPU1 DI_1 input source is MIPI DBI
 * 1 - IPU1 DI_1 input source is itself (from IPU1 DI_1 pad/mux)
 */

#define BP_IOMUXC_IOMUXC_GPR3_MIPI_DBI_MUX_CTL      (10)
#define BM_IOMUXC_IOMUXC_GPR3_MIPI_DBI_MUX_CTL      (0x00000400)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_MIPI_DBI_MUX_CTL(v)   ((((reg32_t) v) << 10) & BM_IOMUXC_IOMUXC_GPR3_MIPI_DBI_MUX_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR3_MIPI_DBI_MUX_CTL(v)   (((v) << 10) & BM_IOMUXC_IOMUXC_GPR3_MIPI_DBI_MUX_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MIPI_DBI_MUX_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_MIPI_DBI_MUX_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, MIPI_DBI_MUX_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field TZASC1_BOOT_LOCK[11:11] (RW)
 *
 * TZASC-1 secure boot lock
 *
 * Values:
 * 0 - secure boot lock is disabled.
 * 1 - secure boot lock is enabled
 */

#define BP_IOMUXC_IOMUXC_GPR3_TZASC1_BOOT_LOCK      (11)
#define BM_IOMUXC_IOMUXC_GPR3_TZASC1_BOOT_LOCK      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_TZASC1_BOOT_LOCK(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_GPR3_TZASC1_BOOT_LOCK)
#else
#define BF_IOMUXC_IOMUXC_GPR3_TZASC1_BOOT_LOCK(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_GPR3_TZASC1_BOOT_LOCK)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the TZASC1_BOOT_LOCK field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_TZASC1_BOOT_LOCK(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, TZASC1_BOOT_LOCK, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field TZASC2_BOOT_LOCK[12:12] (RW)
 *
 * TZASC-2 secure boot lock
 *
 * Values:
 * 0 - secure boot lock is disabled.
 * 1 - secure boot lock is enabled
 */

#define BP_IOMUXC_IOMUXC_GPR3_TZASC2_BOOT_LOCK      (12)
#define BM_IOMUXC_IOMUXC_GPR3_TZASC2_BOOT_LOCK      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_TZASC2_BOOT_LOCK(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_GPR3_TZASC2_BOOT_LOCK)
#else
#define BF_IOMUXC_IOMUXC_GPR3_TZASC2_BOOT_LOCK(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_GPR3_TZASC2_BOOT_LOCK)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the TZASC2_BOOT_LOCK field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_TZASC2_BOOT_LOCK(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, TZASC2_BOOT_LOCK, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field CORE0_DBG_ACK_EN[13:13] (RW)
 *
 * Mask control of Core 1 debug acknowledge to global debug acknowledge
 *
 * Values:
 * 0 - Core 0 debug acknowledge is part of global acknowledge.
 * 1 - Core 0 debug acknowledge is masked by this bit, and it is not part of global acknowledge.
 */

#define BP_IOMUXC_IOMUXC_GPR3_CORE0_DBG_ACK_EN      (13)
#define BM_IOMUXC_IOMUXC_GPR3_CORE0_DBG_ACK_EN      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_CORE0_DBG_ACK_EN(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_GPR3_CORE0_DBG_ACK_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR3_CORE0_DBG_ACK_EN(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_GPR3_CORE0_DBG_ACK_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CORE0_DBG_ACK_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_CORE0_DBG_ACK_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, CORE0_DBG_ACK_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field CORE1_DBG_ACK_EN[14:14] (RW)
 *
 * Mask control of Core 1 debug acknowledge to global debug acknowledge.
 *
 * Values:
 * 0 - Core 1 debug acknowledge is part of global acknowledge.
 * 1 - Core 1 debug acknowledge is masked by this bit, and it is not part of global acknowledge.
 */

#define BP_IOMUXC_IOMUXC_GPR3_CORE1_DBG_ACK_EN      (14)
#define BM_IOMUXC_IOMUXC_GPR3_CORE1_DBG_ACK_EN      (0x00004000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_CORE1_DBG_ACK_EN(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_GPR3_CORE1_DBG_ACK_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR3_CORE1_DBG_ACK_EN(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_GPR3_CORE1_DBG_ACK_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CORE1_DBG_ACK_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_CORE1_DBG_ACK_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, CORE1_DBG_ACK_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field OCRAM_STATUS[20:17] (RO)
 *
 * This field shows the OCRAM pipeline settings status, controlled by OCRAM_CTL[24:21] bits
 * respectively. When the control bit is changed, the corresponding status bit goes high and keeps
 * high until this new configuration is applied the internal logic. This provides a way for software
 * to detect that the configuration has become valid. The suggested flow for changing the
 * configuration in software is: set/clear the control bit poll the status bit until it goes to 0
 * OCRAM_STATUS[17] shows the write address pipeline status. This bit value reflects the propagation
 * of the respective control bit to OCRAM memory. OCRAM_STATUS[18] shows the write data pipeline
 * status. This bit value reflects the propagation of the respective control bit to OCRAM memory.
 * OCRAM_STATUS[19] shows the read address pipeline status. This bit value reflects the propagation
 * of the respective control bit to OCRAM memory. OCRAM_STATUS[20] shows the read data pipeline
 * status. This bit value reflects the propagation of the respective control bit to OCRAM memory.
 *
 * Values:
 * 0 - read data pipeline configuration valid
 * 1 - read data pipeline control bit changed
 */

#define BP_IOMUXC_IOMUXC_GPR3_OCRAM_STATUS      (17)
#define BM_IOMUXC_IOMUXC_GPR3_OCRAM_STATUS      (0x001e0000)


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field OCRAM_CTL[24:21] (RW)
 *
 * OCRAM_CTL[24] write address pipeline control bit. When this feature is enabled, the write address
 * from the AXI master would be delayed 1 cycle before it can be accepted by the on-chip RAM. This
 * can avoid setup time issue for the write access on the memory cell at high frequency. Enable this
 * feature would cost at most 1 more clock cycle for each AXI write transaction, i.e., at most 1
 * more clock cycle for each write burst with multiple beats of data. When this feature is disabled,
 * the write address from the AXI master can be accepted by the on-chip RAM without delay, and data
 * can be written to memory at this cycle (if no other access and write data is also ready at this
 * cycle). 0 write address pipeline is disabled 1 write address pipeline is enabled OCRAM_CTL[23] -
 * write data pipeline control bit When this feature is enabled, the write data from the AXI master
 * would be delayed 1 cycle before it can be accepted by the on-chip RAM. This can avoid setup time
 * issue for the write access on the memory cell at high frequency. Enable this feature would cost
 * at most 1 more clock cycle for each AXI write transaction, i.e., at most 1 more clock cycle for
 * each write burst with multiple beats of data. When this feature is disabled, the write data from
 * the AXI master can be accepted by the on-chip RAM without delay, and data can be written to
 * memory at this cycle (if no other access and write address is also ready at this cycle). 0 write
 * data pipeline is disabled 1 write data pipeline is enabled OCRAM_CTL[22] read address pipeline
 * control bit. When this feature is enabled, the read address from the AXI master would be delayed
 * 1 cycle before it can be accepted by the on-chip RAM. This can avoid setup time issue for the
 * read access on the memory cell at high frequency. Enable this feature would cost at most 1 more
 * clock cycle for each AXI read transaction, i.e., at most 1 more clock cycle for each read burst
 * with multiple beats of data. When this feature is disabled, the read address from the AXI master
 * can be accepted by the on-chip RAM without delay, and data can become ready for master at next
 * clock cycle (if no other access and no read data wait). 0 read address pipeline is disabled 1
 * read address pipeline is enabled OCRAM_CTL[21] - read data wait state control bit When theread
 * data wait state is enabled, it will cost 2 cycles for each read access, (each beat of a read
 * burst). This can avoid the potential timing problem caused by the relatively longer memory access
 * time at higher frequency. When this feature is disabled, it only costs 1 clock cycle to finish a
 * read transaction, i.e., get read data back in the next cycle of read request becomes valid on the
 * bus.
 *
 * Values:
 * 0 - read data pipeline is disabled
 * 1 - read data pipeline is enabled
 */

#define BP_IOMUXC_IOMUXC_GPR3_OCRAM_CTL      (21)
#define BM_IOMUXC_IOMUXC_GPR3_OCRAM_CTL      (0x01e00000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_OCRAM_CTL(v)   ((((reg32_t) v) << 21) & BM_IOMUXC_IOMUXC_GPR3_OCRAM_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR3_OCRAM_CTL(v)   (((v) << 21) & BM_IOMUXC_IOMUXC_GPR3_OCRAM_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the OCRAM_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_OCRAM_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, OCRAM_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field USDHCX_RD_CACHE_CTL[25:25] (RW)
 *
 * Control uSDHCx [1-4] blocks cacheable attribute of AXI read transactions
 *
 * Values:
 * 0 - Cacheable attribute is off for read transactions.
 * 1 - Cacheable attribute is on for read transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR3_USDHCX_RD_CACHE_CTL      (25)
#define BM_IOMUXC_IOMUXC_GPR3_USDHCX_RD_CACHE_CTL      (0x02000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_USDHCX_RD_CACHE_CTL(v)   ((((reg32_t) v) << 25) & BM_IOMUXC_IOMUXC_GPR3_USDHCX_RD_CACHE_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR3_USDHCX_RD_CACHE_CTL(v)   (((v) << 25) & BM_IOMUXC_IOMUXC_GPR3_USDHCX_RD_CACHE_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the USDHCX_RD_CACHE_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_USDHCX_RD_CACHE_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, USDHCX_RD_CACHE_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field USDHCX_WR_CACHE_CTL[26:26] (RW)
 *
 * Control uSDHCx [1-4] blocks cacheable attribute of AXI write transactions
 *
 * Values:
 * 0 - Cacheable attribute is off for write transactions.
 * 1 - Cacheable attribute is on for write transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR3_USDHCX_WR_CACHE_CTL      (26)
#define BM_IOMUXC_IOMUXC_GPR3_USDHCX_WR_CACHE_CTL      (0x04000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_USDHCX_WR_CACHE_CTL(v)   ((((reg32_t) v) << 26) & BM_IOMUXC_IOMUXC_GPR3_USDHCX_WR_CACHE_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR3_USDHCX_WR_CACHE_CTL(v)   (((v) << 26) & BM_IOMUXC_IOMUXC_GPR3_USDHCX_WR_CACHE_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the USDHCX_WR_CACHE_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_USDHCX_WR_CACHE_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, USDHCX_WR_CACHE_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field BCH_RD_CACHE_CTL[27:27] (RW)
 *
 * Control BCH block cacheable attribute of AXI read transactions Set of the cache bits, enable
 * packet optimization through the bus system to DDR controller. The only side affect - is that bus
 * may change the nature of the accesses, which may lead to problems when accessing FIFO type
 * address. In most typical cases - these bits should be set. For the GPU3D, GPU2D and OpenVG, such
 * settings is possible through the IP programming model. For few peripherals, for these bits to
 * take effect, it is required to also select set '1' to 'cache-mux' control bit.
 *
 * Values:
 * 0 - Cacheable attribute is off for read transactions.
 * 1 - Cacheable attribute is on for read transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR3_BCH_RD_CACHE_CTL      (27)
#define BM_IOMUXC_IOMUXC_GPR3_BCH_RD_CACHE_CTL      (0x08000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_BCH_RD_CACHE_CTL(v)   ((((reg32_t) v) << 27) & BM_IOMUXC_IOMUXC_GPR3_BCH_RD_CACHE_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR3_BCH_RD_CACHE_CTL(v)   (((v) << 27) & BM_IOMUXC_IOMUXC_GPR3_BCH_RD_CACHE_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the BCH_RD_CACHE_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_BCH_RD_CACHE_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, BCH_RD_CACHE_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field BCH_WR_CACHE_CTL[28:28] (RW)
 *
 * Control BCH block cacheable attribute of AXI write transactions
 *
 * Values:
 * 0 - Cacheable attribute is off for write transactions.
 * 1 - Cacheable attribute is on for write transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR3_BCH_WR_CACHE_CTL      (28)
#define BM_IOMUXC_IOMUXC_GPR3_BCH_WR_CACHE_CTL      (0x10000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_BCH_WR_CACHE_CTL(v)   ((((reg32_t) v) << 28) & BM_IOMUXC_IOMUXC_GPR3_BCH_WR_CACHE_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR3_BCH_WR_CACHE_CTL(v)   (((v) << 28) & BM_IOMUXC_IOMUXC_GPR3_BCH_WR_CACHE_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the BCH_WR_CACHE_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_BCH_WR_CACHE_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, BCH_WR_CACHE_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR3, field GPU_DBG[30:29] (RW)
 *
 * GPU debug busses to IOMUX
 *
 * Values:
 * 00 - GPU3D
 * 01 - GPU2D
 * 10 - OpenVG
 * 11 - Reserved
 */

#define BP_IOMUXC_IOMUXC_GPR3_GPU_DBG      (29)
#define BM_IOMUXC_IOMUXC_GPR3_GPU_DBG      (0x60000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR3_GPU_DBG(v)   ((((reg32_t) v) << 29) & BM_IOMUXC_IOMUXC_GPR3_GPU_DBG)
#else
#define BF_IOMUXC_IOMUXC_GPR3_GPU_DBG(v)   (((v) << 29) & BM_IOMUXC_IOMUXC_GPR3_GPU_DBG)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the GPU_DBG field to a new value.
#define BW_IOMUXC_IOMUXC_GPR3_GPU_DBG(v)   BF_CS1(IOMUXC_IOMUXC_GPR3, GPU_DBG, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR4 - GPR4 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned IPU_RD_CACHE_CTL : 1; //!< Control IPU-1 block cacheable attribute of AXI read transactions Set of the cache bits, enable packet optimization through the bus system to DDR controller. The only side affect - is that bus may change the nature of the accesses, which may lead to problems when accessing FIFO type address. In most typical cases - these bits should be set. For the GPU3D, GPU2D and OpenVG, such settings is possible through the IP programming model. For few peripherals, for these bits to take effect, it is required to also select set '1' to 'cache-mux' control bit.
        unsigned IPU_WR_CACHE_CTL : 1; //!< Control IPU-1 block cacheable attribute of AXI write transactions
        unsigned VPU_P_RD_CACHE_VAL : 1; //!< VPU (primary bus) block cacheable attribute value of AXI read transactions The value of VPU_P_RD_CACHE_VAL is affecting the transactions only if VPU_RD_CACHE_SEL is set.
        unsigned VPU_P_WR_CACHE_VAL : 1; //!< VPU (primary bus) block cacheable attribute value of AXI write transactions The value of VPU_P_WR_CACHE_VAL is affecting the transactions only if VPU_WR_CACHE_SEL is set.
        unsigned VPU_S_RD_CACHE_VAL : 1; //!< VPU (secondary bus) block cacheable attribute value of AXI read transactions The value of VPU_S_RD_CACHE_VAL is affecting the transactions only if VPU_RD_CACHE_SEL is set.
        unsigned VPU_S_WR_CACHE_VAL : 1; //!< VPU (secondary bus) block cacheable attribute value of AXI write transactions The value of VPU_S_WR_CACHE_VAL is affecting the transactions only if VPU_WR_CACHE_SEL is set.
        unsigned VPU_RD_CACHE_SEL : 1; //!< This bit selects the cacheable attribute of VPU AXI read transcations (both primary and secondary AXI buses)
        unsigned VPU_WR_CACHE_SEL : 1; //!< This bit selects the cacheable attribute of VPU AXI write transcations (both primary and secondary AXI buses)
        unsigned SOC_VERSION : 8; //!< This is status (read only) field.
        unsigned ENET_STOP_ACK : 1; //!< ENET stop acknowledge. This is status (read only) bit.
        unsigned CAN1_STOP_ACK : 1; //!< CAN-1 stop acknowledge. This is status (read only) bit.
        unsigned CAN2_STOP_ACK : 1; //!< CAN-2 stop acknowledge. This is status (read only) bit.
        unsigned SDMA_STOP_ACK : 1; //!< SDMA stop acknowledge. This is status (read only) bit.
        unsigned RESERVED0 : 4; //!< Reserved
        unsigned PCIE_RD_CACHE_VAL : 1; //!< PCIe block cacheable attribute value of AXI read transactions The value of PCIe_RD_CACHE_VAL is affecting the transactions only if PCIe_RD_CACHE_SEL is set.
        unsigned PCIE_WR_CACHE_VAL : 1; //!< PCIe block cacheable attribute value of AXI write transactions The value of PCIe_WR_CACHE_VAL is affecting the transactions only if PCIe_WR_CACHE_SEL is set.
        unsigned PCIE_RD_CACHE_SEL : 1; //!< This bit selects the cacheable attribute of PCIe AXI read transcations)
        unsigned PCIE_WR_CACHE_SEL : 1; //!< This bit selects the cacheable attribute of PCIe AXI write transcations
        unsigned VDOA_RD_CACHE_VAL : 1; //!< VDOA block cacheable attribute value of AXI read transactions The value of VDOA_RD_CACHE_VAL is affecting the transactions only if VDOA_RD_CACHE_SEL is set.
        unsigned VDOA_WR_CACHE_VAL : 1; //!< VDOA block cacheable attribute value of AXI write transactions The value of VDOA_WR_CACHE_VAL is affecting the transactions only if VDOA_WR_CACHE_SEL is set.
        unsigned VDOA_RD_CACHE_SEL : 1; //!< This bit selects the cacheable attribute of VDOA AXI read transcations)
        unsigned VDOA_WR_CACHE_SEL : 1; //!< This bit selects the cacheable attribute of VDOA AXI write transcations
    } B;
} hw_iomuxc_iomuxc_gpr4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR4 register
 */
#define HW_IOMUXC_IOMUXC_GPR4_ADDR      (REGS_IOMUXC_BASE + 0x10)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR4           (*(volatile hw_iomuxc_iomuxc_gpr4_t *) HW_IOMUXC_IOMUXC_GPR4_ADDR)
#define HW_IOMUXC_IOMUXC_GPR4_RD()      (HW_IOMUXC_IOMUXC_GPR4.U)
#define HW_IOMUXC_IOMUXC_GPR4_WR(v)     (HW_IOMUXC_IOMUXC_GPR4.U = (v))
#define HW_IOMUXC_IOMUXC_GPR4_SET(v)    (HW_IOMUXC_IOMUXC_GPR4_WR(HW_IOMUXC_IOMUXC_GPR4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR4_CLR(v)    (HW_IOMUXC_IOMUXC_GPR4_WR(HW_IOMUXC_IOMUXC_GPR4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR4_TOG(v)    (HW_IOMUXC_IOMUXC_GPR4_WR(HW_IOMUXC_IOMUXC_GPR4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR4, field IPU_RD_CACHE_CTL[0:0] (RW)
 *
 * Control IPU-1 block cacheable attribute of AXI read transactions Set of the cache bits, enable
 * packet optimization through the bus system to DDR controller. The only side affect - is that bus
 * may change the nature of the accesses, which may lead to problems when accessing FIFO type
 * address. In most typical cases - these bits should be set. For the GPU3D, GPU2D and OpenVG, such
 * settings is possible through the IP programming model. For few peripherals, for these bits to
 * take effect, it is required to also select set '1' to 'cache-mux' control bit.
 *
 * Values:
 * 0 - Cacheable attribute is off for read transactions.
 * 1 - Cacheable attribute is on for read transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR4_IPU_RD_CACHE_CTL      (0)
#define BM_IOMUXC_IOMUXC_GPR4_IPU_RD_CACHE_CTL      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_IPU_RD_CACHE_CTL(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_GPR4_IPU_RD_CACHE_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_IPU_RD_CACHE_CTL(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_GPR4_IPU_RD_CACHE_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the IPU_RD_CACHE_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_IPU_RD_CACHE_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, IPU_RD_CACHE_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field IPU_WR_CACHE_CTL[1:1] (RW)
 *
 * Control IPU-1 block cacheable attribute of AXI write transactions
 *
 * Values:
 * 0 - Cacheable attribute is off for write transactions.
 * 1 - Cacheable attribute is on for write transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR4_IPU_WR_CACHE_CTL      (1)
#define BM_IOMUXC_IOMUXC_GPR4_IPU_WR_CACHE_CTL      (0x00000002)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_IPU_WR_CACHE_CTL(v)   ((((reg32_t) v) << 1) & BM_IOMUXC_IOMUXC_GPR4_IPU_WR_CACHE_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_IPU_WR_CACHE_CTL(v)   (((v) << 1) & BM_IOMUXC_IOMUXC_GPR4_IPU_WR_CACHE_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the IPU_WR_CACHE_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_IPU_WR_CACHE_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, IPU_WR_CACHE_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field VPU_P_RD_CACHE_VAL[2:2] (RW)
 *
 * VPU (primary bus) block cacheable attribute value of AXI read transactions The value of
 * VPU_P_RD_CACHE_VAL is affecting the transactions only if VPU_RD_CACHE_SEL is set.
 *
 * Values:
 * 0 - Cacheable attribute is off for read transactions.
 * 1 - Cacheable attribute is on for read transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR4_VPU_P_RD_CACHE_VAL      (2)
#define BM_IOMUXC_IOMUXC_GPR4_VPU_P_RD_CACHE_VAL      (0x00000004)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_VPU_P_RD_CACHE_VAL(v)   ((((reg32_t) v) << 2) & BM_IOMUXC_IOMUXC_GPR4_VPU_P_RD_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_VPU_P_RD_CACHE_VAL(v)   (((v) << 2) & BM_IOMUXC_IOMUXC_GPR4_VPU_P_RD_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the VPU_P_RD_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_VPU_P_RD_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, VPU_P_RD_CACHE_VAL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field VPU_P_WR_CACHE_VAL[3:3] (RW)
 *
 * VPU (primary bus) block cacheable attribute value of AXI write transactions The value of
 * VPU_P_WR_CACHE_VAL is affecting the transactions only if VPU_WR_CACHE_SEL is set.
 *
 * Values:
 * 0 - Cacheable attribute is off for write transactions.
 * 1 - Cacheable attribute is on for write transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR4_VPU_P_WR_CACHE_VAL      (3)
#define BM_IOMUXC_IOMUXC_GPR4_VPU_P_WR_CACHE_VAL      (0x00000008)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_VPU_P_WR_CACHE_VAL(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_GPR4_VPU_P_WR_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_VPU_P_WR_CACHE_VAL(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_GPR4_VPU_P_WR_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the VPU_P_WR_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_VPU_P_WR_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, VPU_P_WR_CACHE_VAL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field VPU_S_RD_CACHE_VAL[4:4] (RW)
 *
 * VPU (secondary bus) block cacheable attribute value of AXI read transactions The value of
 * VPU_S_RD_CACHE_VAL is affecting the transactions only if VPU_RD_CACHE_SEL is set.
 */

#define BP_IOMUXC_IOMUXC_GPR4_VPU_S_RD_CACHE_VAL      (4)
#define BM_IOMUXC_IOMUXC_GPR4_VPU_S_RD_CACHE_VAL      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_VPU_S_RD_CACHE_VAL(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_GPR4_VPU_S_RD_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_VPU_S_RD_CACHE_VAL(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_GPR4_VPU_S_RD_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the VPU_S_RD_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_VPU_S_RD_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, VPU_S_RD_CACHE_VAL, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR4, field VPU_S_WR_CACHE_VAL[5:5] (RW)
 *
 * VPU (secondary bus) block cacheable attribute value of AXI write transactions The value of
 * VPU_S_WR_CACHE_VAL is affecting the transactions only if VPU_WR_CACHE_SEL is set.
 */

#define BP_IOMUXC_IOMUXC_GPR4_VPU_S_WR_CACHE_VAL      (5)
#define BM_IOMUXC_IOMUXC_GPR4_VPU_S_WR_CACHE_VAL      (0x00000020)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_VPU_S_WR_CACHE_VAL(v)   ((((reg32_t) v) << 5) & BM_IOMUXC_IOMUXC_GPR4_VPU_S_WR_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_VPU_S_WR_CACHE_VAL(v)   (((v) << 5) & BM_IOMUXC_IOMUXC_GPR4_VPU_S_WR_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the VPU_S_WR_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_VPU_S_WR_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, VPU_S_WR_CACHE_VAL, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR4, field VPU_RD_CACHE_SEL[6:6] (RW)
 *
 * This bit selects the cacheable attribute of VPU AXI read transcations (both primary and secondary
 * AXI buses)
 *
 * Values:
 * 0 - The read transaction cacheable attribute is driven by the VPU core
 * 1 - The read transaction cacheable attribute is driven by VPU_SEC_RD_CACHE_VAL for secondary bus and
 *     VPU_P_RD_CACHE_VAL for primary bus.
 */

#define BP_IOMUXC_IOMUXC_GPR4_VPU_RD_CACHE_SEL      (6)
#define BM_IOMUXC_IOMUXC_GPR4_VPU_RD_CACHE_SEL      (0x00000040)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_VPU_RD_CACHE_SEL(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_GPR4_VPU_RD_CACHE_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_VPU_RD_CACHE_SEL(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_GPR4_VPU_RD_CACHE_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the VPU_RD_CACHE_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_VPU_RD_CACHE_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, VPU_RD_CACHE_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field VPU_WR_CACHE_SEL[7:7] (RW)
 *
 * This bit selects the cacheable attribute of VPU AXI write transcations (both primary and
 * secondary AXI buses)
 *
 * Values:
 * 0 - The write transactions cacheable attribute is driven by the VPU core
 * 1 - The write transactions cacheable attribute is driven by VPU_SEC_WR_CACHE_VAL for secondary bus and
 *     VPU_P_WR_CACHE_VAL for primary bus.
 */

#define BP_IOMUXC_IOMUXC_GPR4_VPU_WR_CACHE_SEL      (7)
#define BM_IOMUXC_IOMUXC_GPR4_VPU_WR_CACHE_SEL      (0x00000080)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_VPU_WR_CACHE_SEL(v)   ((((reg32_t) v) << 7) & BM_IOMUXC_IOMUXC_GPR4_VPU_WR_CACHE_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_VPU_WR_CACHE_SEL(v)   (((v) << 7) & BM_IOMUXC_IOMUXC_GPR4_VPU_WR_CACHE_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the VPU_WR_CACHE_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_VPU_WR_CACHE_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, VPU_WR_CACHE_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field SOC_VERSION[15:8] (RO)
 *
 * This is status (read only) field.
 */

#define BP_IOMUXC_IOMUXC_GPR4_SOC_VERSION      (8)
#define BM_IOMUXC_IOMUXC_GPR4_SOC_VERSION      (0x0000ff00)

/* --- Register HW_IOMUXC_IOMUXC_GPR4, field ENET_STOP_ACK[16:16] (RO)
 *
 * ENET stop acknowledge. This is status (read only) bit.
 *
 * Values:
 * 0 - ENET stop acknowledge is not asserted.
 * 1 - ENET stop acknowledge is asserted, ENET is in STOP mode.
 */

#define BP_IOMUXC_IOMUXC_GPR4_ENET_STOP_ACK      (16)
#define BM_IOMUXC_IOMUXC_GPR4_ENET_STOP_ACK      (0x00010000)


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field CAN1_STOP_ACK[17:17] (RO)
 *
 * CAN-1 stop acknowledge. This is status (read only) bit.
 *
 * Values:
 * 0 - CAN-1 stop acknowledge is not asserted.
 * 1 - CAN-1 stop acknowledge is asserted, CAN-1 is in STOP mode.
 */

#define BP_IOMUXC_IOMUXC_GPR4_CAN1_STOP_ACK      (17)
#define BM_IOMUXC_IOMUXC_GPR4_CAN1_STOP_ACK      (0x00020000)


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field CAN2_STOP_ACK[18:18] (RO)
 *
 * CAN-2 stop acknowledge. This is status (read only) bit.
 *
 * Values:
 * 0 - CAN-2 stop acknowledge is not asserted.
 * 1 - CAN-2 stop acknowledge is asserted, CAN-2 is in STOP mode.
 */

#define BP_IOMUXC_IOMUXC_GPR4_CAN2_STOP_ACK      (18)
#define BM_IOMUXC_IOMUXC_GPR4_CAN2_STOP_ACK      (0x00040000)


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field SDMA_STOP_ACK[19:19] (RO)
 *
 * SDMA stop acknowledge. This is status (read only) bit.
 *
 * Values:
 * 0 - SDMA stop acknowledge is not asserted.
 * 1 - SDMA stop acknowledge is asserted, SDMA is in STOP mode.
 */

#define BP_IOMUXC_IOMUXC_GPR4_SDMA_STOP_ACK      (19)
#define BM_IOMUXC_IOMUXC_GPR4_SDMA_STOP_ACK      (0x00080000)


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field PCIE_RD_CACHE_VAL[24:24] (RW)
 *
 * PCIe block cacheable attribute value of AXI read transactions The value of PCIe_RD_CACHE_VAL is
 * affecting the transactions only if PCIe_RD_CACHE_SEL is set.
 *
 * Values:
 * 0 - Cacheable attribute is off for read transactions.
 * 1 - Cacheable attribute is on for read transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_VAL      (24)
#define BM_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_VAL      (0x01000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_VAL(v)   ((((reg32_t) v) << 24) & BM_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_VAL(v)   (((v) << 24) & BM_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_RD_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, PCIE_RD_CACHE_VAL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field PCIE_WR_CACHE_VAL[25:25] (RW)
 *
 * PCIe block cacheable attribute value of AXI write transactions The value of PCIe_WR_CACHE_VAL is
 * affecting the transactions only if PCIe_WR_CACHE_SEL is set.
 *
 * Values:
 * 0 - Cacheable attribute is off for write transactions.
 * 1 - Cacheable attribute is on for write transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_VAL      (25)
#define BM_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_VAL      (0x02000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_VAL(v)   ((((reg32_t) v) << 25) & BM_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_VAL(v)   (((v) << 25) & BM_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_WR_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, PCIE_WR_CACHE_VAL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field PCIE_RD_CACHE_SEL[26:26] (RW)
 *
 * This bit selects the cacheable attribute of PCIe AXI read transcations)
 *
 * Values:
 * 0 - The read transaction cacheable attribute is driven by the PCIe core
 * 1 - The read transaction cacheable attribute is driven by PCIe_RD_CACHE_VAL.
 */

#define BP_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_SEL      (26)
#define BM_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_SEL      (0x04000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_SEL(v)   ((((reg32_t) v) << 26) & BM_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_SEL(v)   (((v) << 26) & BM_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_RD_CACHE_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_PCIE_RD_CACHE_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, PCIE_RD_CACHE_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field PCIE_WR_CACHE_SEL[27:27] (RW)
 *
 * This bit selects the cacheable attribute of PCIe AXI write transcations
 *
 * Values:
 * 0 - The write transactions cacheable attribute is driven by the PCIe core
 * 1 - The write transactions cacheable attribute is driven by PCIe_WR_CACHE_VAL.
 */

#define BP_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_SEL      (27)
#define BM_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_SEL      (0x08000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_SEL(v)   ((((reg32_t) v) << 27) & BM_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_SEL(v)   (((v) << 27) & BM_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_WR_CACHE_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_PCIE_WR_CACHE_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, PCIE_WR_CACHE_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field VDOA_RD_CACHE_VAL[28:28] (RW)
 *
 * VDOA block cacheable attribute value of AXI read transactions The value of VDOA_RD_CACHE_VAL is
 * affecting the transactions only if VDOA_RD_CACHE_SEL is set.
 *
 * Values:
 * 0 - Cacheable attribute is off for read transactions.
 * 1 - Cacheable attribute is on for read transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_VAL      (28)
#define BM_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_VAL      (0x10000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_VAL(v)   ((((reg32_t) v) << 28) & BM_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_VAL(v)   (((v) << 28) & BM_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the VDOA_RD_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, VDOA_RD_CACHE_VAL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field VDOA_WR_CACHE_VAL[29:29] (RW)
 *
 * VDOA block cacheable attribute value of AXI write transactions The value of VDOA_WR_CACHE_VAL is
 * affecting the transactions only if VDOA_WR_CACHE_SEL is set.
 *
 * Values:
 * 0 - Cacheable attribute is off for write transactions.
 * 1 - Cacheable attribute is on for write transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_VAL      (29)
#define BM_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_VAL      (0x20000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_VAL(v)   ((((reg32_t) v) << 29) & BM_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_VAL(v)   (((v) << 29) & BM_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the VDOA_WR_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, VDOA_WR_CACHE_VAL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field VDOA_RD_CACHE_SEL[30:30] (RW)
 *
 * This bit selects the cacheable attribute of VDOA AXI read transcations)
 *
 * Values:
 * 0 - The read transaction cacheable attribute is driven by the VDOA core
 * 1 - The read transaction cacheable attribute is driven by VDOA_RD_CACHE_VAL.
 */

#define BP_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_SEL      (30)
#define BM_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_SEL      (0x40000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_SEL(v)   ((((reg32_t) v) << 30) & BM_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_SEL(v)   (((v) << 30) & BM_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the VDOA_RD_CACHE_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_VDOA_RD_CACHE_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, VDOA_RD_CACHE_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR4, field VDOA_WR_CACHE_SEL[31:31] (RW)
 *
 * This bit selects the cacheable attribute of VDOA AXI write transcations
 *
 * Values:
 * 0 - The write transactions cacheable attribute is driven by the VDOA core
 * 1 - The write transactions cacheable attribute is driven by VDOA_WR_CACHE_VAL.
 */

#define BP_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_SEL      (31)
#define BM_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_SEL      (0x80000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_SEL(v)   ((((reg32_t) v) << 31) & BM_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_SEL(v)   (((v) << 31) & BM_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the VDOA_WR_CACHE_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR4_VDOA_WR_CACHE_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR4, VDOA_WR_CACHE_SEL, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR5 - GPR5 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned ARM_WFI : 2; //!< ARM WFI event out indicating on WFI state of the cores (these are status, read only bits)
        unsigned RESERVED0 : 2; //!< 
        unsigned ARM_WFE : 2; //!< ARM WFE event out indication on WFE state of the cores (these are status, read only bits)
        unsigned RESERVED1 : 2; //!< 
        unsigned L2_CLK_STOP : 1; //!< L2 cache clock stop indication (this is a status, read only bit]
        unsigned RESERVED2 : 23; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_gpr5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR5 register
 */
#define HW_IOMUXC_IOMUXC_GPR5_ADDR      (REGS_IOMUXC_BASE + 0x14)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR5           (*(volatile hw_iomuxc_iomuxc_gpr5_t *) HW_IOMUXC_IOMUXC_GPR5_ADDR)
#define HW_IOMUXC_IOMUXC_GPR5_RD()      (HW_IOMUXC_IOMUXC_GPR5.U)
#define HW_IOMUXC_IOMUXC_GPR5_WR(v)     (HW_IOMUXC_IOMUXC_GPR5.U = (v))
#define HW_IOMUXC_IOMUXC_GPR5_SET(v)    (HW_IOMUXC_IOMUXC_GPR5_WR(HW_IOMUXC_IOMUXC_GPR5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR5_CLR(v)    (HW_IOMUXC_IOMUXC_GPR5_WR(HW_IOMUXC_IOMUXC_GPR5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR5_TOG(v)    (HW_IOMUXC_IOMUXC_GPR5_WR(HW_IOMUXC_IOMUXC_GPR5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR5, field ARM_WFI[1:0] (RO)
 *
 * ARM WFI event out indicating on WFI state of the cores (these are status, read only bits)
 *
 * Values:
 * 0 - TBD
 * 1 - TBD
 */

#define BP_IOMUXC_IOMUXC_GPR5_ARM_WFI      (0)
#define BM_IOMUXC_IOMUXC_GPR5_ARM_WFI      (0x00000003)


/* --- Register HW_IOMUXC_IOMUXC_GPR5, field ARM_WFE[5:4] (RO)
 *
 * ARM WFE event out indication on WFE state of the cores (these are status, read only bits)
 *
 * Values:
 * 0 - TBD
 * 1 - TBD
 */

#define BP_IOMUXC_IOMUXC_GPR5_ARM_WFE      (4)
#define BM_IOMUXC_IOMUXC_GPR5_ARM_WFE      (0x00000030)


/* --- Register HW_IOMUXC_IOMUXC_GPR5, field L2_CLK_STOP[8:8] (RO)
 *
 * L2 cache clock stop indication (this is a status, read only bit]
 *
 * Values:
 * 0 - L2 cache clock is running
 * 1 - L2 cache clock stopped
 */

#define BP_IOMUXC_IOMUXC_GPR5_L2_CLK_STOP      (8)
#define BM_IOMUXC_IOMUXC_GPR5_L2_CLK_STOP      (0x00000100)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR6 - GPR6 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned IPU1_WR_QOS : 16; //!< IPU-1 WR QoS gasket config
        unsigned IPU1_RD_QOS : 16; //!< IPU-1 RD QoS gasket config
    } B;
} hw_iomuxc_iomuxc_gpr6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR6 register
 */
#define HW_IOMUXC_IOMUXC_GPR6_ADDR      (REGS_IOMUXC_BASE + 0x18)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR6           (*(volatile hw_iomuxc_iomuxc_gpr6_t *) HW_IOMUXC_IOMUXC_GPR6_ADDR)
#define HW_IOMUXC_IOMUXC_GPR6_RD()      (HW_IOMUXC_IOMUXC_GPR6.U)
#define HW_IOMUXC_IOMUXC_GPR6_WR(v)     (HW_IOMUXC_IOMUXC_GPR6.U = (v))
#define HW_IOMUXC_IOMUXC_GPR6_SET(v)    (HW_IOMUXC_IOMUXC_GPR6_WR(HW_IOMUXC_IOMUXC_GPR6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR6_CLR(v)    (HW_IOMUXC_IOMUXC_GPR6_WR(HW_IOMUXC_IOMUXC_GPR6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR6_TOG(v)    (HW_IOMUXC_IOMUXC_GPR6_WR(HW_IOMUXC_IOMUXC_GPR6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR6, field IPU1_WR_QOS[15:0] (RW)
 *
 * IPU-1 WR QoS gasket config
 *
 * Values:
 * 0 - TBD
 * 1 - TBD
 */

#define BP_IOMUXC_IOMUXC_GPR6_IPU1_WR_QOS      (0)
#define BM_IOMUXC_IOMUXC_GPR6_IPU1_WR_QOS      (0x0000ffff)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR6_IPU1_WR_QOS(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_GPR6_IPU1_WR_QOS)
#else
#define BF_IOMUXC_IOMUXC_GPR6_IPU1_WR_QOS(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_GPR6_IPU1_WR_QOS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the IPU1_WR_QOS field to a new value.
#define BW_IOMUXC_IOMUXC_GPR6_IPU1_WR_QOS(v)   BF_CS1(IOMUXC_IOMUXC_GPR6, IPU1_WR_QOS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR6, field IPU1_RD_QOS[31:16] (RW)
 *
 * IPU-1 RD QoS gasket config
 *
 * Values:
 * 0 - TBD
 * 1 - TBD
 */

#define BP_IOMUXC_IOMUXC_GPR6_IPU1_RD_QOS      (16)
#define BM_IOMUXC_IOMUXC_GPR6_IPU1_RD_QOS      (0xffff0000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR6_IPU1_RD_QOS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_GPR6_IPU1_RD_QOS)
#else
#define BF_IOMUXC_IOMUXC_GPR6_IPU1_RD_QOS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_GPR6_IPU1_RD_QOS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the IPU1_RD_QOS field to a new value.
#define BW_IOMUXC_IOMUXC_GPR6_IPU1_RD_QOS(v)   BF_CS1(IOMUXC_IOMUXC_GPR6, IPU1_RD_QOS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR7 - GPR7 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 32; //!< 
    } B;
} hw_iomuxc_iomuxc_gpr7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR7 register
 */
#define HW_IOMUXC_IOMUXC_GPR7_ADDR      (REGS_IOMUXC_BASE + 0x1c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR7           (*(volatile hw_iomuxc_iomuxc_gpr7_t *) HW_IOMUXC_IOMUXC_GPR7_ADDR)
#define HW_IOMUXC_IOMUXC_GPR7_RD()      (HW_IOMUXC_IOMUXC_GPR7.U)
#define HW_IOMUXC_IOMUXC_GPR7_WR(v)     (HW_IOMUXC_IOMUXC_GPR7.U = (v))
#define HW_IOMUXC_IOMUXC_GPR7_SET(v)    (HW_IOMUXC_IOMUXC_GPR7_WR(HW_IOMUXC_IOMUXC_GPR7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR7_CLR(v)    (HW_IOMUXC_IOMUXC_GPR7_WR(HW_IOMUXC_IOMUXC_GPR7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR7_TOG(v)    (HW_IOMUXC_IOMUXC_GPR7_WR(HW_IOMUXC_IOMUXC_GPR7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR7 bitfields
 */

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR8 - GPR8 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned PCIE_TX_DEEM_1 : 6; //!< PCIe_TX_DEEM_1
        unsigned PCIE_TX_DEEM_2 : 6; //!< PCIe_TX_DEEM_2
        unsigned PCIE_TX_DEEM_3 : 6; //!< PCIe_TX_DEEM_3
        unsigned PCIE_TX_SWING_FULL : 7; //!< PCIe_TX_SWING_FULL
        unsigned PCIE_TX_SWING_LOW : 7; //!< PCIe_TX_SWING_LOW
    } B;
} hw_iomuxc_iomuxc_gpr8_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR8 register
 */
#define HW_IOMUXC_IOMUXC_GPR8_ADDR      (REGS_IOMUXC_BASE + 0x20)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR8           (*(volatile hw_iomuxc_iomuxc_gpr8_t *) HW_IOMUXC_IOMUXC_GPR8_ADDR)
#define HW_IOMUXC_IOMUXC_GPR8_RD()      (HW_IOMUXC_IOMUXC_GPR8.U)
#define HW_IOMUXC_IOMUXC_GPR8_WR(v)     (HW_IOMUXC_IOMUXC_GPR8.U = (v))
#define HW_IOMUXC_IOMUXC_GPR8_SET(v)    (HW_IOMUXC_IOMUXC_GPR8_WR(HW_IOMUXC_IOMUXC_GPR8_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR8_CLR(v)    (HW_IOMUXC_IOMUXC_GPR8_WR(HW_IOMUXC_IOMUXC_GPR8_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR8_TOG(v)    (HW_IOMUXC_IOMUXC_GPR8_WR(HW_IOMUXC_IOMUXC_GPR8_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR8 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR8, field PCIE_TX_DEEM_1[5:0] (RW)
 *
 * PCIe_TX_DEEM_1
 *
 * Values:
 * 0 - TBD
 * 1 - TBD
 */

#define BP_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_1      (0)
#define BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_1      (0x0000003f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_1(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_1)
#else
#define BF_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_1(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_1)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_TX_DEEM_1 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_1(v)   BF_CS1(IOMUXC_IOMUXC_GPR8, PCIE_TX_DEEM_1, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR8, field PCIE_TX_DEEM_2[11:6] (RW)
 *
 * PCIe_TX_DEEM_2
 *
 * Values:
 * 0 - TBD
 * 1 - TBD
 */

#define BP_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_2      (6)
#define BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_2      (0x00000fc0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_2(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_2)
#else
#define BF_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_2(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_2)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_TX_DEEM_2 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_2(v)   BF_CS1(IOMUXC_IOMUXC_GPR8, PCIE_TX_DEEM_2, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR8, field PCIE_TX_DEEM_3[17:12] (RW)
 *
 * PCIe_TX_DEEM_3
 *
 * Values:
 * 0 - TBD
 * 1 - TBD
 */

#define BP_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_3      (12)
#define BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_3      (0x0003f000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_3(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_3)
#else
#define BF_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_3(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_3)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_TX_DEEM_3 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR8_PCIE_TX_DEEM_3(v)   BF_CS1(IOMUXC_IOMUXC_GPR8, PCIE_TX_DEEM_3, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR8, field PCIE_TX_SWING_FULL[24:18] (RW)
 *
 * PCIe_TX_SWING_FULL
 *
 * Values:
 * 0 - TBD
 * 1 - TBD
 */

#define BP_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_FULL      (18)
#define BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_FULL      (0x01fc0000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_FULL(v)   ((((reg32_t) v) << 18) & BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_FULL)
#else
#define BF_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_FULL(v)   (((v) << 18) & BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_FULL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_TX_SWING_FULL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_FULL(v)   BF_CS1(IOMUXC_IOMUXC_GPR8, PCIE_TX_SWING_FULL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR8, field PCIE_TX_SWING_LOW[31:25] (RW)
 *
 * PCIe_TX_SWING_LOW
 *
 * Values:
 * 0 - TBD
 * 1 - TBD
 */

#define BP_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_LOW      (25)
#define BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_LOW      (0xfe000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_LOW(v)   ((((reg32_t) v) << 25) & BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_LOW)
#else
#define BF_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_LOW(v)   (((v) << 25) & BM_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_LOW)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_TX_SWING_LOW field to a new value.
#define BW_IOMUXC_IOMUXC_GPR8_PCIE_TX_SWING_LOW(v)   BF_CS1(IOMUXC_IOMUXC_GPR8, PCIE_TX_SWING_LOW, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR9 - GPR9 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned TZASC1_BYP : 1; //!< TZASC-1 BYPASS MUX control
        unsigned TZASC2_BYP : 1; //!< TZASC-2 BYPASS MUX control
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_gpr9_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR9 register
 */
#define HW_IOMUXC_IOMUXC_GPR9_ADDR      (REGS_IOMUXC_BASE + 0x24)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR9           (*(volatile hw_iomuxc_iomuxc_gpr9_t *) HW_IOMUXC_IOMUXC_GPR9_ADDR)
#define HW_IOMUXC_IOMUXC_GPR9_RD()      (HW_IOMUXC_IOMUXC_GPR9.U)
#define HW_IOMUXC_IOMUXC_GPR9_WR(v)     (HW_IOMUXC_IOMUXC_GPR9.U = (v))
#define HW_IOMUXC_IOMUXC_GPR9_SET(v)    (HW_IOMUXC_IOMUXC_GPR9_WR(HW_IOMUXC_IOMUXC_GPR9_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR9_CLR(v)    (HW_IOMUXC_IOMUXC_GPR9_WR(HW_IOMUXC_IOMUXC_GPR9_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR9_TOG(v)    (HW_IOMUXC_IOMUXC_GPR9_WR(HW_IOMUXC_IOMUXC_GPR9_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR9 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR9, field TZASC1_BYP[0:0] (RO)
 *
 * TZASC-1 BYPASS MUX control
 *
 * Values:
 * 0 - The TZASC-1 is bypassed and the transactions to DDR are not being checked.
 * 1 - The TZASC-1 is not bypassed and the transactions to DDR are being monitored / checked.
 */

#define BP_IOMUXC_IOMUXC_GPR9_TZASC1_BYP      (0)
#define BM_IOMUXC_IOMUXC_GPR9_TZASC1_BYP      (0x00000001)


/* --- Register HW_IOMUXC_IOMUXC_GPR9, field TZASC2_BYP[1:1] (RO)
 *
 * TZASC-2 BYPASS MUX control
 *
 * Values:
 * 0 - The TZASC-2 is bypassed and the transactions to DDR are not being checked.
 * 1 - The TZASC-2 is not bypassed and the transactions to DDR are being monitored / checked.
 */

#define BP_IOMUXC_IOMUXC_GPR9_TZASC2_BYP      (1)
#define BM_IOMUXC_IOMUXC_GPR9_TZASC2_BYP      (0x00000002)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR10 - GPR10 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DCIC1_MUX_CTL : 2; //!< DCIC-1 MUX control
        unsigned DCIC2_MUX_CTL : 2; //!< DCIC-2 MUX control
        unsigned OCRAM_TZ_EN : 1; //!< OCRAM TrustZone (TZ) enable.
        unsigned OCRAM_TZ_ADDR : 5; //!< OCRAM TrustZone (TZ) start address. This is the start address of the secure memory region within the OCRAM memory space is 4KB granularity. The start address affects the OCRAM transactions only if OCRAM_TZ_EN bit is set. The OCRAM TZ ENDADDR is not configurable and is set to the end of OCRAM memory space.
        unsigned RESERVED0 : 1; //!< 
        unsigned SEC_ERR_RESP : 1; //!< Security error response enable for all security gaskets (on both AHB and AXI busses)
        unsigned DBG_CLK_EN : 1; //!< ARM Debug clock enable
        unsigned DBG_EN : 1; //!< ARM non secure (non-invasive) debug enable
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned LOCK_DCIC1_MUX_CTL : 2; //!< Lock DCIC1_MUX_CTL field for changes. This is a sticky field, once set it can't be cleared (only by reset).
        unsigned LOCK_DCIC2_MUX_CTL : 2; //!< Lock DCIC2_MUX_CTL field for changes. This is a sticky field, once set it can't be cleared (only by reset).
        unsigned LOCK_OCRAM_TZ_EN : 1; //!< Lock OCRAM_TZ_EN field for changes. This is a sticky field, once set it can't be cleared (only by reset).
        unsigned LOCK_OCRAM_TZ_ADDR : 5; //!< Lock OCRAM_TZ_ADDR field for changes. This is a sticky field, once set it can't be cleared (only by reset).
        unsigned RESERVED2 : 1; //!< 
        unsigned LOCK_SEC_ERR_RESP : 1; //!< Lock SEC_ERR_RESP field for changes. This is a sticky field, once set it can't be cleared (only by reset).
        unsigned LOCK_DBG_CLK_EN : 1; //!< Lock DBG_CLK_EN field for changes. This is a sticky field, once set it can't be cleared (only by reset).
        unsigned LOCK_DBG_EN : 1; //!< Lock DBG_EN field for changes. This is a sticky field, once set it can't be cleared (only by reset).
        unsigned RESERVED3 : 2; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_gpr10_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR10 register
 */
#define HW_IOMUXC_IOMUXC_GPR10_ADDR      (REGS_IOMUXC_BASE + 0x28)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR10           (*(volatile hw_iomuxc_iomuxc_gpr10_t *) HW_IOMUXC_IOMUXC_GPR10_ADDR)
#define HW_IOMUXC_IOMUXC_GPR10_RD()      (HW_IOMUXC_IOMUXC_GPR10.U)
#define HW_IOMUXC_IOMUXC_GPR10_WR(v)     (HW_IOMUXC_IOMUXC_GPR10.U = (v))
#define HW_IOMUXC_IOMUXC_GPR10_SET(v)    (HW_IOMUXC_IOMUXC_GPR10_WR(HW_IOMUXC_IOMUXC_GPR10_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR10_CLR(v)    (HW_IOMUXC_IOMUXC_GPR10_WR(HW_IOMUXC_IOMUXC_GPR10_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR10_TOG(v)    (HW_IOMUXC_IOMUXC_GPR10_WR(HW_IOMUXC_IOMUXC_GPR10_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR10 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR10, field DCIC1_MUX_CTL[1:0] (RW)
 *
 * DCIC-1 MUX control
 *
 * Values:
 * 00 - DCIC-1 source is IPU1 DI0 port
 * 01 - DCIC-1 source is IPU1 DI1 port
 * 10 - DCIC-1 source is IPU2 DI0 port
 * 11 - DCIC-1 source is IPU2 DI1 port
 */

#define BP_IOMUXC_IOMUXC_GPR10_DCIC1_MUX_CTL      (0)
#define BM_IOMUXC_IOMUXC_GPR10_DCIC1_MUX_CTL      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_DCIC1_MUX_CTL(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_GPR10_DCIC1_MUX_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR10_DCIC1_MUX_CTL(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_GPR10_DCIC1_MUX_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DCIC1_MUX_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_DCIC1_MUX_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, DCIC1_MUX_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field DCIC2_MUX_CTL[3:2] (RW)
 *
 * DCIC-2 MUX control
 *
 * Values:
 * 00 - DCIC-2 source is IPU1 DI0 port
 * 01 - DCIC-2 source is IPU1 DI1 port
 * 10 - DCIC-2 source is IPU2 DI0 port
 * 11 - DCIC-2 source is IPU2 DI1 port
 */

#define BP_IOMUXC_IOMUXC_GPR10_DCIC2_MUX_CTL      (2)
#define BM_IOMUXC_IOMUXC_GPR10_DCIC2_MUX_CTL      (0x0000000c)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_DCIC2_MUX_CTL(v)   ((((reg32_t) v) << 2) & BM_IOMUXC_IOMUXC_GPR10_DCIC2_MUX_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR10_DCIC2_MUX_CTL(v)   (((v) << 2) & BM_IOMUXC_IOMUXC_GPR10_DCIC2_MUX_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DCIC2_MUX_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_DCIC2_MUX_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, DCIC2_MUX_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field OCRAM_TZ_EN[4:4] (RW)
 *
 * OCRAM TrustZone (TZ) enable.
 *
 * Values:
 * 0 - The TrustZone feature is disabled. Entire OCRAM space is available for all access types (secure/non-
 *     secure/user/supervisor).
 * 1 - The TrustZone feature is enabled. Access to address in the range specified by [ENDADDR:STARTADDR]
 *     follows the execution mode access policy described in CSU chapter.
 */

#define BP_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_EN      (4)
#define BM_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_EN      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_EN(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_EN(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the OCRAM_TZ_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, OCRAM_TZ_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field OCRAM_TZ_ADDR[9:5] (RW)
 *
 * OCRAM TrustZone (TZ) start address. This is the start address of the secure memory region within
 * the OCRAM memory space is 4KB granularity. The start address affects the OCRAM transactions only
 * if OCRAM_TZ_EN bit is set. The OCRAM TZ ENDADDR is not configurable and is set to the end of
 * OCRAM memory space.
 */

#define BP_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_ADDR      (5)
#define BM_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_ADDR      (0x000003e0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_ADDR(v)   ((((reg32_t) v) << 5) & BM_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_ADDR)
#else
#define BF_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_ADDR(v)   (((v) << 5) & BM_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_ADDR)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the OCRAM_TZ_ADDR field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_OCRAM_TZ_ADDR(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, OCRAM_TZ_ADDR, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR10, field SEC_ERR_RESP[11:11] (RW)
 *
 * Security error response enable for all security gaskets (on both AHB and AXI busses)
 *
 * Values:
 * 0 - OKEY response
 * 1 - SLVError (default)
 */

#define BP_IOMUXC_IOMUXC_GPR10_SEC_ERR_RESP      (11)
#define BM_IOMUXC_IOMUXC_GPR10_SEC_ERR_RESP      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_SEC_ERR_RESP(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_GPR10_SEC_ERR_RESP)
#else
#define BF_IOMUXC_IOMUXC_GPR10_SEC_ERR_RESP(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_GPR10_SEC_ERR_RESP)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SEC_ERR_RESP field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_SEC_ERR_RESP(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, SEC_ERR_RESP, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field DBG_CLK_EN[12:12] (RW)
 *
 * ARM Debug clock enable
 *
 * Values:
 * 0 - Debug turned off.
 * 1 - Debug enabled (default).
 */

#define BP_IOMUXC_IOMUXC_GPR10_DBG_CLK_EN      (12)
#define BM_IOMUXC_IOMUXC_GPR10_DBG_CLK_EN      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_DBG_CLK_EN(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_GPR10_DBG_CLK_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR10_DBG_CLK_EN(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_GPR10_DBG_CLK_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DBG_CLK_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_DBG_CLK_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, DBG_CLK_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field DBG_EN[13:13] (RW)
 *
 * ARM non secure (non-invasive) debug enable
 *
 * Values:
 * 0 - Debug turned off.
 * 1 - Debug enabled (default).
 */

#define BP_IOMUXC_IOMUXC_GPR10_DBG_EN      (13)
#define BM_IOMUXC_IOMUXC_GPR10_DBG_EN      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_DBG_EN(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_GPR10_DBG_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR10_DBG_EN(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_GPR10_DBG_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DBG_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_DBG_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, DBG_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field LOCK_DCIC1_MUX_CTL[17:16] (RW)
 *
 * Lock DCIC1_MUX_CTL field for changes. This is a sticky field, once set it can't be cleared (only
 * by reset).
 *
 * Values:
 * 0 - Field is not locked
 * 1 - Field is locked (read access only)
 */

#define BP_IOMUXC_IOMUXC_GPR10_LOCK_DCIC1_MUX_CTL      (16)
#define BM_IOMUXC_IOMUXC_GPR10_LOCK_DCIC1_MUX_CTL      (0x00030000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_DCIC1_MUX_CTL(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_GPR10_LOCK_DCIC1_MUX_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_DCIC1_MUX_CTL(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_GPR10_LOCK_DCIC1_MUX_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_DCIC1_MUX_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_LOCK_DCIC1_MUX_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, LOCK_DCIC1_MUX_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field LOCK_DCIC2_MUX_CTL[19:18] (RW)
 *
 * Lock DCIC2_MUX_CTL field for changes. This is a sticky field, once set it can't be cleared (only
 * by reset).
 *
 * Values:
 * 0 - Field is not locked
 * 1 - Field is locked (read access only)
 */

#define BP_IOMUXC_IOMUXC_GPR10_LOCK_DCIC2_MUX_CTL      (18)
#define BM_IOMUXC_IOMUXC_GPR10_LOCK_DCIC2_MUX_CTL      (0x000c0000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_DCIC2_MUX_CTL(v)   ((((reg32_t) v) << 18) & BM_IOMUXC_IOMUXC_GPR10_LOCK_DCIC2_MUX_CTL)
#else
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_DCIC2_MUX_CTL(v)   (((v) << 18) & BM_IOMUXC_IOMUXC_GPR10_LOCK_DCIC2_MUX_CTL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_DCIC2_MUX_CTL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_LOCK_DCIC2_MUX_CTL(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, LOCK_DCIC2_MUX_CTL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field LOCK_OCRAM_TZ_EN[20:20] (RW)
 *
 * Lock OCRAM_TZ_EN field for changes. This is a sticky field, once set it can't be cleared (only by
 * reset).
 *
 * Values:
 * 0 - Field is not locked
 * 1 - Field is locked (read access only)
 */

#define BP_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_EN      (20)
#define BM_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_EN      (0x00100000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_EN(v)   ((((reg32_t) v) << 20) & BM_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_EN(v)   (((v) << 20) & BM_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_OCRAM_TZ_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, LOCK_OCRAM_TZ_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field LOCK_OCRAM_TZ_ADDR[25:21] (RW)
 *
 * Lock OCRAM_TZ_ADDR field for changes. This is a sticky field, once set it can't be cleared (only
 * by reset).
 *
 * Values:
 * 0 - Field is not locked
 * 1 - Field is locked (read access only)
 */

#define BP_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_ADDR      (21)
#define BM_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_ADDR      (0x03e00000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_ADDR(v)   ((((reg32_t) v) << 21) & BM_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_ADDR)
#else
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_ADDR(v)   (((v) << 21) & BM_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_ADDR)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_OCRAM_TZ_ADDR field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_LOCK_OCRAM_TZ_ADDR(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, LOCK_OCRAM_TZ_ADDR, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field LOCK_SEC_ERR_RESP[27:27] (RW)
 *
 * Lock SEC_ERR_RESP field for changes. This is a sticky field, once set it can't be cleared (only
 * by reset).
 *
 * Values:
 * 0 - Field is not locked
 * 1 - Field is locked (read access only)
 */

#define BP_IOMUXC_IOMUXC_GPR10_LOCK_SEC_ERR_RESP      (27)
#define BM_IOMUXC_IOMUXC_GPR10_LOCK_SEC_ERR_RESP      (0x08000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_SEC_ERR_RESP(v)   ((((reg32_t) v) << 27) & BM_IOMUXC_IOMUXC_GPR10_LOCK_SEC_ERR_RESP)
#else
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_SEC_ERR_RESP(v)   (((v) << 27) & BM_IOMUXC_IOMUXC_GPR10_LOCK_SEC_ERR_RESP)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_SEC_ERR_RESP field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_LOCK_SEC_ERR_RESP(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, LOCK_SEC_ERR_RESP, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field LOCK_DBG_CLK_EN[28:28] (RW)
 *
 * Lock DBG_CLK_EN field for changes. This is a sticky field, once set it can't be cleared (only by
 * reset).
 *
 * Values:
 * 0 - Field is not locked
 * 1 - Field is locked (read access only)
 */

#define BP_IOMUXC_IOMUXC_GPR10_LOCK_DBG_CLK_EN      (28)
#define BM_IOMUXC_IOMUXC_GPR10_LOCK_DBG_CLK_EN      (0x10000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_DBG_CLK_EN(v)   ((((reg32_t) v) << 28) & BM_IOMUXC_IOMUXC_GPR10_LOCK_DBG_CLK_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_DBG_CLK_EN(v)   (((v) << 28) & BM_IOMUXC_IOMUXC_GPR10_LOCK_DBG_CLK_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_DBG_CLK_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_LOCK_DBG_CLK_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, LOCK_DBG_CLK_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR10, field LOCK_DBG_EN[29:29] (RW)
 *
 * Lock DBG_EN field for changes. This is a sticky field, once set it can't be cleared (only by
 * reset).
 *
 * Values:
 * 0 - Field is not locked
 * 1 - Field is locked (read access only)
 */

#define BP_IOMUXC_IOMUXC_GPR10_LOCK_DBG_EN      (29)
#define BM_IOMUXC_IOMUXC_GPR10_LOCK_DBG_EN      (0x20000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_DBG_EN(v)   ((((reg32_t) v) << 29) & BM_IOMUXC_IOMUXC_GPR10_LOCK_DBG_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR10_LOCK_DBG_EN(v)   (((v) << 29) & BM_IOMUXC_IOMUXC_GPR10_LOCK_DBG_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_DBG_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR10_LOCK_DBG_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR10, LOCK_DBG_EN, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR11 - GPR11 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned RESERVED1 : 15; //!< Reserved
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned RESERVED3 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_gpr11_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR11 register
 */
#define HW_IOMUXC_IOMUXC_GPR11_ADDR      (REGS_IOMUXC_BASE + 0x2c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR11           (*(volatile hw_iomuxc_iomuxc_gpr11_t *) HW_IOMUXC_IOMUXC_GPR11_ADDR)
#define HW_IOMUXC_IOMUXC_GPR11_RD()      (HW_IOMUXC_IOMUXC_GPR11.U)
#define HW_IOMUXC_IOMUXC_GPR11_WR(v)     (HW_IOMUXC_IOMUXC_GPR11.U = (v))
#define HW_IOMUXC_IOMUXC_GPR11_SET(v)    (HW_IOMUXC_IOMUXC_GPR11_WR(HW_IOMUXC_IOMUXC_GPR11_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR11_CLR(v)    (HW_IOMUXC_IOMUXC_GPR11_WR(HW_IOMUXC_IOMUXC_GPR11_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR11_TOG(v)    (HW_IOMUXC_IOMUXC_GPR11_WR(HW_IOMUXC_IOMUXC_GPR11_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR11 bitfields
 */

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR12 - GPR12 (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned USDHC_DBG_MUX : 2; //!< uSDHC debug mux control TBD
        unsigned PCIE_PHY : 5; //!< PCIe_PHY TBD
        unsigned PCIE_CTL_1 : 1; //!< PCIe control TBD
        unsigned PCIE_CTL_2 : 1; //!< PCIe control - application signal to enable the LTSSM
        unsigned PCIE_CTL_3 : 1; //!< PCIe control, N/A for end point, used by downstream port of a switch TBD
        unsigned PCIE_CTL_4 : 4; //!< PCIe selects mode of operation, EP or RC TBD
        unsigned PCIE_CTL_5 : 1; //!< PCIe control in RC mode only. Generates PM turnoff message for power management TBD
        unsigned PCIE_CTL_6 : 4; //!< PCIe control of diag_bus (diag_ctrl_bus) TBD
        unsigned PCIE_CTL_7 : 3; //!< PCIe control of diagnostic bus select TBD
        unsigned ARMP_APB_CLK_EN : 1; //!< ARM platform APB clock enable
        unsigned ARMP_ATB_CLK_EN : 1; //!< ARM platform ATB clock enable
        unsigned ARMP_AHB_CLK_EN : 1; //!< ARM platform AHB clock enable
        unsigned ARMP_IPG_CLK_EN : 1; //!< ARM platform IPG clock enable
        unsigned RESERVED1 : 4; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_gpr12_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR12 register
 */
#define HW_IOMUXC_IOMUXC_GPR12_ADDR      (REGS_IOMUXC_BASE + 0x30)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR12           (*(volatile hw_iomuxc_iomuxc_gpr12_t *) HW_IOMUXC_IOMUXC_GPR12_ADDR)
#define HW_IOMUXC_IOMUXC_GPR12_RD()      (HW_IOMUXC_IOMUXC_GPR12.U)
#define HW_IOMUXC_IOMUXC_GPR12_WR(v)     (HW_IOMUXC_IOMUXC_GPR12.U = (v))
#define HW_IOMUXC_IOMUXC_GPR12_SET(v)    (HW_IOMUXC_IOMUXC_GPR12_WR(HW_IOMUXC_IOMUXC_GPR12_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR12_CLR(v)    (HW_IOMUXC_IOMUXC_GPR12_WR(HW_IOMUXC_IOMUXC_GPR12_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR12_TOG(v)    (HW_IOMUXC_IOMUXC_GPR12_WR(HW_IOMUXC_IOMUXC_GPR12_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR12 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR12, field USDHC_DBG_MUX[3:2] (RW)
 *
 * uSDHC debug mux control TBD
 */

#define BP_IOMUXC_IOMUXC_GPR12_USDHC_DBG_MUX      (2)
#define BM_IOMUXC_IOMUXC_GPR12_USDHC_DBG_MUX      (0x0000000c)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_USDHC_DBG_MUX(v)   ((((reg32_t) v) << 2) & BM_IOMUXC_IOMUXC_GPR12_USDHC_DBG_MUX)
#else
#define BF_IOMUXC_IOMUXC_GPR12_USDHC_DBG_MUX(v)   (((v) << 2) & BM_IOMUXC_IOMUXC_GPR12_USDHC_DBG_MUX)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the USDHC_DBG_MUX field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_USDHC_DBG_MUX(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, USDHC_DBG_MUX, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR12, field PCIE_PHY[8:4] (RW)
 *
 * PCIe_PHY TBD
 */

#define BP_IOMUXC_IOMUXC_GPR12_PCIE_PHY      (4)
#define BM_IOMUXC_IOMUXC_GPR12_PCIE_PHY      (0x000001f0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_PHY(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_GPR12_PCIE_PHY)
#else
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_PHY(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_GPR12_PCIE_PHY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_PHY field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_PCIE_PHY(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, PCIE_PHY, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR12, field PCIE_CTL_1[9:9] (RW)
 *
 * PCIe control TBD
 */

#define BP_IOMUXC_IOMUXC_GPR12_PCIE_CTL_1      (9)
#define BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_1      (0x00000200)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_1(v)   ((((reg32_t) v) << 9) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_1)
#else
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_1(v)   (((v) << 9) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_1)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_CTL_1 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_PCIE_CTL_1(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, PCIE_CTL_1, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR12, field PCIE_CTL_2[10:10] (RW)
 *
 * PCIe control - application signal to enable the LTSSM
 *
 * Values:
 * 0 - Application is not ready.
 * 1 - Application is not ready.
 */

#define BP_IOMUXC_IOMUXC_GPR12_PCIE_CTL_2      (10)
#define BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_2      (0x00000400)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_2(v)   ((((reg32_t) v) << 10) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_2)
#else
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_2(v)   (((v) << 10) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_2)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_CTL_2 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_PCIE_CTL_2(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, PCIE_CTL_2, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR12, field PCIE_CTL_3[11:11] (RW)
 *
 * PCIe control, N/A for end point, used by downstream port of a switch TBD
 */

#define BP_IOMUXC_IOMUXC_GPR12_PCIE_CTL_3      (11)
#define BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_3      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_3(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_3)
#else
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_3(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_3)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_CTL_3 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_PCIE_CTL_3(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, PCIE_CTL_3, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR12, field PCIE_CTL_4[15:12] (RW)
 *
 * PCIe selects mode of operation, EP or RC TBD
 */

#define BP_IOMUXC_IOMUXC_GPR12_PCIE_CTL_4      (12)
#define BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_4      (0x0000f000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_4(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_4)
#else
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_4(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_4)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_CTL_4 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_PCIE_CTL_4(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, PCIE_CTL_4, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR12, field PCIE_CTL_5[16:16] (RW)
 *
 * PCIe control in RC mode only. Generates PM turnoff message for power management TBD
 */

#define BP_IOMUXC_IOMUXC_GPR12_PCIE_CTL_5      (16)
#define BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_5      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_5(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_5)
#else
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_5(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_5)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_CTL_5 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_PCIE_CTL_5(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, PCIE_CTL_5, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR12, field PCIE_CTL_6[20:17] (RW)
 *
 * PCIe control of diag_bus (diag_ctrl_bus) TBD
 */

#define BP_IOMUXC_IOMUXC_GPR12_PCIE_CTL_6      (17)
#define BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_6      (0x001e0000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_6(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_6)
#else
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_6(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_6)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_CTL_6 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_PCIE_CTL_6(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, PCIE_CTL_6, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR12, field PCIE_CTL_7[23:21] (RW)
 *
 * PCIe control of diagnostic bus select TBD
 */

#define BP_IOMUXC_IOMUXC_GPR12_PCIE_CTL_7      (21)
#define BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_7      (0x00e00000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_7(v)   ((((reg32_t) v) << 21) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_7)
#else
#define BF_IOMUXC_IOMUXC_GPR12_PCIE_CTL_7(v)   (((v) << 21) & BM_IOMUXC_IOMUXC_GPR12_PCIE_CTL_7)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PCIE_CTL_7 field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_PCIE_CTL_7(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, PCIE_CTL_7, v)
#endif

/* --- Register HW_IOMUXC_IOMUXC_GPR12, field ARMP_APB_CLK_EN[24:24] (RW)
 *
 * ARM platform APB clock enable
 *
 * Values:
 * 0 - IPG clock is not running (gated).
 * 1 - IPG clock is running (enabled).
 */

#define BP_IOMUXC_IOMUXC_GPR12_ARMP_APB_CLK_EN      (24)
#define BM_IOMUXC_IOMUXC_GPR12_ARMP_APB_CLK_EN      (0x01000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_ARMP_APB_CLK_EN(v)   ((((reg32_t) v) << 24) & BM_IOMUXC_IOMUXC_GPR12_ARMP_APB_CLK_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR12_ARMP_APB_CLK_EN(v)   (((v) << 24) & BM_IOMUXC_IOMUXC_GPR12_ARMP_APB_CLK_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ARMP_APB_CLK_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_ARMP_APB_CLK_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, ARMP_APB_CLK_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR12, field ARMP_ATB_CLK_EN[25:25] (RW)
 *
 * ARM platform ATB clock enable
 *
 * Values:
 * 0 - IPG clock is not running (gated).
 * 1 - IPG clock is running (enabled).
 */

#define BP_IOMUXC_IOMUXC_GPR12_ARMP_ATB_CLK_EN      (25)
#define BM_IOMUXC_IOMUXC_GPR12_ARMP_ATB_CLK_EN      (0x02000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_ARMP_ATB_CLK_EN(v)   ((((reg32_t) v) << 25) & BM_IOMUXC_IOMUXC_GPR12_ARMP_ATB_CLK_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR12_ARMP_ATB_CLK_EN(v)   (((v) << 25) & BM_IOMUXC_IOMUXC_GPR12_ARMP_ATB_CLK_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ARMP_ATB_CLK_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_ARMP_ATB_CLK_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, ARMP_ATB_CLK_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR12, field ARMP_AHB_CLK_EN[26:26] (RW)
 *
 * ARM platform AHB clock enable
 *
 * Values:
 * 0 - IPG clock is not running (gated).
 * 1 - IPG clock is running (enabled).
 */

#define BP_IOMUXC_IOMUXC_GPR12_ARMP_AHB_CLK_EN      (26)
#define BM_IOMUXC_IOMUXC_GPR12_ARMP_AHB_CLK_EN      (0x04000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_ARMP_AHB_CLK_EN(v)   ((((reg32_t) v) << 26) & BM_IOMUXC_IOMUXC_GPR12_ARMP_AHB_CLK_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR12_ARMP_AHB_CLK_EN(v)   (((v) << 26) & BM_IOMUXC_IOMUXC_GPR12_ARMP_AHB_CLK_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ARMP_AHB_CLK_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_ARMP_AHB_CLK_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, ARMP_AHB_CLK_EN, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR12, field ARMP_IPG_CLK_EN[27:27] (RW)
 *
 * ARM platform IPG clock enable
 *
 * Values:
 * 0 - IPG clock is not running (gated).
 * 1 - IPG clock is running (enabled).
 */

#define BP_IOMUXC_IOMUXC_GPR12_ARMP_IPG_CLK_EN      (27)
#define BM_IOMUXC_IOMUXC_GPR12_ARMP_IPG_CLK_EN      (0x08000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR12_ARMP_IPG_CLK_EN(v)   ((((reg32_t) v) << 27) & BM_IOMUXC_IOMUXC_GPR12_ARMP_IPG_CLK_EN)
#else
#define BF_IOMUXC_IOMUXC_GPR12_ARMP_IPG_CLK_EN(v)   (((v) << 27) & BM_IOMUXC_IOMUXC_GPR12_ARMP_IPG_CLK_EN)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ARMP_IPG_CLK_EN field to a new value.
#define BW_IOMUXC_IOMUXC_GPR12_ARMP_IPG_CLK_EN(v)   BF_CS1(IOMUXC_IOMUXC_GPR12, ARMP_IPG_CLK_EN, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_GPR13 - GPR13 (RW)
 *
 * SATA_PHY_6    PHUG    FRUG    fast_startup    Frequency Tolerance (ppm)      000    1    1
 * None    780      001    2    2    None    780      010    1    4    None    6,250      011    2
 * 4    None    6,250      1xx    Reserved
 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned IPU_CSI0_MUX : 3; //!< 
        unsigned IPU_CSI1_MUX : 3; //!< 
        unsigned RESERVED0 : 2; //!< 
        unsigned PXP_RD_CACHE_VAL : 1; //!< PXP block cacheable attribute value of AXI read transactions The value of PXP_RD_CACHE_VAL is affecting the transactions only if PXP_RD_CACHE_SEL is set.
        unsigned PXP_WR_CACHE_VAL : 1; //!< PXP block cacheable attribute value of AXI write transactions The value of PXP_WR_CACHE_VAL is affecting the transactions only if PXP_WR_CACHE_SEL is set.
        unsigned PXP_RD_CACHE_SEL : 1; //!< This bit selects the cacheable attribute of PXP AXI read transcations)
        unsigned PXP_WR_CACHE_SEL : 1; //!< This bit selects the cacheable attribute of PXP AXI write transcations
        unsigned EPDC_RD_CACHE_VAL : 1; //!< EPDC block cacheable attribute value of AXI read transactions The value of EPDC_RD_CACHE_VAL is affecting the transactions only if EPDC_RD_CACHE_SEL is set.
        unsigned EPDC_WR_CACHE_VAL : 1; //!< EPDC block cacheable attribute value of AXI write transactions The value of EPDC_WR_CACHE_VAL is affecting the transactions only if EPDC_WR_CACHE_SEL is set.
        unsigned EPDC_RD_CACHE_SEL : 1; //!< This bit selects the cacheable attribute of EPDC AXI read transcations)
        unsigned EPDC_WR_CACHE_SEL : 1; //!< This bit selects the cacheable attribute of EPDC AXI write transcations
        unsigned LCDIF_RD_CACHE_VAL : 1; //!< LCDIF block cacheable attribute value of AXI read transactions The value of LCDIF_RD_CACHE_VAL is affecting the transactions only if LCDIF_RD_CACHE_SEL is set.
        unsigned RESERVED1 : 1; //!< 
        unsigned LCDIF_RD_CACHE_SEL : 1; //!< This bit selects the cacheable attribute of LCDIF AXI read transcations)
        unsigned RESERVED2 : 8; //!< 
        unsigned ENET_STOP_REQ : 1; //!< ENET stop request
        unsigned CAN1_STOP_REQ : 1; //!< CAN1 stop request
        unsigned CAN2_STOP_REQ : 1; //!< CAN2 stop request
        unsigned SDMA_STOP_REQ : 1; //!< SDMA stop request
        unsigned RESERVED3 : 1; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_gpr13_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_GPR13 register
 */
#define HW_IOMUXC_IOMUXC_GPR13_ADDR      (REGS_IOMUXC_BASE + 0x34)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_GPR13           (*(volatile hw_iomuxc_iomuxc_gpr13_t *) HW_IOMUXC_IOMUXC_GPR13_ADDR)
#define HW_IOMUXC_IOMUXC_GPR13_RD()      (HW_IOMUXC_IOMUXC_GPR13.U)
#define HW_IOMUXC_IOMUXC_GPR13_WR(v)     (HW_IOMUXC_IOMUXC_GPR13.U = (v))
#define HW_IOMUXC_IOMUXC_GPR13_SET(v)    (HW_IOMUXC_IOMUXC_GPR13_WR(HW_IOMUXC_IOMUXC_GPR13_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_GPR13_CLR(v)    (HW_IOMUXC_IOMUXC_GPR13_WR(HW_IOMUXC_IOMUXC_GPR13_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_GPR13_TOG(v)    (HW_IOMUXC_IOMUXC_GPR13_WR(HW_IOMUXC_IOMUXC_GPR13_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_GPR13 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_GPR13, field IPU_CSI0_MUX[2:0] (RW)
 *

 *
 * Values:
 * 000 - MIPI_CSI0
 * 001 - MIPI_CSI1
 * 010 - MIPI_CSI2
 * 011 - MIPI_CSI3
 * 100 - IPU CSI0
 */

#define BP_IOMUXC_IOMUXC_GPR13_IPU_CSI0_MUX      (0)
#define BM_IOMUXC_IOMUXC_GPR13_IPU_CSI0_MUX      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_IPU_CSI0_MUX(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_GPR13_IPU_CSI0_MUX)
#else
#define BF_IOMUXC_IOMUXC_GPR13_IPU_CSI0_MUX(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_GPR13_IPU_CSI0_MUX)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the IPU_CSI0_MUX field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_IPU_CSI0_MUX(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, IPU_CSI0_MUX, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field IPU_CSI1_MUX[5:3] (RW)
 *

 *
 * Values:
 * 000 - MIPI CSI0
 * 001 - MIPI CSI1
 * 010 - MIPI CSI2
 * 011 - MIPI CSI3
 * 100 - IPU CSI1
 */

#define BP_IOMUXC_IOMUXC_GPR13_IPU_CSI1_MUX      (3)
#define BM_IOMUXC_IOMUXC_GPR13_IPU_CSI1_MUX      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_IPU_CSI1_MUX(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_GPR13_IPU_CSI1_MUX)
#else
#define BF_IOMUXC_IOMUXC_GPR13_IPU_CSI1_MUX(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_GPR13_IPU_CSI1_MUX)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the IPU_CSI1_MUX field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_IPU_CSI1_MUX(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, IPU_CSI1_MUX, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field PXP_RD_CACHE_VAL[8:8] (RW)
 *
 * PXP block cacheable attribute value of AXI read transactions The value of PXP_RD_CACHE_VAL is
 * affecting the transactions only if PXP_RD_CACHE_SEL is set.
 *
 * Values:
 * 0 - Cacheable attribute is off for read transactions.
 * 1 - Cacheable attribute is on for read transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_VAL      (8)
#define BM_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_VAL      (0x00000100)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_VAL(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_VAL(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PXP_RD_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, PXP_RD_CACHE_VAL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field PXP_WR_CACHE_VAL[9:9] (RW)
 *
 * PXP block cacheable attribute value of AXI write transactions The value of PXP_WR_CACHE_VAL is
 * affecting the transactions only if PXP_WR_CACHE_SEL is set.
 *
 * Values:
 * 0 - Cacheable attribute is off for write transactions.
 * 1 - Cacheable attribute is on for write transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_VAL      (9)
#define BM_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_VAL      (0x00000200)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_VAL(v)   ((((reg32_t) v) << 9) & BM_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_VAL(v)   (((v) << 9) & BM_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PXP_WR_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, PXP_WR_CACHE_VAL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field PXP_RD_CACHE_SEL[10:10] (RW)
 *
 * This bit selects the cacheable attribute of PXP AXI read transcations)
 *
 * Values:
 * 0 - The read transaction cacheable attribute is driven by the PXP core
 * 1 - The read transaction cacheable attribute is driven by PXP_RD_CACHE_VAL.
 */

#define BP_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_SEL      (10)
#define BM_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_SEL      (0x00000400)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_SEL(v)   ((((reg32_t) v) << 10) & BM_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_SEL(v)   (((v) << 10) & BM_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PXP_RD_CACHE_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_PXP_RD_CACHE_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, PXP_RD_CACHE_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field PXP_WR_CACHE_SEL[11:11] (RW)
 *
 * This bit selects the cacheable attribute of PXP AXI write transcations
 *
 * Values:
 * 0 - The write transactions cacheable attribute is driven by the PXP core
 * 1 - The write transactions cacheable attribute is driven by PXP_WR_CACHE_VAL.
 */

#define BP_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_SEL      (11)
#define BM_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_SEL      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_SEL(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_SEL(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PXP_WR_CACHE_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_PXP_WR_CACHE_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, PXP_WR_CACHE_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field EPDC_RD_CACHE_VAL[12:12] (RW)
 *
 * EPDC block cacheable attribute value of AXI read transactions The value of EPDC_RD_CACHE_VAL is
 * affecting the transactions only if EPDC_RD_CACHE_SEL is set.
 *
 * Values:
 * 0 - Cacheable attribute is off for read transactions.
 * 1 - Cacheable attribute is on for read transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_VAL      (12)
#define BM_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_VAL      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_VAL(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_VAL(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the EPDC_RD_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, EPDC_RD_CACHE_VAL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field EPDC_WR_CACHE_VAL[13:13] (RW)
 *
 * EPDC block cacheable attribute value of AXI write transactions The value of EPDC_WR_CACHE_VAL is
 * affecting the transactions only if EPDC_WR_CACHE_SEL is set.
 *
 * Values:
 * 0 - Cacheable attribute is off for write transactions.
 * 1 - Cacheable attribute is on for write transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_VAL      (13)
#define BM_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_VAL      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_VAL(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_VAL(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the EPDC_WR_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, EPDC_WR_CACHE_VAL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field EPDC_RD_CACHE_SEL[14:14] (RW)
 *
 * This bit selects the cacheable attribute of EPDC AXI read transcations)
 *
 * Values:
 * 0 - The read transaction cacheable attribute is driven by the EPDC core
 * 1 - The read transaction cacheable attribute is driven by EPDC_RD_CACHE_VAL.
 */

#define BP_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_SEL      (14)
#define BM_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_SEL      (0x00004000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_SEL(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_SEL(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the EPDC_RD_CACHE_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_EPDC_RD_CACHE_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, EPDC_RD_CACHE_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field EPDC_WR_CACHE_SEL[15:15] (RW)
 *
 * This bit selects the cacheable attribute of EPDC AXI write transcations
 *
 * Values:
 * 0 - The write transactions cacheable attribute is driven by the EPDC core
 * 1 - The write transactions cacheable attribute is driven by EPDC_WR_CACHE_VAL.
 */

#define BP_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_SEL      (15)
#define BM_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_SEL      (0x00008000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_SEL(v)   ((((reg32_t) v) << 15) & BM_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_SEL(v)   (((v) << 15) & BM_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the EPDC_WR_CACHE_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_EPDC_WR_CACHE_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, EPDC_WR_CACHE_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field LCDIF_RD_CACHE_VAL[16:16] (RW)
 *
 * LCDIF block cacheable attribute value of AXI read transactions The value of LCDIF_RD_CACHE_VAL is
 * affecting the transactions only if LCDIF_RD_CACHE_SEL is set.
 *
 * Values:
 * 0 - Cacheable attribute is off for read transactions.
 * 1 - Cacheable attribute is on for read transactions.
 */

#define BP_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_VAL      (16)
#define BM_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_VAL      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_VAL(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_VAL)
#else
#define BF_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_VAL(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_VAL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LCDIF_RD_CACHE_VAL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_VAL(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, LCDIF_RD_CACHE_VAL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field LCDIF_RD_CACHE_SEL[18:18] (RW)
 *
 * This bit selects the cacheable attribute of LCDIF AXI read transcations)
 *
 * Values:
 * 0 - The read transaction cacheable attribute is driven by the LCDIF core
 * 1 - The read transaction cacheable attribute is driven by LCDIF_RD_CACHE_VAL.
 */

#define BP_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_SEL      (18)
#define BM_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_SEL      (0x00040000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_SEL(v)   ((((reg32_t) v) << 18) & BM_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_SEL)
#else
#define BF_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_SEL(v)   (((v) << 18) & BM_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the LCDIF_RD_CACHE_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_LCDIF_RD_CACHE_SEL(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, LCDIF_RD_CACHE_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field ENET_STOP_REQ[27:27] (RW)
 *
 * ENET stop request
 *
 * Values:
 * 0 - Stop request off.
 * 1 - Stop request on.
 */

#define BP_IOMUXC_IOMUXC_GPR13_ENET_STOP_REQ      (27)
#define BM_IOMUXC_IOMUXC_GPR13_ENET_STOP_REQ      (0x08000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_ENET_STOP_REQ(v)   ((((reg32_t) v) << 27) & BM_IOMUXC_IOMUXC_GPR13_ENET_STOP_REQ)
#else
#define BF_IOMUXC_IOMUXC_GPR13_ENET_STOP_REQ(v)   (((v) << 27) & BM_IOMUXC_IOMUXC_GPR13_ENET_STOP_REQ)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ENET_STOP_REQ field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_ENET_STOP_REQ(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, ENET_STOP_REQ, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field CAN1_STOP_REQ[28:28] (RW)
 *
 * CAN1 stop request
 *
 * Values:
 * 0 - Stop request off.
 * 1 - Stop request on.
 */

#define BP_IOMUXC_IOMUXC_GPR13_CAN1_STOP_REQ      (28)
#define BM_IOMUXC_IOMUXC_GPR13_CAN1_STOP_REQ      (0x10000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_CAN1_STOP_REQ(v)   ((((reg32_t) v) << 28) & BM_IOMUXC_IOMUXC_GPR13_CAN1_STOP_REQ)
#else
#define BF_IOMUXC_IOMUXC_GPR13_CAN1_STOP_REQ(v)   (((v) << 28) & BM_IOMUXC_IOMUXC_GPR13_CAN1_STOP_REQ)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CAN1_STOP_REQ field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_CAN1_STOP_REQ(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, CAN1_STOP_REQ, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field CAN2_STOP_REQ[29:29] (RW)
 *
 * CAN2 stop request
 *
 * Values:
 * 0 - Stop request off.
 * 1 - Stop request on.
 */

#define BP_IOMUXC_IOMUXC_GPR13_CAN2_STOP_REQ      (29)
#define BM_IOMUXC_IOMUXC_GPR13_CAN2_STOP_REQ      (0x20000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_CAN2_STOP_REQ(v)   ((((reg32_t) v) << 29) & BM_IOMUXC_IOMUXC_GPR13_CAN2_STOP_REQ)
#else
#define BF_IOMUXC_IOMUXC_GPR13_CAN2_STOP_REQ(v)   (((v) << 29) & BM_IOMUXC_IOMUXC_GPR13_CAN2_STOP_REQ)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the CAN2_STOP_REQ field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_CAN2_STOP_REQ(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, CAN2_STOP_REQ, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_GPR13, field SDMA_STOP_REQ[30:30] (RW)
 *
 * SDMA stop request
 *
 * Values:
 * 0 - Stop request off.
 * 1 - Stop request on.
 */

#define BP_IOMUXC_IOMUXC_GPR13_SDMA_STOP_REQ      (30)
#define BM_IOMUXC_IOMUXC_GPR13_SDMA_STOP_REQ      (0x40000000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_GPR13_SDMA_STOP_REQ(v)   ((((reg32_t) v) << 30) & BM_IOMUXC_IOMUXC_GPR13_SDMA_STOP_REQ)
#else
#define BF_IOMUXC_IOMUXC_GPR13_SDMA_STOP_REQ(v)   (((v) << 30) & BM_IOMUXC_IOMUXC_GPR13_SDMA_STOP_REQ)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SDMA_STOP_REQ field to a new value.
#define BW_IOMUXC_IOMUXC_GPR13_SDMA_STOP_REQ(v)   BF_CS1(IOMUXC_IOMUXC_GPR13, SDMA_STOP_REQ, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_OBSERVE_MUX_0 - OBSRV (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned OBSRV : 6; //!< Select Instance Pin for Observability IOMUXC_OBSERVE_MUX_0
        unsigned RESERVED0 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_observe_mux_0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_OBSERVE_MUX_0 register
 */
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_ADDR      (REGS_IOMUXC_BASE + 0x38)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_0           (*(volatile hw_iomuxc_iomuxc_observe_mux_0_t *) HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_ADDR)
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_RD()      (HW_IOMUXC_IOMUXC_OBSERVE_MUX_0.U)
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_WR(v)     (HW_IOMUXC_IOMUXC_OBSERVE_MUX_0.U = (v))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_SET(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_CLR(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_TOG(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_OBSERVE_MUX_0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_OBSERVE_MUX_0, field OBSRV[5:0] (RW)
 *
 * Select Instance Pin for Observability IOMUXC_OBSERVE_MUX_0
 *
 * Values:
 * 000000 - Select Instance sdma, Pin events[47]
 * 000001 - Select Instance sdma, Pin events[46]
 * 000010 - Select Instance sdma, Pin events[45]
 * 000011 - Select Instance sdma, Pin events[44]
 * 000100 - Select Instance sdma, Pin events[43]
 * 000101 - Select Instance sdma, Pin events[42]
 * 000110 - Select Instance sdma, Pin events[41]
 * 000111 - Select Instance sdma, Pin events[40]
 * 001000 - Select Instance sdma, Pin events[39]
 * 001001 - Select Instance sdma, Pin events[38]
 * 001010 - Select Instance sdma, Pin events[37]
 * 001011 - Select Instance sdma, Pin events[36]
 * 001100 - Select Instance sdma, Pin events[35]
 * 001101 - Select Instance sdma, Pin events[34]
 * 001110 - Select Instance sdma, Pin events[33]
 * 001111 - Select Instance sdma, Pin events[32]
 * 010000 - Select Instance sdma, Pin events[31]
 * 010001 - Select Instance sdma, Pin events[30]
 * 010010 - Select Instance sdma, Pin events[29]
 * 010011 - Select Instance sdma, Pin events[28]
 * 010100 - Select Instance sdma, Pin events[27]
 * 010101 - Select Instance sdma, Pin events[26]
 * 010110 - Select Instance sdma, Pin events[25]
 * 010111 - Select Instance sdma, Pin events[24]
 * 011000 - Select Instance sdma, Pin events[23]
 * 011001 - Select Instance sdma, Pin events[22]
 * 011010 - Select Instance sdma, Pin events[21]
 * 011011 - Select Instance sdma, Pin events[20]
 * 011100 - Select Instance sdma, Pin events[19]
 * 011101 - Select Instance sdma, Pin events[18]
 * 011110 - Select Instance sdma, Pin events[17]
 * 011111 - Select Instance sdma, Pin events[16]
 * 100000 - Select Instance sdma, Pin events[15]
 * 100001 - Select Instance sdma, Pin events[14]
 * 100010 - Select Instance sdma, Pin events[13]
 * 100011 - Select Instance sdma, Pin events[12]
 * 100100 - Select Instance sdma, Pin events[11]
 * 100101 - Select Instance sdma, Pin events[10]
 * 100110 - Select Instance sdma, Pin events[9]
 * 100111 - Select Instance sdma, Pin events[8]
 * 101000 - Select Instance sdma, Pin events[7]
 * 101001 - Select Instance sdma, Pin events[6]
 * 101010 - Select Instance sdma, Pin events[5]
 * 101011 - Select Instance sdma, Pin events[4]
 * 101100 - Select Instance sdma, Pin events[3]
 * 101101 - Select Instance sdma, Pin events[2]
 * 101110 - Select Instance sdma, Pin events[1]
 * 101111 - Select Instance sdma, Pin events[0]
 */

#define BP_IOMUXC_IOMUXC_OBSERVE_MUX_0_OBSRV      (0)
#define BM_IOMUXC_IOMUXC_OBSERVE_MUX_0_OBSRV      (0x0000003f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_OBSERVE_MUX_0_OBSRV(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_OBSERVE_MUX_0_OBSRV)
#else
#define BF_IOMUXC_IOMUXC_OBSERVE_MUX_0_OBSRV(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_OBSERVE_MUX_0_OBSRV)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the OBSRV field to a new value.
#define BW_IOMUXC_IOMUXC_OBSERVE_MUX_0_OBSRV(v)   BF_CS1(IOMUXC_IOMUXC_OBSERVE_MUX_0, OBSRV, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_OBSERVE_MUX_1 - OBSRV (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned OBSRV : 6; //!< Select Instance Pin for Observability IOMUXC_OBSERVE_MUX_1
        unsigned RESERVED0 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_observe_mux_1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_OBSERVE_MUX_1 register
 */
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_ADDR      (REGS_IOMUXC_BASE + 0x3c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_1           (*(volatile hw_iomuxc_iomuxc_observe_mux_1_t *) HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_ADDR)
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_RD()      (HW_IOMUXC_IOMUXC_OBSERVE_MUX_1.U)
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_WR(v)     (HW_IOMUXC_IOMUXC_OBSERVE_MUX_1.U = (v))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_SET(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_CLR(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_TOG(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_OBSERVE_MUX_1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_OBSERVE_MUX_1, field OBSRV[5:0] (RW)
 *
 * Select Instance Pin for Observability IOMUXC_OBSERVE_MUX_1
 *
 * Values:
 * 000000 - Select Instance simba, Pin ipi_cortexa9_irqs[127]
 * 000001 - Select Instance simba, Pin ipi_cortexa9_irqs[126]
 * 000010 - Select Instance simba, Pin ipi_cortexa9_irqs[125]
 * 000011 - Select Instance simba, Pin ipi_cortexa9_irqs[124]
 * 000100 - Select Instance simba, Pin ipi_cortexa9_irqs[123]
 * 000101 - Select Instance simba, Pin ipi_cortexa9_irqs[122]
 * 000110 - Select Instance simba, Pin ipi_cortexa9_irqs[121]
 * 000111 - Select Instance simba, Pin ipi_cortexa9_irqs[120]
 * 001000 - Select Instance simba, Pin ipi_cortexa9_irqs[119]
 * 001001 - Select Instance simba, Pin ipi_cortexa9_irqs[118]
 * 001010 - Select Instance simba, Pin ipi_cortexa9_irqs[117]
 * 001011 - Select Instance simba, Pin ipi_cortexa9_irqs[116]
 * 001100 - Select Instance simba, Pin ipi_cortexa9_irqs[115]
 * 001101 - Select Instance simba, Pin ipi_cortexa9_irqs[114]
 * 001110 - Select Instance simba, Pin ipi_cortexa9_irqs[113]
 * 001111 - Select Instance simba, Pin ipi_cortexa9_irqs[112]
 * 010000 - Select Instance simba, Pin ipi_cortexa9_irqs[111]
 * 010001 - Select Instance simba, Pin ipi_cortexa9_irqs[110]
 * 010010 - Select Instance simba, Pin ipi_cortexa9_irqs[109]
 * 010011 - Select Instance simba, Pin ipi_cortexa9_irqs[108]
 * 010100 - Select Instance simba, Pin ipi_cortexa9_irqs[107]
 * 010101 - Select Instance simba, Pin ipi_cortexa9_irqs[106]
 * 010110 - Select Instance simba, Pin ipi_cortexa9_irqs[105]
 * 010111 - Select Instance simba, Pin ipi_cortexa9_irqs[104]
 * 011000 - Select Instance simba, Pin ipi_cortexa9_irqs[103]
 * 011001 - Select Instance simba, Pin ipi_cortexa9_irqs[102]
 * 011010 - Select Instance simba, Pin ipi_cortexa9_irqs[101]
 * 011011 - Select Instance simba, Pin ipi_cortexa9_irqs[100]
 * 011100 - Select Instance simba, Pin ipi_cortexa9_irqs[99]
 * 011101 - Select Instance simba, Pin ipi_cortexa9_irqs[98]
 * 011110 - Select Instance simba, Pin ipi_cortexa9_irqs[97]
 * 011111 - Select Instance simba, Pin ipi_cortexa9_irqs[96]
 * 100000 - Select Instance simba, Pin ipi_cortexa9_irqs[95]
 * 100001 - Select Instance simba, Pin ipi_cortexa9_irqs[94]
 * 100010 - Select Instance simba, Pin ipi_cortexa9_irqs[93]
 * 100011 - Select Instance simba, Pin ipi_cortexa9_irqs[92]
 * 100100 - Select Instance simba, Pin ipi_cortexa9_irqs[91]
 * 100101 - Select Instance simba, Pin ipi_cortexa9_irqs[90]
 * 100110 - Select Instance simba, Pin ipi_cortexa9_irqs[89]
 * 100111 - Select Instance simba, Pin ipi_cortexa9_irqs[88]
 * 101000 - Select Instance simba, Pin ipi_cortexa9_irqs[87]
 */

#define BP_IOMUXC_IOMUXC_OBSERVE_MUX_1_OBSRV      (0)
#define BM_IOMUXC_IOMUXC_OBSERVE_MUX_1_OBSRV      (0x0000003f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_OBSERVE_MUX_1_OBSRV(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_OBSERVE_MUX_1_OBSRV)
#else
#define BF_IOMUXC_IOMUXC_OBSERVE_MUX_1_OBSRV(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_OBSERVE_MUX_1_OBSRV)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the OBSRV field to a new value.
#define BW_IOMUXC_IOMUXC_OBSERVE_MUX_1_OBSRV(v)   BF_CS1(IOMUXC_IOMUXC_OBSERVE_MUX_1, OBSRV, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_OBSERVE_MUX_2 - OBSRV (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned OBSRV : 6; //!< Select Instance Pin for Observability IOMUXC_OBSERVE_MUX_2
        unsigned RESERVED0 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_observe_mux_2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_OBSERVE_MUX_2 register
 */
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_ADDR      (REGS_IOMUXC_BASE + 0x40)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_2           (*(volatile hw_iomuxc_iomuxc_observe_mux_2_t *) HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_ADDR)
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_RD()      (HW_IOMUXC_IOMUXC_OBSERVE_MUX_2.U)
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_WR(v)     (HW_IOMUXC_IOMUXC_OBSERVE_MUX_2.U = (v))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_SET(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_CLR(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_TOG(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_OBSERVE_MUX_2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_OBSERVE_MUX_2, field OBSRV[5:0] (RW)
 *
 * Select Instance Pin for Observability IOMUXC_OBSERVE_MUX_2
 *
 * Values:
 * 000000 - Select Instance simba, Pin ipi_cortexa9_irqs[86]
 * 000001 - Select Instance simba, Pin ipi_cortexa9_irqs[85]
 * 000010 - Select Instance simba, Pin ipi_cortexa9_irqs[84]
 * 000011 - Select Instance simba, Pin ipi_cortexa9_irqs[83]
 * 000100 - Select Instance simba, Pin ipi_cortexa9_irqs[82]
 * 000101 - Select Instance simba, Pin ipi_cortexa9_irqs[81]
 * 000110 - Select Instance simba, Pin ipi_cortexa9_irqs[80]
 * 000111 - Select Instance simba, Pin ipi_cortexa9_irqs[79]
 * 001000 - Select Instance simba, Pin ipi_cortexa9_irqs[78]
 * 001001 - Select Instance simba, Pin ipi_cortexa9_irqs[77]
 * 001010 - Select Instance simba, Pin ipi_cortexa9_irqs[76]
 * 001011 - Select Instance simba, Pin ipi_cortexa9_irqs[75]
 * 001100 - Select Instance simba, Pin ipi_cortexa9_irqs[74]
 * 001101 - Select Instance simba, Pin ipi_cortexa9_irqs[73]
 * 001110 - Select Instance simba, Pin ipi_cortexa9_irqs[72]
 * 001111 - Select Instance simba, Pin ipi_cortexa9_irqs[71]
 * 010000 - Select Instance simba, Pin ipi_cortexa9_irqs[70]
 * 010001 - Select Instance simba, Pin ipi_cortexa9_irqs[69]
 * 010010 - Select Instance simba, Pin ipi_cortexa9_irqs[68]
 * 010011 - Select Instance simba, Pin ipi_cortexa9_irqs[67]
 * 010100 - Select Instance simba, Pin ipi_cortexa9_irqs[66]
 * 010101 - Select Instance simba, Pin ipi_cortexa9_irqs[65]
 * 010110 - Select Instance simba, Pin ipi_cortexa9_irqs[64]
 * 010111 - Select Instance simba, Pin ipi_cortexa9_irqs[63]
 * 011000 - Select Instance simba, Pin ipi_cortexa9_irqs[62]
 * 011001 - Select Instance simba, Pin ipi_cortexa9_irqs[61]
 * 011010 - Select Instance simba, Pin ipi_cortexa9_irqs[60]
 * 011011 - Select Instance simba, Pin ipi_cortexa9_irqs[59]
 * 011100 - Select Instance simba, Pin ipi_cortexa9_irqs[58]
 * 011101 - Select Instance simba, Pin ipi_cortexa9_irqs[57]
 * 011110 - Select Instance simba, Pin ipi_cortexa9_irqs[56]
 * 011111 - Select Instance simba, Pin ipi_cortexa9_irqs[55]
 * 100000 - Select Instance simba, Pin ipi_cortexa9_irqs[54]
 * 100001 - Select Instance simba, Pin ipi_cortexa9_irqs[53]
 * 100010 - Select Instance simba, Pin ipi_cortexa9_irqs[52]
 * 100011 - Select Instance simba, Pin ipi_cortexa9_irqs[51]
 * 100100 - Select Instance simba, Pin ipi_cortexa9_irqs[50]
 * 100101 - Select Instance simba, Pin ipi_cortexa9_irqs[49]
 * 100110 - Select Instance simba, Pin ipi_cortexa9_irqs[48]
 */

#define BP_IOMUXC_IOMUXC_OBSERVE_MUX_2_OBSRV      (0)
#define BM_IOMUXC_IOMUXC_OBSERVE_MUX_2_OBSRV      (0x0000003f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_OBSERVE_MUX_2_OBSRV(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_OBSERVE_MUX_2_OBSRV)
#else
#define BF_IOMUXC_IOMUXC_OBSERVE_MUX_2_OBSRV(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_OBSERVE_MUX_2_OBSRV)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the OBSRV field to a new value.
#define BW_IOMUXC_IOMUXC_OBSERVE_MUX_2_OBSRV(v)   BF_CS1(IOMUXC_IOMUXC_OBSERVE_MUX_2, OBSRV, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_OBSERVE_MUX_3 - OBSRV (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned OBSRV : 6; //!< Select Instance Pin for Observability IOMUXC_OBSERVE_MUX_3
        unsigned RESERVED0 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_observe_mux_3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_OBSERVE_MUX_3 register
 */
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_ADDR      (REGS_IOMUXC_BASE + 0x44)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_3           (*(volatile hw_iomuxc_iomuxc_observe_mux_3_t *) HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_ADDR)
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_RD()      (HW_IOMUXC_IOMUXC_OBSERVE_MUX_3.U)
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_WR(v)     (HW_IOMUXC_IOMUXC_OBSERVE_MUX_3.U = (v))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_SET(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_CLR(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_TOG(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_OBSERVE_MUX_3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_OBSERVE_MUX_3, field OBSRV[5:0] (RW)
 *
 * Select Instance Pin for Observability IOMUXC_OBSERVE_MUX_3
 *
 * Values:
 * 000000 - Select Instance simba, Pin ipi_cortexa9_irqs[47]
 * 000001 - Select Instance simba, Pin ipi_cortexa9_irqs[46]
 * 000010 - Select Instance simba, Pin ipi_cortexa9_irqs[45]
 * 000011 - Select Instance simba, Pin ipi_cortexa9_irqs[44]
 * 000100 - Select Instance simba, Pin ipi_cortexa9_irqs[43]
 * 000101 - Select Instance simba, Pin ipi_cortexa9_irqs[42]
 * 000110 - Select Instance simba, Pin ipi_cortexa9_irqs[41]
 * 000111 - Select Instance simba, Pin ipi_cortexa9_irqs[40]
 * 001000 - Select Instance simba, Pin ipi_cortexa9_irqs[39]
 * 001001 - Select Instance simba, Pin ipi_cortexa9_irqs[38]
 * 001010 - Select Instance simba, Pin ipi_cortexa9_irqs[37]
 * 001011 - Select Instance simba, Pin ipi_cortexa9_irqs[36]
 * 001100 - Select Instance simba, Pin ipi_cortexa9_irqs[35]
 * 001101 - Select Instance simba, Pin ipi_cortexa9_irqs[34]
 * 001110 - Select Instance simba, Pin ipi_cortexa9_irqs[33]
 * 001111 - Select Instance simba, Pin ipi_cortexa9_irqs[32]
 * 010000 - Select Instance simba, Pin ipi_cortexa9_irqs[31]
 * 010001 - Select Instance simba, Pin ipi_cortexa9_irqs[30]
 * 010010 - Select Instance simba, Pin ipi_cortexa9_irqs[29]
 * 010011 - Select Instance simba, Pin ipi_cortexa9_irqs[28]
 * 010100 - Select Instance simba, Pin ipi_cortexa9_irqs[27]
 * 010101 - Select Instance simba, Pin ipi_cortexa9_irqs[26]
 * 010110 - Select Instance simba, Pin ipi_cortexa9_irqs[25]
 * 010111 - Select Instance simba, Pin ipi_cortexa9_irqs[24]
 * 011000 - Select Instance simba, Pin ipi_cortexa9_irqs[23]
 * 011001 - Select Instance simba, Pin ipi_cortexa9_irqs[22]
 * 011010 - Select Instance simba, Pin ipi_cortexa9_irqs[21]
 * 011011 - Select Instance simba, Pin ipi_cortexa9_irqs[20]
 * 011100 - Select Instance simba, Pin ipi_cortexa9_irqs[19]
 * 011101 - Select Instance simba, Pin ipi_cortexa9_irqs[18]
 * 011110 - Select Instance simba, Pin ipi_cortexa9_irqs[17]
 * 011111 - Select Instance simba, Pin ipi_cortexa9_irqs[16]
 * 100000 - Select Instance simba, Pin ipi_cortexa9_irqs[15]
 * 100001 - Select Instance simba, Pin ipi_cortexa9_irqs[14]
 * 100010 - Select Instance simba, Pin ipi_cortexa9_irqs[13]
 * 100011 - Select Instance simba, Pin ipi_cortexa9_irqs[12]
 * 100100 - Select Instance simba, Pin ipi_cortexa9_irqs[11]
 * 100101 - Select Instance simba, Pin ipi_cortexa9_irqs[10]
 * 100110 - Select Instance simba, Pin ipi_cortexa9_irqs[9]
 * 100111 - Select Instance simba, Pin ipi_cortexa9_irqs[8]
 * 101000 - Select Instance simba, Pin ipi_cortexa9_irqs[7]
 * 101001 - Select Instance simba, Pin ipi_cortexa9_irqs[6]
 * 101010 - Select Instance simba, Pin ipi_cortexa9_irqs[5]
 * 101011 - Select Instance simba, Pin ipi_cortexa9_irqs[4]
 * 101100 - Select Instance simba, Pin ipi_cortexa9_irqs[3]
 * 101101 - Select Instance simba, Pin ipi_cortexa9_irqs[2]
 * 101110 - Select Instance simba, Pin ipi_cortexa9_irqs[1]
 */

#define BP_IOMUXC_IOMUXC_OBSERVE_MUX_3_OBSRV      (0)
#define BM_IOMUXC_IOMUXC_OBSERVE_MUX_3_OBSRV      (0x0000003f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_OBSERVE_MUX_3_OBSRV(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_OBSERVE_MUX_3_OBSRV)
#else
#define BF_IOMUXC_IOMUXC_OBSERVE_MUX_3_OBSRV(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_OBSERVE_MUX_3_OBSRV)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the OBSRV field to a new value.
#define BW_IOMUXC_IOMUXC_OBSERVE_MUX_3_OBSRV(v)   BF_CS1(IOMUXC_IOMUXC_OBSERVE_MUX_3, OBSRV, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_OBSERVE_MUX_4 - OBSRV (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned OBSRV : 6; //!< Select Instance Pin for Observability IOMUXC_OBSERVE_MUX_4
        unsigned RESERVED0 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_observe_mux_4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_OBSERVE_MUX_4 register
 */
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_ADDR      (REGS_IOMUXC_BASE + 0x48)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_4           (*(volatile hw_iomuxc_iomuxc_observe_mux_4_t *) HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_ADDR)
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_RD()      (HW_IOMUXC_IOMUXC_OBSERVE_MUX_4.U)
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_WR(v)     (HW_IOMUXC_IOMUXC_OBSERVE_MUX_4.U = (v))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_SET(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_CLR(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_TOG(v)    (HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_WR(HW_IOMUXC_IOMUXC_OBSERVE_MUX_4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_OBSERVE_MUX_4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_OBSERVE_MUX_4, field OBSRV[5:0] (RW)
 *
 * Select Instance Pin for Observability IOMUXC_OBSERVE_MUX_4
 *
 * Values:
 * 000000 - Select Instance gpc, Pin gpc_dsm_wakup
 * 000001 - Select Instance anatop, Pin global_pll_lrf
 * 000010 - Select Instance ccm, Pin ccm_ipg_stop
 * 000011 - Select Instance ccm, Pin ccm_ipg_wait
 * 000100 - Select Instance ccm, Pin ccm_system_in_stop_mode
 * 000101 - Select Instance ccm, Pin ccm_system_in_wait_mode
 * 000110 - Select Instance ccm, Pin pll2_400m_pfd_dis_masked
 * 000111 - Select Instance ccm, Pin pll2_352m_pfd_dis_masked
 * 001000 - Select Instance ccm, Pin pll2_594m_pfd_dis_masked
 * 001001 - Select Instance ccm, Pin pll3_508m_pfd_dis_masked
 * 001010 - Select Instance ccm, Pin pll3_454m_pfd_dis_masked
 * 001011 - Select Instance ccm, Pin pll3_720m_pfd_dis_masked
 * 001100 - Select Instance ccm, Pin pll3_540m_pfd_dis_masked
 * 001101 - Select Instance ccm, Pin mmdc_ch1_clk_change_req
 * 001110 - Select Instance ccm, Pin mmdc_ch0_stop_ack
 * 001111 - Select Instance ccm, Pin mmdc_ch1_stop_ack
 * 010000 - Select Instance ccm, Pin mmdc_stop_req
 * 010001 - Select Instance ccm, Pin wb_per_en
 * 010010 - Select Instance ccm, Pin wb_core_en
 * 010011 - Select Instance simba, Pin l2cc_idle
 * 010100 - Select Instance simba, Pin scu_idle
 * 010101 - Select Instance simba, Pin standbywfi[1]
 * 010110 - Select Instance simba, Pin standbywfi[0]
 * 010111 - Select Instance pl301_sim_mx6dl_fast2a, Pin awvalid_m_a_0
 * 011000 - Select Instance pl301_sim_mx6dl_fast2a, Pin wvalid_m_a_0
 * 011001 - Select Instance pl301_sim_mx6dl_fast2a, Pin arvalid_m_a_0
 * 011010 - Select Instance pl301_sim_mx6dl_fast2a, Pin rvalid_m_a_0
 * 011011 - Select Instance pl301_sim_mx6dl_fast2a, Pin awready_m_a_0
 * 011100 - Select Instance pl301_sim_mx6dl_fast2a, Pin wready_m_a_0
 * 011101 - Select Instance pl301_sim_mx6dl_fast2a, Pin arready_m_a_0
 * 011110 - Select Instance pl301_sim_mx6dl_fast2a, Pin rready_m_a_0
 * 011111 - Select Instance pl301_sim_mx6dl_fast2a, Pin awvalid_m_a_1
 * 100000 - Select Instance pl301_sim_mx6dl_fast2a, Pin wvalid_m_a_1
 * 100001 - Select Instance pl301_sim_mx6dl_fast2a, Pin arvalid_m_a_1
 * 100010 - Select Instance pl301_sim_mx6dl_fast2a, Pin rvalid_m_a_1
 * 100011 - Select Instance pl301_sim_mx6dl_fast2a, Pin awready_m_a_1
 * 100100 - Select Instance pl301_sim_mx6dl_fast2a, Pin wready_m_a_1
 * 100101 - Select Instance pl301_sim_mx6dl_fast2a, Pin arready_m_a_1
 * 100110 - Select Instance pl301_sim_mx6dl_fast2a, Pin rready_m_a_1
 * 100111 - Select Instance simba, Pin l2cc_idle
 * 101000 - Select Instance simba, Pin scu_idle
 * 101001 - Select Instance simba, Pin standbywfi[1]
 * 101010 - Select Instance simba, Pin standbywfi[0]
 * 101011 - Select Instance vpu, Pin vpu_underrun
 * 101100 - Select Instance simba, Pin dbg_ack[0]
 */

#define BP_IOMUXC_IOMUXC_OBSERVE_MUX_4_OBSRV      (0)
#define BM_IOMUXC_IOMUXC_OBSERVE_MUX_4_OBSRV      (0x0000003f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_OBSERVE_MUX_4_OBSRV(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_OBSERVE_MUX_4_OBSRV)
#else
#define BF_IOMUXC_IOMUXC_OBSERVE_MUX_4_OBSRV(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_OBSERVE_MUX_4_OBSRV)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the OBSRV field to a new value.
#define BW_IOMUXC_IOMUXC_OBSERVE_MUX_4_OBSRV(v)   BF_CS1(IOMUXC_IOMUXC_OBSERVE_MUX_4, OBSRV, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: CSI0_DAT10. NOTE: Pad CSI0_DAT10 is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT for mode ALT2. - Config IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat10_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_ADDR      (REGS_IOMUXC_BASE + 0x4c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat10_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: CSI0_DAT10. NOTE: Pad
 * CSI0_DAT10 is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT for mode
 * ALT2. - Config IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[10] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: AUD3_RXC of instance: audmux.
 * 010 - Select mux mode: ALT2 mux port: MISO of instance: ecspi2.
 * 011 - Select mux mode: ALT3 mux port: TXD_MUX of instance: uart1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[28] of instance: gpio5.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT10.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: CSI0_DAT11. NOTE: Pad CSI0_DAT11 is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT2. - Config IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat11_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_ADDR      (REGS_IOMUXC_BASE + 0x50)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat11_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: CSI0_DAT11. NOTE: Pad
 * CSI0_DAT11 is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT for
 * mode ALT2. - Config IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[11] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: AUD3_RXFS of instance: audmux.
 * 010 - Select mux mode: ALT2 mux port: SS0 of instance: ecspi2.
 * 011 - Select mux mode: ALT3 mux port: RXD_MUX of instance: uart1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[29] of instance: gpio5.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT11.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: CSI0_DAT12. NOTE: Pad CSI0_DAT12 is involved in Daisy Chain. - Config IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat12_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_ADDR      (REGS_IOMUXC_BASE + 0x54)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat12_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: CSI0_DAT12. NOTE: Pad
 * CSI0_DAT12 is involved in Daisy Chain. - Config IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT for
 * mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[12] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[8] of instance: weim.
 * 011 - Select mux mode: ALT3 mux port: TXD_MUX of instance: uart4.
 * 101 - Select mux mode: ALT5 mux port: GPIO[30] of instance: gpio5.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT12.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: CSI0_DAT13. NOTE: Pad CSI0_DAT13 is involved in Daisy Chain. - Config IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat13_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_ADDR      (REGS_IOMUXC_BASE + 0x58)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat13_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: CSI0_DAT13. NOTE: Pad
 * CSI0_DAT13 is involved in Daisy Chain. - Config IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT for
 * mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[13] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[9] of instance: weim.
 * 011 - Select mux mode: ALT3 mux port: RXD_MUX of instance: uart4.
 * 101 - Select mux mode: ALT5 mux port: GPIO[31] of instance: gpio5.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT13.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: CSI0_DAT14. NOTE: Pad CSI0_DAT14 is involved in Daisy Chain. - Config IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat14_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_ADDR      (REGS_IOMUXC_BASE + 0x5c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat14_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: CSI0_DAT14. NOTE: Pad
 * CSI0_DAT14 is involved in Daisy Chain. - Config IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT for
 * mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[14] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[10] of instance: weim.
 * 011 - Select mux mode: ALT3 mux port: TXD_MUX of instance: uart5.
 * 101 - Select mux mode: ALT5 mux port: GPIO[0] of instance: gpio6.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT14.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT15. NOTE: Pad CSI0_DAT15 is involved in Daisy Chain. - Config IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat15_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_ADDR      (REGS_IOMUXC_BASE + 0x60)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat15_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT15. NOTE: Pad
 * CSI0_DAT15 is involved in Daisy Chain. - Config IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT for
 * mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[15] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[11] of instance: weim.
 * 010 - Reserved.
 * 011 - Select mux mode: ALT3 mux port: RXD_MUX of instance: uart5.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[1] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT15.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT16. NOTE: Pad CSI0_DAT16 is involved in Daisy Chain. - Config IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat16_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_ADDR      (REGS_IOMUXC_BASE + 0x64)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat16_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT16. NOTE: Pad
 * CSI0_DAT16 is involved in Daisy Chain. - Config IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT for mode
 * ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[16] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[12] of instance: weim.
 * 010 - Reserved.
 * 011 - Select mux mode: ALT3 mux port: RTS of instance: uart4.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[2] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT16.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT17. NOTE: Pad CSI0_DAT17 is involved in Daisy Chain. - Config IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat17_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_ADDR      (REGS_IOMUXC_BASE + 0x68)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat17_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT17. NOTE: Pad
 * CSI0_DAT17 is involved in Daisy Chain. - Config IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT for mode
 * ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[17] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[13] of instance: weim.
 * 010 - Reserved.
 * 011 - Select mux mode: ALT3 mux port: CTS of instance: uart4.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[3] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT17.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT18. NOTE: Pad CSI0_DAT18 is involved in Daisy Chain. - Config IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat18_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_ADDR      (REGS_IOMUXC_BASE + 0x6c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat18_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT18. NOTE: Pad
 * CSI0_DAT18 is involved in Daisy Chain. - Config IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT for mode
 * ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[18] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[14] of instance: weim.
 * 010 - Reserved.
 * 011 - Select mux mode: ALT3 mux port: RTS of instance: uart5.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[4] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT18.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT19. NOTE: Pad CSI0_DAT19 is involved in Daisy Chain. - Config IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat19_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_ADDR      (REGS_IOMUXC_BASE + 0x70)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat19_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT19. NOTE: Pad
 * CSI0_DAT19 is involved in Daisy Chain. - Config IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT for mode
 * ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[19] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[15] of instance: weim.
 * 010 - Reserved.
 * 011 - Select mux mode: ALT3 mux port: CTS of instance: uart5.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[5] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT19.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT4. NOTE: Pad CSI0_DAT4 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT2. - Config IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_ADDR      (REGS_IOMUXC_BASE + 0x74)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat4_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT4. NOTE: Pad
 * CSI0_DAT4 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT for
 * mode ALT2. - Config IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[4] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[2] of instance: weim.
 * 010 - Select mux mode: ALT2 mux port: SCLK of instance: ecspi1.
 * 011 - Select mux mode: ALT3 mux port: COL[5] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: AUD3_TXC of instance: audmux.
 * 101 - Select mux mode: ALT5 mux port: GPIO[22] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT4.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT5. NOTE: Pad CSI0_DAT5 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT for mode ALT2. - Config IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_ADDR      (REGS_IOMUXC_BASE + 0x78)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat5_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT5. NOTE: Pad
 * CSI0_DAT5 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT for mode
 * ALT2. - Config IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[5] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[3] of instance: weim.
 * 010 - Select mux mode: ALT2 mux port: MOSI of instance: ecspi1.
 * 011 - Select mux mode: ALT3 mux port: ROW[5] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: AUD3_TXD of instance: audmux.
 * 101 - Select mux mode: ALT5 mux port: GPIO[23] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT5.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT6. NOTE: Pad CSI0_DAT6 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT for mode ALT2. - Config IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_ADDR      (REGS_IOMUXC_BASE + 0x7c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat6_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT6. NOTE: Pad
 * CSI0_DAT6 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT for mode
 * ALT2. - Config IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[6] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[4] of instance: weim.
 * 010 - Select mux mode: ALT2 mux port: MISO of instance: ecspi1.
 * 011 - Select mux mode: ALT3 mux port: COL[6] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: AUD3_TXFS of instance: audmux.
 * 101 - Select mux mode: ALT5 mux port: GPIO[24] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT6.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT7. NOTE: Pad CSI0_DAT7 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT2. - Config IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_ADDR      (REGS_IOMUXC_BASE + 0x80)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat7_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT7. NOTE: Pad
 * CSI0_DAT7 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT for mode
 * ALT2. - Config IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[7] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[5] of instance: weim.
 * 010 - Select mux mode: ALT2 mux port: SS0 of instance: ecspi1.
 * 011 - Select mux mode: ALT3 mux port: ROW[6] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: AUD3_RXD of instance: audmux.
 * 101 - Select mux mode: ALT5 mux port: GPIO[25] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT7.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT8. NOTE: Pad CSI0_DAT8 is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT2. - Config IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT for mode ALT4. - Config IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat8_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_ADDR      (REGS_IOMUXC_BASE + 0x84)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat8_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT8. NOTE: Pad
 * CSI0_DAT8 is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT for
 * mode ALT2. - Config IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT for mode ALT4. - Config
 * IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[8] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[6] of instance: weim.
 * 010 - Select mux mode: ALT2 mux port: SCLK of instance: ecspi2.
 * 011 - Select mux mode: ALT3 mux port: COL[7] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: SDA of instance: i2c1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[26] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT8.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT9. NOTE: Pad CSI0_DAT9 is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT for mode ALT2. - Config IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT for mode ALT4. - Config IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat9_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_ADDR      (REGS_IOMUXC_BASE + 0x88)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat9_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: CSI0_DAT9. NOTE: Pad
 * CSI0_DAT9 is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT for mode
 * ALT2. - Config IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT for mode ALT4. - Config
 * IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_D[9] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[7] of instance: weim.
 * 010 - Select mux mode: ALT2 mux port: MOSI of instance: ecspi2.
 * 011 - Select mux mode: ALT3 mux port: ROW[7] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: SCL of instance: i2c1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[27] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DAT9.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: CSI0_DATA_EN.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_data_en_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_ADDR      (REGS_IOMUXC_BASE + 0x8c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_data_en_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: CSI0_DATA_EN.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_DATA_EN of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[0] of instance: weim.
 * 010 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[20] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_DATA_EN.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: CSI0_MCLK.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_mclk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_ADDR      (REGS_IOMUXC_BASE + 0x90)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_mclk_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: CSI0_MCLK.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_HSYNC of instance: ipu1.
 * 010 - Reserved.
 * 011 - Select mux mode: ALT3 mux port: CLKO of instance: ccm.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[19] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_MCLK.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: CSI0_PIXCLK.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_pixclk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_ADDR      (REGS_IOMUXC_BASE + 0x94)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_pixclk_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: CSI0_PIXCLK.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_PIXCLK of instance: ipu1.
 * 010 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[18] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: EVENTO of instance: simba.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_PIXCLK.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: CSI0_VSYNC.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_vsync_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_ADDR      (REGS_IOMUXC_BASE + 0x98)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_vsync_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: CSI0_VSYNC.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CSI0_VSYNC of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: WEIM_D[1] of instance: weim.
 * 010 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[21] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad CSI0_VSYNC.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DI0_DISP_CLK.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_disp_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_ADDR      (REGS_IOMUXC_BASE + 0x9c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_disp_clk_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DI0_DISP_CLK.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DI0_DISP_CLK of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: CLK of instance: lcdif.
 * 1000 - Select mux mode: ALT8 mux port: WR_RWN of instance: lcdif.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[16] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DI0_DISP_CLK.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: DI0_PIN15.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin15_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_ADDR      (REGS_IOMUXC_BASE + 0xa0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin15_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: DI0_PIN15.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DI0_PIN15 of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: ENABLE of instance: lcdif.
 * 1000 - Select mux mode: ALT8 mux port: RD_E of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: AUD6_TXC of instance: audmux.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[17] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DI0_PIN15.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: DI0_PIN2. NOTE: Pad DI0_PIN2 is involved in Daisy Chain. - Config IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT for mode ALT1.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_ADDR      (REGS_IOMUXC_BASE + 0xa4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: DI0_PIN2. NOTE: Pad DI0_PIN2
 * is involved in Daisy Chain. - Config IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT for mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DI0_PIN2 of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: HSYNC of instance: lcdif.
 * 1000 - Select mux mode: ALT8 mux port: RS of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: AUD6_TXD of instance: audmux.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[18] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DI0_PIN2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: DI0_PIN3.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_ADDR      (REGS_IOMUXC_BASE + 0xa8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: DI0_PIN3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DI0_PIN3 of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: VSYNC of instance: lcdif.
 * 1000 - Select mux mode: ALT8 mux port: CS of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: AUD6_TXFS of instance: audmux.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[19] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DI0_PIN3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: DI0_PIN4. NOTE: Pad DI0_PIN4 is involved in Daisy Chain. - Config IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT for mode ALT1. - Config IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT for mode ALT3.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_ADDR      (REGS_IOMUXC_BASE + 0xac)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin4_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: DI0_PIN4. NOTE: Pad DI0_PIN4
 * is involved in Daisy Chain. - Config IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT for mode ALT1. - Config
 * IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DI0_PIN4 of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: BUSY of instance: lcdif.
 * 1000 - Select mux mode: ALT8 mux port: RESET of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: AUD6_RXD of instance: audmux.
 * 011 - Select mux mode: ALT3 mux port: WP of instance: usdhc1.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[20] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DI0_PIN4.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_ADDR      (REGS_IOMUXC_BASE + 0xb0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[0] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[0] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: SCLK of instance: ecspi3.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[21] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_ADDR      (REGS_IOMUXC_BASE + 0xb4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[1] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[1] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: MOSI of instance: ecspi3.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[22] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: DISP0_DAT10.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat10_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_ADDR      (REGS_IOMUXC_BASE + 0xb8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat10_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: DISP0_DAT10.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[10] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[10] of instance: lcdif.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[31] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT10.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: DISP0_DAT11.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat11_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_ADDR      (REGS_IOMUXC_BASE + 0xbc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat11_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: DISP0_DAT11.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[11] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[11] of instance: lcdif.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[5] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT11.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: DISP0_DAT12.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat12_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_ADDR      (REGS_IOMUXC_BASE + 0xc0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat12_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: DISP0_DAT12.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[12] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[12] of instance: lcdif.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[6] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT12.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: DISP0_DAT13. NOTE: Pad DISP0_DAT13 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat13_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_ADDR      (REGS_IOMUXC_BASE + 0xc4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat13_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: DISP0_DAT13. NOTE: Pad
 * DISP0_DAT13 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT for
 * mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[13] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[13] of instance: lcdif.
 * 011 - Select mux mode: ALT3 mux port: AUD5_RXFS of instance: audmux.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[7] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT13.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: DISP0_DAT14. NOTE: Pad DISP0_DAT14 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat14_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_ADDR      (REGS_IOMUXC_BASE + 0xc8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat14_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: DISP0_DAT14. NOTE: Pad
 * DISP0_DAT14 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT
 * for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[14] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[14] of instance: lcdif.
 * 011 - Select mux mode: ALT3 mux port: AUD5_RXC of instance: audmux.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[8] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT14.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT15. NOTE: Pad DISP0_DAT15 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT for mode ALT2. - Config IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat15_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_ADDR      (REGS_IOMUXC_BASE + 0xcc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat15_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT15. NOTE: Pad
 * DISP0_DAT15 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT for
 * mode ALT2. - Config IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[15] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[15] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: SS1 of instance: ecspi1.
 * 011 - Select mux mode: ALT3 mux port: SS1 of instance: ecspi2.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[9] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT15.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT16. NOTE: Pad DISP0_DAT16 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT for mode ALT2. - Config IOMUXC_SDMA_EVENTS_14_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat16_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_ADDR      (REGS_IOMUXC_BASE + 0xd0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat16_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT16. NOTE: Pad
 * DISP0_DAT16 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT
 * for mode ALT3. - Config IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT for mode ALT2. - Config
 * IOMUXC_SDMA_EVENTS_14_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[16] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[16] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: MOSI of instance: ecspi2.
 * 011 - Select mux mode: ALT3 mux port: AUD5_TXC of instance: audmux.
 * 100 - Select mux mode: ALT4 mux port: SDMA_EXT_EVENT[0] of instance: sdma.
 * 101 - Select mux mode: ALT5 mux port: GPIO[10] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT16.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT17. NOTE: Pad DISP0_DAT17 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT for mode ALT2. - Config IOMUXC_SDMA_EVENTS_15_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat17_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_ADDR      (REGS_IOMUXC_BASE + 0xd4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat17_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT17. NOTE: Pad
 * DISP0_DAT17 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT for
 * mode ALT3. - Config IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT for mode ALT2. - Config
 * IOMUXC_SDMA_EVENTS_15_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[17] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[17] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: MISO of instance: ecspi2.
 * 011 - Select mux mode: ALT3 mux port: AUD5_TXD of instance: audmux.
 * 100 - Select mux mode: ALT4 mux port: SDMA_EXT_EVENT[1] of instance: sdma.
 * 101 - Select mux mode: ALT5 mux port: GPIO[11] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT17.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT18. NOTE: Pad DISP0_DAT18 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT for mode ALT4. - Config IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat18_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_ADDR      (REGS_IOMUXC_BASE + 0xd8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat18_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT18. NOTE: Pad
 * DISP0_DAT18 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT for
 * mode ALT4. - Config IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT for mode ALT3. - Config
 * IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[18] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[18] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: SS0 of instance: ecspi2.
 * 011 - Select mux mode: ALT3 mux port: AUD5_TXFS of instance: audmux.
 * 100 - Select mux mode: ALT4 mux port: AUD4_RXFS of instance: audmux.
 * 101 - Select mux mode: ALT5 mux port: GPIO[12] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: WEIM_CS[2] of instance: weim.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT18.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT19. NOTE: Pad DISP0_DAT19 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT for mode ALT4. - Config IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat19_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_ADDR      (REGS_IOMUXC_BASE + 0xdc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat19_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT19. NOTE: Pad
 * DISP0_DAT19 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT
 * for mode ALT4. - Config IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT for mode ALT3. - Config
 * IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[19] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[19] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: SCLK of instance: ecspi2.
 * 011 - Select mux mode: ALT3 mux port: AUD5_RXD of instance: audmux.
 * 100 - Select mux mode: ALT4 mux port: AUD4_RXC of instance: audmux.
 * 101 - Select mux mode: ALT5 mux port: GPIO[13] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: WEIM_CS[3] of instance: weim.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT19.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_ADDR      (REGS_IOMUXC_BASE + 0xe0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[2] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[2] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: MISO of instance: ecspi3.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[23] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT20. NOTE: Pad DISP0_DAT20 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat20_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_ADDR      (REGS_IOMUXC_BASE + 0xe4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat20_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT20. NOTE: Pad
 * DISP0_DAT20 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT
 * for mode ALT3. - Config IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[20] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[20] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: SCLK of instance: ecspi1.
 * 011 - Select mux mode: ALT3 mux port: AUD4_TXC of instance: audmux.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[14] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT20.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT21. NOTE: Pad DISP0_DAT21 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat21_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_ADDR      (REGS_IOMUXC_BASE + 0xe8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat21_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT21. NOTE: Pad
 * DISP0_DAT21 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT for
 * mode ALT3. - Config IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[21] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[21] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: MOSI of instance: ecspi1.
 * 011 - Select mux mode: ALT3 mux port: AUD4_TXD of instance: audmux.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[15] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT21.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT22. NOTE: Pad DISP0_DAT22 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat22_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_ADDR      (REGS_IOMUXC_BASE + 0xec)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat22_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT22. NOTE: Pad
 * DISP0_DAT22 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT for
 * mode ALT3. - Config IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[22] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[22] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: MISO of instance: ecspi1.
 * 011 - Select mux mode: ALT3 mux port: AUD4_TXFS of instance: audmux.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[16] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT22.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT23. NOTE: Pad DISP0_DAT23 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat23_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_ADDR      (REGS_IOMUXC_BASE + 0xf0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat23_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT23. NOTE: Pad
 * DISP0_DAT23 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT for
 * mode ALT3. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[23] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[23] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: SS0 of instance: ecspi1.
 * 011 - Select mux mode: ALT3 mux port: AUD4_RXD of instance: audmux.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[17] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT23.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_ADDR      (REGS_IOMUXC_BASE + 0xf4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[3] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[3] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: SS0 of instance: ecspi3.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[24] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_ADDR      (REGS_IOMUXC_BASE + 0xf8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat4_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[4] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[4] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: SS1 of instance: ecspi3.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[25] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT4.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT5.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_ADDR      (REGS_IOMUXC_BASE + 0xfc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat5_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT5.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[5] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[5] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: SS2 of instance: ecspi3.
 * 011 - Select mux mode: ALT3 mux port: AUD6_RXFS of instance: audmux.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[26] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT5.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT6.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_ADDR      (REGS_IOMUXC_BASE + 0x100)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat6_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT6.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[6] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[6] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: SS3 of instance: ecspi3.
 * 011 - Select mux mode: ALT3 mux port: AUD6_RXC of instance: audmux.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[27] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT6.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT7.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_ADDR      (REGS_IOMUXC_BASE + 0x104)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat7_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT7.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[7] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[7] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: RDY of instance: ecspi3.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[28] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT7.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT8.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat8_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_ADDR      (REGS_IOMUXC_BASE + 0x108)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat8_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT8.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[8] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[8] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: PWMO of instance: pwm1.
 * 011 - Select mux mode: ALT3 mux port: WDOG_B of instance: wdog1.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[29] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT8.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT9.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat9_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_ADDR      (REGS_IOMUXC_BASE + 0x10c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat9_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: DISP0_DAT9.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DISP0_DAT[9] of instance: ipu1.
 * 001 - Select mux mode: ALT1 mux port: DAT[9] of instance: lcdif.
 * 010 - Select mux mode: ALT2 mux port: PWMO of instance: pwm2.
 * 011 - Select mux mode: ALT3 mux port: WDOG_B of instance: wdog2.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[30] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad DISP0_DAT9.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A16. NOTE: Pad EIM_A16 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a16_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_ADDR      (REGS_IOMUXC_BASE + 0x110)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a16_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A16. NOTE: Pad EIM_A16
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_A[16] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_DISP_CLK of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[0] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_PIXCLK of instance: ipu1.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[22] of instance: gpio2.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[16] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_A16.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A16, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A17. NOTE: Pad EIM_A17 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a17_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_ADDR      (REGS_IOMUXC_BASE + 0x114)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a17_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A17. NOTE: Pad EIM_A17
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_A[17] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[12] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: PWRSTAT of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[12] of instance: ipu1.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[21] of instance: gpio2.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[17] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_A17.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A17, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A18. NOTE: Pad EIM_A18 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a18_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_ADDR      (REGS_IOMUXC_BASE + 0x118)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a18_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A18. NOTE: Pad EIM_A18
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_A[18] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[13] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: PWRCTRL[0] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[13] of instance: ipu1.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[20] of instance: gpio2.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[18] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_A18.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A18, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A19. NOTE: Pad EIM_A19 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a19_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_ADDR      (REGS_IOMUXC_BASE + 0x11c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a19_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A19. NOTE: Pad EIM_A19
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_A[19] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[14] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: PWRCTRL[1] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[14] of instance: ipu1.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[19] of instance: gpio2.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[19] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_A19.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A19, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A20. NOTE: Pad EIM_A20 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a20_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_ADDR      (REGS_IOMUXC_BASE + 0x120)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a20_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A20. NOTE: Pad EIM_A20
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_A[20] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[15] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: PWRCTRL[2] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[15] of instance: ipu1.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[18] of instance: gpio2.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[20] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_A20.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A20, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A21. NOTE: Pad EIM_A21 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a21_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_ADDR      (REGS_IOMUXC_BASE + 0x124)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a21_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A21. NOTE: Pad EIM_A21
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_A[21] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[16] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: GDCLK of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[16] of instance: ipu1.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[17] of instance: gpio2.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[21] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_A21.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A21, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: EIM_A22. NOTE: Pad EIM_A22 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a22_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_ADDR      (REGS_IOMUXC_BASE + 0x128)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a22_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: EIM_A22. NOTE: Pad EIM_A22
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_A[22] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[17] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: GDSP of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[17] of instance: ipu1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[16] of instance: gpio2.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[22] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_A22.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A22, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A23. NOTE: Pad EIM_A23 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a23_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_ADDR      (REGS_IOMUXC_BASE + 0x12c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a23_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A23. NOTE: Pad EIM_A23
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_A[23] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[18] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: GDOE of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[18] of instance: ipu1.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[6] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[23] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_A23.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A23, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A24. NOTE: Pad EIM_A24 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a24_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_ADDR      (REGS_IOMUXC_BASE + 0x130)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a24_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_A24. NOTE: Pad EIM_A24
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_A[24] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[19] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: GDRL of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[19] of instance: ipu1.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[4] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[24] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_A24.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A24, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 10 iomux modes to be used for pad: EIM_A25. NOTE: Pad EIM_A25 is involved in Daisy Chain. - Config IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT for mode ALT6.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a25_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_ADDR      (REGS_IOMUXC_BASE + 0x134)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a25_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 10 iomux modes to be used for pad: EIM_A25. NOTE: Pad EIM_A25
 * is involved in Daisy Chain. - Config IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT for mode ALT6.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_A[25] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: SS1 of instance: ecspi4.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[15] of instance: epdc.
 * 1001 - Select mux mode: ALT9 mux port: ACLK_FREERUN of instance: weim.
 * 010 - Select mux mode: ALT2 mux port: RDY of instance: ecspi2.
 * 011 - Select mux mode: ALT3 mux port: DI1_PIN12 of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: DI0_D1_CS of instance: ipu1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[2] of instance: gpio5.
 * 110 - Select mux mode: ALT6 mux port: CEC_LINE of instance: hdmi_tx.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_A25.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_A25, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: EIM_BCLK.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_bclk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_ADDR      (REGS_IOMUXC_BASE + 0x138)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_bclk_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: EIM_BCLK.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_BCLK of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN16 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDCE[9] of instance: epdc.
 * 101 - Select mux mode: ALT5 mux port: GPIO[31] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_BCLK.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: EIM_CS0. NOTE: Pad EIM_CS0 is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_cs0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_ADDR      (REGS_IOMUXC_BASE + 0x13c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_cs0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: EIM_CS0. NOTE: Pad EIM_CS0
 * is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_CS[0] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN5 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[6] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: SCLK of instance: ecspi2.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[23] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_CS0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: EIM_CS1. NOTE: Pad EIM_CS1 is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_cs1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_ADDR      (REGS_IOMUXC_BASE + 0x140)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_cs1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: EIM_CS1. NOTE: Pad EIM_CS1
 * is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_CS[1] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN6 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[8] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: MOSI of instance: ecspi2.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[24] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_CS1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_CS1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D16. NOTE: Pad EIM_D16 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT1. - Config IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT for mode ALT4. - Config IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT for mode ALT6. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT for mode ALT3.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d16_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_ADDR      (REGS_IOMUXC_BASE + 0x144)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d16_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D16. NOTE: Pad EIM_D16
 * is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT1. -
 * Config IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT for mode ALT4. - Config
 * IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT for mode ALT6. - Config
 * IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[16] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: SCLK of instance: ecspi1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[10] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: DI0_PIN5 of instance: ipu1.
 * 011 - Select mux mode: ALT3 mux port: CSI1_D[18] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: DDC_SDA of instance: hdmi_tx.
 * 101 - Select mux mode: ALT5 mux port: GPIO[16] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: SDA of instance: i2c2.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D16.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D16, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D17. NOTE: Pad EIM_D17 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT for mode ALT1. - Config IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT for mode ALT6. - Config IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT for mode ALT3.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d17_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_ADDR      (REGS_IOMUXC_BASE + 0x148)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d17_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D17. NOTE: Pad EIM_D17
 * is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT for mode ALT1. -
 * Config IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT for mode ALT6. - Config
 * IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[17] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: MISO of instance: ecspi1.
 * 1000 - Select mux mode: ALT8 mux port: VCOM[0] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: DI0_PIN6 of instance: ipu1.
 * 011 - Select mux mode: ALT3 mux port: CSI1_PIXCLK of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: DCIC_OUT of instance: dcic1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[17] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: SCL of instance: i2c3.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D17.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D17, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D18. NOTE: Pad EIM_D18 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT for mode ALT1. - Config IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT for mode ALT6. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT for mode ALT3.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d18_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_ADDR      (REGS_IOMUXC_BASE + 0x14c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d18_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D18. NOTE: Pad EIM_D18
 * is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT for mode ALT1. -
 * Config IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT for mode ALT6. - Config
 * IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[18] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: MOSI of instance: ecspi1.
 * 1000 - Select mux mode: ALT8 mux port: VCOM[1] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: DI0_PIN7 of instance: ipu1.
 * 011 - Select mux mode: ALT3 mux port: CSI1_D[17] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: DI1_D0_CS of instance: ipu1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[18] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: SDA of instance: i2c3.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D18.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D18, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D19. NOTE: Pad EIM_D19 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT for mode ALT1. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT for mode ALT3. - Config IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d19_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_ADDR      (REGS_IOMUXC_BASE + 0x150)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d19_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D19. NOTE: Pad EIM_D19
 * is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT for mode ALT1. -
 * Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT for mode ALT3. - Config
 * IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[19] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: SS1 of instance: ecspi1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[12] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: DI0_PIN8 of instance: ipu1.
 * 011 - Select mux mode: ALT3 mux port: CSI1_D[16] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: CTS of instance: uart1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[19] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: EPITO of instance: epit1.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D19.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D19, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_D20. NOTE: Pad EIM_D20 is involved in Daisy Chain. - Config IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT1. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT for mode ALT3. - Config IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d20_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_ADDR      (REGS_IOMUXC_BASE + 0x154)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d20_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_D20. NOTE: Pad EIM_D20
 * is involved in Daisy Chain. - Config IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT1. -
 * Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT for mode ALT3. - Config
 * IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[20] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: SS0 of instance: ecspi4.
 * 010 - Select mux mode: ALT2 mux port: DI0_PIN16 of instance: ipu1.
 * 011 - Select mux mode: ALT3 mux port: CSI1_D[15] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: RTS of instance: uart1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[20] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: EPITO of instance: epit2.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D20.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D20, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_D21. NOTE: Pad EIM_D21 is involved in Daisy Chain. - Config IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT for mode ALT6. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT for mode ALT3. - Config IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT for mode ALT7. - Config IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d21_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_ADDR      (REGS_IOMUXC_BASE + 0x158)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d21_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_D21. NOTE: Pad EIM_D21
 * is involved in Daisy Chain. - Config IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT for mode ALT6. - Config
 * IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT for mode ALT3. - Config
 * IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT for mode ALT7. - Config
 * IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[21] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: SCLK of instance: ecspi4.
 * 010 - Select mux mode: ALT2 mux port: DI0_PIN17 of instance: ipu1.
 * 011 - Select mux mode: ALT3 mux port: CSI1_D[11] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: USBOTG_OC of instance: usboh3.
 * 101 - Select mux mode: ALT5 mux port: GPIO[21] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: SCL of instance: i2c1.
 * 111 - Select mux mode: ALT7 mux port: IN1 of instance: spdif.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D21.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D21, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D22. NOTE: Pad EIM_D22 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT for mode ALT3.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d22_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_ADDR      (REGS_IOMUXC_BASE + 0x15c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d22_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D22. NOTE: Pad EIM_D22
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT for mode
 * ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[22] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: MISO of instance: ecspi4.
 * 1000 - Select mux mode: ALT8 mux port: SDCE[6] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: DI0_PIN1 of instance: ipu1.
 * 011 - Select mux mode: ALT3 mux port: CSI1_D[10] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: USBOTG_PWR of instance: usboh3.
 * 101 - Select mux mode: ALT5 mux port: GPIO[22] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: OUT1 of instance: spdif.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D22.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D22, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D23. NOTE: Pad EIM_D23 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT for mode ALT4. - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d23_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_ADDR      (REGS_IOMUXC_BASE + 0x160)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d23_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D23. NOTE: Pad EIM_D23
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT for mode
 * ALT4. - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[23] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI0_D0_CS of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[11] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CTS of instance: uart3.
 * 011 - Select mux mode: ALT3 mux port: DCD of instance: uart1.
 * 100 - Select mux mode: ALT4 mux port: CSI1_DATA_EN of instance: ipu1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[23] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: DI1_PIN2 of instance: ipu1.
 * 111 - Select mux mode: ALT7 mux port: DI1_PIN14 of instance: ipu1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D23.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D23, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D24. NOTE: Pad EIM_D24 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT for mode ALT6. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT for mode ALT3. - Config IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d24_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_ADDR      (REGS_IOMUXC_BASE + 0x164)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d24_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D24. NOTE: Pad EIM_D24
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT for mode ALT6.
 * - Config IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT for mode ALT3. - Config
 * IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[24] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: SS2 of instance: ecspi4.
 * 1000 - Select mux mode: ALT8 mux port: SDCE[7] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: TXD_MUX of instance: uart3.
 * 011 - Select mux mode: ALT3 mux port: SS2 of instance: ecspi1.
 * 100 - Select mux mode: ALT4 mux port: SS2 of instance: ecspi2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[24] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: AUD5_RXFS of instance: audmux.
 * 111 - Select mux mode: ALT7 mux port: DTR of instance: uart1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D24.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D24, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D25. NOTE: Pad EIM_D25 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT for mode ALT6. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT for mode ALT3. - Config IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d25_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_ADDR      (REGS_IOMUXC_BASE + 0x168)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d25_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D25. NOTE: Pad EIM_D25
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT for mode ALT6.
 * - Config IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT for mode ALT3. - Config
 * IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[25] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: SS3 of instance: ecspi4.
 * 1000 - Select mux mode: ALT8 mux port: SDCE[8] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: RXD_MUX of instance: uart3.
 * 011 - Select mux mode: ALT3 mux port: SS3 of instance: ecspi1.
 * 100 - Select mux mode: ALT4 mux port: SS3 of instance: ecspi2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[25] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: AUD5_RXC of instance: audmux.
 * 111 - Select mux mode: ALT7 mux port: DSR of instance: uart1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D25.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D25, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D26. NOTE: Pad EIM_D26 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT for mode ALT3. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d26_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_ADDR      (REGS_IOMUXC_BASE + 0x16c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d26_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D26. NOTE: Pad EIM_D26
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT for mode
 * ALT3. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[26] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN11 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDOED of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI0_D[1] of instance: ipu1.
 * 011 - Select mux mode: ALT3 mux port: CSI1_D[14] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: TXD_MUX of instance: uart2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[26] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: DISP1_DAT[22] of instance: ipu1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D26.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D26, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D27. NOTE: Pad EIM_D27 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT for mode ALT3. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d27_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_ADDR      (REGS_IOMUXC_BASE + 0x170)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d27_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D27. NOTE: Pad EIM_D27
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT for mode
 * ALT3. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[27] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN13 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDOE of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI0_D[0] of instance: ipu1.
 * 011 - Select mux mode: ALT3 mux port: CSI1_D[13] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: RXD_MUX of instance: uart2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[27] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: DISP1_DAT[23] of instance: ipu1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D27.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D27, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D28. NOTE: Pad EIM_D28 is involved in Daisy Chain. - Config IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT for mode ALT1. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT for mode ALT3. - Config IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d28_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_ADDR      (REGS_IOMUXC_BASE + 0x174)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d28_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D28. NOTE: Pad EIM_D28
 * is involved in Daisy Chain. - Config IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT for mode ALT1. - Config
 * IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT for mode ALT3. - Config
 * IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[28] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: SDA of instance: i2c1.
 * 1000 - Select mux mode: ALT8 mux port: PWRCTRL[3] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: MOSI of instance: ecspi4.
 * 011 - Select mux mode: ALT3 mux port: CSI1_D[12] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: CTS of instance: uart2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[28] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: DI0_PIN13 of instance: ipu1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D28.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D28, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_D29. NOTE: Pad EIM_D29 is involved in Daisy Chain. - Config IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT2. - Config IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT for mode ALT6. - Config IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d29_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_ADDR      (REGS_IOMUXC_BASE + 0x178)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d29_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_D29. NOTE: Pad EIM_D29
 * is involved in Daisy Chain. - Config IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT2. -
 * Config IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT for mode ALT6. - Config
 * IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[29] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN15 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: PWRWAKE of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: SS0 of instance: ecspi4.
 * 100 - Select mux mode: ALT4 mux port: RTS of instance: uart2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[29] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: CSI1_VSYNC of instance: ipu1.
 * 111 - Select mux mode: ALT7 mux port: DI0_PIN14 of instance: ipu1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D29.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D29, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D30. NOTE: Pad EIM_D30 is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4. - Config IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT for mode ALT6.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d30_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_ADDR      (REGS_IOMUXC_BASE + 0x17c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d30_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_D30. NOTE: Pad EIM_D30
 * is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4. -
 * Config IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT for mode ALT6.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[30] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[21] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDOEZ of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: DI0_PIN11 of instance: ipu1.
 * 011 - Select mux mode: ALT3 mux port: CSI0_D[3] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: CTS of instance: uart3.
 * 101 - Select mux mode: ALT5 mux port: GPIO[30] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: USBH1_OC of instance: usboh3.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D30.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D30, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 10 iomux modes to be used for pad: EIM_D31. NOTE: Pad EIM_D31 is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d31_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_ADDR      (REGS_IOMUXC_BASE + 0x180)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d31_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 10 iomux modes to be used for pad: EIM_D31. NOTE: Pad EIM_D31
 * is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_D[31] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[20] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDCLK of instance: epdc.
 * 1001 - Select mux mode: ALT9 mux port: ACLK_FREERUN of instance: weim.
 * 010 - Select mux mode: ALT2 mux port: DI0_PIN12 of instance: ipu1.
 * 011 - Select mux mode: ALT3 mux port: CSI0_D[2] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: RTS of instance: uart3.
 * 101 - Select mux mode: ALT5 mux port: GPIO[31] of instance: gpio3.
 * 110 - Select mux mode: ALT6 mux port: USBH1_PWR of instance: usboh3.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_D31.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_D31, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA0.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_ADDR      (REGS_IOMUXC_BASE + 0x184)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[0] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[9] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDCLKN of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[9] of instance: ipu1.
 * 011 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[0] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[0] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA1.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_ADDR      (REGS_IOMUXC_BASE + 0x188)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[1] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[8] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDLE of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[8] of instance: ipu1.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[1] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[1] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA10. NOTE: Pad EIM_DA10 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da10_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_ADDR      (REGS_IOMUXC_BASE + 0x18c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da10_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA10. NOTE: Pad EIM_DA10
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[10] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN15 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[1] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_DATA_EN of instance: ipu1.
 * 011 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[10] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[10] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA10.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA10, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA11. NOTE: Pad EIM_DA11 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da11_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_ADDR      (REGS_IOMUXC_BASE + 0x190)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da11_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA11. NOTE: Pad EIM_DA11
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[11] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN2 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[3] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_HSYNC of instance: ipu1.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[11] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[11] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA11.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA11, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA12. NOTE: Pad EIM_DA12 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da12_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_ADDR      (REGS_IOMUXC_BASE + 0x194)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da12_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA12. NOTE: Pad EIM_DA12
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[12] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN3 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[2] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_VSYNC of instance: ipu1.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[12] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[12] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA12.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA12, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA13. NOTE: Pad EIM_DA13 is involved in Daisy Chain. - Config IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da13_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_ADDR      (REGS_IOMUXC_BASE + 0x198)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da13_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA13. NOTE: Pad EIM_DA13
 * is involved in Daisy Chain. - Config IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[13] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_D0_CS of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[13] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: DI1_EXT_CLK of instance: ccm.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[13] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[13] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA13.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA13, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA14.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da14_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_ADDR      (REGS_IOMUXC_BASE + 0x19c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da14_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA14.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[14] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_D1_CS of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[14] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: DI0_EXT_CLK of instance: ccm.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[14] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[14] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA14.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA14, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA15.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da15_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_ADDR      (REGS_IOMUXC_BASE + 0x1a0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da15_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA15.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[15] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN1 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[9] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: DI1_PIN4 of instance: ipu1.
 * 011 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[15] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[15] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA15.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA15, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_ADDR      (REGS_IOMUXC_BASE + 0x1a4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[2] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[7] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: BDR[0] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[7] of instance: ipu1.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[2] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[2] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA3.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_ADDR      (REGS_IOMUXC_BASE + 0x1a8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[3] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[6] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: BDR[1] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[6] of instance: ipu1.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[3] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[3] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA4.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_ADDR      (REGS_IOMUXC_BASE + 0x1ac)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da4_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[4] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[5] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDCE[0] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[5] of instance: ipu1.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[4] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[4] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA4.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA4, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA5.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_ADDR      (REGS_IOMUXC_BASE + 0x1b0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da5_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA5.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[5] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[4] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDCE[1] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[4] of instance: ipu1.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[5] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[5] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA5.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA5, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA6.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_ADDR      (REGS_IOMUXC_BASE + 0x1b4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da6_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_DA6.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[6] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[3] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDCE[2] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[3] of instance: ipu1.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[6] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[6] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA6.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA6, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA7.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_ADDR      (REGS_IOMUXC_BASE + 0x1b8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da7_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA7.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[7] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[2] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDCE[3] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[2] of instance: ipu1.
 * 011 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[7] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[7] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA7.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA7, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA8.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da8_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_ADDR      (REGS_IOMUXC_BASE + 0x1bc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da8_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA8.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[8] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[1] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDCE[4] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[1] of instance: ipu1.
 * 011 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[8] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[8] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA8.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA8, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA9.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da9_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_ADDR      (REGS_IOMUXC_BASE + 0x1c0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da9_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_DA9.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_DA_A[9] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[0] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDCE[5] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[0] of instance: ipu1.
 * 011 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[9] of instance: gpio3.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[9] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_DA9.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_DA9, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_EB0. NOTE: Pad EIM_EB0 is involved in Daisy Chain. - Config IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT for mode ALT4. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_ADDR      (REGS_IOMUXC_BASE + 0x1c4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_EB0. NOTE: Pad EIM_EB0
 * is involved in Daisy Chain. - Config IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT for mode ALT4.
 * - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_EB[0] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[11] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: PWRCOM of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[11] of instance: ipu1.
 * 011 - Reserved.
 * 100 - Select mux mode: ALT4 mux port: PMIC_RDY of instance: ccm.
 * 101 - Select mux mode: ALT5 mux port: GPIO[28] of instance: gpio2.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[27] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_EB0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_EB1. NOTE: Pad EIM_EB1 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_ADDR      (REGS_IOMUXC_BASE + 0x1c8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_EB1. NOTE: Pad EIM_EB1
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_EB[1] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DISP1_DAT[10] of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDSHR of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: CSI1_D[10] of instance: ipu1.
 * 011 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[29] of instance: gpio2.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[28] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_EB1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_EB2. NOTE: Pad EIM_EB2 is involved in Daisy Chain. - Config IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT for mode ALT2. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT1. - Config IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT for mode ALT4. - Config IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT for mode ALT6. - Config IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT for mode ALT3.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_ADDR      (REGS_IOMUXC_BASE + 0x1cc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: EIM_EB2. NOTE: Pad EIM_EB2
 * is involved in Daisy Chain. - Config IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT for mode ALT2. - Config
 * IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT1. - Config
 * IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT for mode ALT4. - Config
 * IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT for mode ALT6. - Config
 * IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_EB[2] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: SS0 of instance: ecspi1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[5] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: DI1_EXT_CLK of instance: ccm.
 * 011 - Select mux mode: ALT3 mux port: CSI1_D[19] of instance: ipu1.
 * 100 - Select mux mode: ALT4 mux port: DDC_SCL of instance: hdmi_tx.
 * 101 - Select mux mode: ALT5 mux port: GPIO[30] of instance: gpio2.
 * 110 - Select mux mode: ALT6 mux port: SCL of instance: i2c2.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[30] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_EB2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 10 iomux modes to be used for pad: EIM_EB3. NOTE: Pad EIM_EB3 is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT for mode ALT4. - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_ADDR      (REGS_IOMUXC_BASE + 0x1d0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 10 iomux modes to be used for pad: EIM_EB3. NOTE: Pad EIM_EB3
 * is involved in Daisy Chain. - Config IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT for mode ALT4.
 * - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_EB[3] of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: RDY of instance: ecspi4.
 * 1000 - Select mux mode: ALT8 mux port: SDCE[0] of instance: epdc.
 * 1001 - Select mux mode: ALT9 mux port: ACLK_FREERUN of instance: weim.
 * 010 - Select mux mode: ALT2 mux port: RTS of instance: uart3.
 * 011 - Select mux mode: ALT3 mux port: RI of instance: uart1.
 * 100 - Select mux mode: ALT4 mux port: CSI1_HSYNC of instance: ipu1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[31] of instance: gpio2.
 * 110 - Select mux mode: ALT6 mux port: DI1_PIN3 of instance: ipu1.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[31] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_EB3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_EB3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: EIM_LBA. NOTE: Pad EIM_LBA is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_lba_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_ADDR      (REGS_IOMUXC_BASE + 0x1d4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_lba_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: EIM_LBA. NOTE: Pad EIM_LBA
 * is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_LBA of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN17 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[4] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: SS1 of instance: ecspi2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[27] of instance: gpio2.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[26] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_LBA.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_LBA, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: EIM_OE. NOTE: Pad EIM_OE is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_oe_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_ADDR      (REGS_IOMUXC_BASE + 0x1d8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_oe_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: EIM_OE. NOTE: Pad EIM_OE is
 * involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_OE of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN7 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: PWRIRQ of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: MISO of instance: ecspi2.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[25] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_OE.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_OE, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_RW. NOTE: Pad EIM_RW is involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_rw_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_ADDR      (REGS_IOMUXC_BASE + 0x1dc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_rw_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: EIM_RW. NOTE: Pad EIM_RW is
 * involved in Daisy Chain. - Config IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_RW of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: DI1_PIN8 of instance: ipu1.
 * 1000 - Select mux mode: ALT8 mux port: SDDO[7] of instance: epdc.
 * 010 - Select mux mode: ALT2 mux port: SS0 of instance: ecspi2.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[26] of instance: gpio2.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[29] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_RW.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_RW, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: EIM_WAIT.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_wait_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_ADDR      (REGS_IOMUXC_BASE + 0x1e0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_wait_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: EIM_WAIT.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: WEIM_WAIT of instance: weim.
 * 001 - Select mux mode: ALT1 mux port: WEIM_DTACK_B of instance: weim.
 * 101 - Select mux mode: ALT5 mux port: GPIO[0] of instance: gpio5.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: BT_CFG[25] of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad EIM_WAIT.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: ENET_CRS_DV. NOTE: Pad ENET_CRS_DV is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT for mode ALT1. - Config IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT for mode ALT2. - Config IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_crs_dv_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_ADDR      (REGS_IOMUXC_BASE + 0x1e4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_crs_dv_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: ENET_CRS_DV. NOTE: Pad
 * ENET_CRS_DV is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT for
 * mode ALT1. - Config IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT for mode ALT2. - Config
 * IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 001 - Select mux mode: ALT1 mux port: RX_EN of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: SCKT of instance: esai.
 * 011 - Select mux mode: ALT3 mux port: SPDIF_EXTCLK of instance: spdif.
 * 101 - Select mux mode: ALT5 mux port: GPIO[25] of instance: gpio1.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad ENET_CRS_DV.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: ENET_MDC. NOTE: Pad ENET_MDC is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT for mode ALT2. - Config IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT for mode ALT0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_mdc_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_ADDR      (REGS_IOMUXC_BASE + 0x1e8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_mdc_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: ENET_MDC. NOTE: Pad ENET_MDC
 * is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT for mode ALT2. -
 * Config IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT for mode ALT0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: MLBDAT of instance: mlb.
 * 001 - Select mux mode: ALT1 mux port: MDC of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: TX5_RX0 of instance: esai.
 * 100 - Select mux mode: ALT4 mux port: 1588_EVENT1_IN of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[31] of instance: gpio1.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad ENET_MDC.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDC, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: ENET_MDIO. NOTE: Pad ENET_MDIO is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT for mode ALT1. - Config IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_mdio_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_ADDR      (REGS_IOMUXC_BASE + 0x1ec)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_mdio_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: ENET_MDIO. NOTE: Pad
 * ENET_MDIO is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT for
 * mode ALT1. - Config IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 001 - Select mux mode: ALT1 mux port: MDIO of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: SCKR of instance: esai.
 * 011 - Reserved.
 * 100 - Select mux mode: ALT4 mux port: 1588_EVENT1_OUT of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[22] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: PLOCK of instance: spdif.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad ENET_MDIO.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: ENET_REF_CLK. NOTE: Pad ENET_REF_CLK is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_ref_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_ADDR      (REGS_IOMUXC_BASE + 0x1f0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_ref_clk_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: ENET_REF_CLK. NOTE: Pad
 * ENET_REF_CLK is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 001 - Select mux mode: ALT1 mux port: TX_CLK of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: FSR of instance: esai.
 * 011 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[23] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: SRCLK of instance: spdif.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad ENET_REF_CLK.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: ENET_RX_ER. NOTE: Pad ENET_RX_ER is involved in Daisy Chain. - Config IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT for mode ALT0. - Config IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT for mode ALT2. - Config IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_rx_er_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_ADDR      (REGS_IOMUXC_BASE + 0x1f4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_rx_er_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: ENET_RX_ER. NOTE: Pad
 * ENET_RX_ER is involved in Daisy Chain. - Config IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT for mode
 * ALT0. - Config IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT for mode ALT2. - Config
 * IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: USBOTG_ID of instance: anatop.
 * 001 - Select mux mode: ALT1 mux port: RX_ER of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: HCKR of instance: esai.
 * 011 - Select mux mode: ALT3 mux port: IN1 of instance: spdif.
 * 100 - Select mux mode: ALT4 mux port: 1588_EVENT2_OUT of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[24] of instance: gpio1.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad ENET_RX_ER.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: ENET_RXD0. NOTE: Pad ENET_RXD0 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT for mode ALT1. - Config IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_rxd0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_ADDR      (REGS_IOMUXC_BASE + 0x1f8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_rxd0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: ENET_RXD0. NOTE: Pad
 * ENET_RXD0 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT for
 * mode ALT1. - Config IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Reserved.
 * 001 - Select mux mode: ALT1 mux port: RDATA[0] of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: HCKT of instance: esai.
 * 011 - Select mux mode: ALT3 mux port: OUT1 of instance: spdif.
 * 101 - Select mux mode: ALT5 mux port: GPIO[27] of instance: gpio1.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad ENET_RXD0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: ENET_RXD1. NOTE: Pad ENET_RXD1 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT for mode ALT1. - Config IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT for mode ALT2. - Config IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT for mode ALT0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_rxd1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_ADDR      (REGS_IOMUXC_BASE + 0x1fc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_rxd1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: ENET_RXD1. NOTE: Pad
 * ENET_RXD1 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT for
 * mode ALT1. - Config IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT for mode ALT2. - Config
 * IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT for mode ALT0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: MLBSIG of instance: mlb.
 * 001 - Select mux mode: ALT1 mux port: RDATA[1] of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: FST of instance: esai.
 * 100 - Select mux mode: ALT4 mux port: 1588_EVENT3_OUT of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[26] of instance: gpio1.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad ENET_RXD1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: ENET_TX_EN. NOTE: Pad ENET_TX_EN is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT for mode ALT2. - Config IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT for mode ALT9.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_tx_en_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_ADDR      (REGS_IOMUXC_BASE + 0x200)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_tx_en_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: ENET_TX_EN. NOTE: Pad
 * ENET_TX_EN is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT for
 * mode ALT2. - Config IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT for mode ALT9.
 *
 * Values:
 * 001 - Select mux mode: ALT1 mux port: TX_EN of instance: enet.
 * 1001 - Select mux mode: ALT9 mux port: SCL of instance: i2c4.
 * 010 - Select mux mode: ALT2 mux port: TX3_RX2 of instance: esai.
 * 101 - Select mux mode: ALT5 mux port: GPIO[28] of instance: gpio1.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad ENET_TX_EN.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: ENET_TXD0. NOTE: Pad ENET_TXD0 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_txd0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_ADDR      (REGS_IOMUXC_BASE + 0x204)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_txd0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: ENET_TXD0. NOTE: Pad
 * ENET_TXD0 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT for
 * mode ALT2.
 *
 * Values:
 * 001 - Select mux mode: ALT1 mux port: TDATA[0] of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: TX4_RX1 of instance: esai.
 * 101 - Select mux mode: ALT5 mux port: GPIO[30] of instance: gpio1.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad ENET_TXD0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: ENET_TXD1. NOTE: Pad ENET_TXD1 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT for mode ALT2. - Config IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT for mode ALT9. - Config IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT for mode ALT0.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_txd1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_ADDR      (REGS_IOMUXC_BASE + 0x208)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_txd1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: ENET_TXD1. NOTE: Pad
 * ENET_TXD1 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT for
 * mode ALT2. - Config IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT for mode ALT9. - Config
 * IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT for mode ALT0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: MLBCLK of instance: mlb.
 * 001 - Select mux mode: ALT1 mux port: TDATA[1] of instance: enet.
 * 1001 - Select mux mode: ALT9 mux port: SDA of instance: i2c4.
 * 010 - Select mux mode: ALT2 mux port: TX2_RX3 of instance: esai.
 * 100 - Select mux mode: ALT4 mux port: 1588_EVENT0_IN of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[29] of instance: gpio1.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad ENET_TXD1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: GPIO_0. NOTE: Pad GPIO_0 is involved in Daisy Chain. - Config IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT for mode ALT3. - Config IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_ADDR      (REGS_IOMUXC_BASE + 0x20c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: GPIO_0. NOTE: Pad GPIO_0 is
 * involved in Daisy Chain. - Config IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT for mode ALT3. - Config
 * IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CLKO of instance: ccm.
 * 010 - Select mux mode: ALT2 mux port: COL[5] of instance: kpp.
 * 011 - Select mux mode: ALT3 mux port: ASRC_EXT_CLK of instance: asrc.
 * 100 - Select mux mode: ALT4 mux port: EPITO of instance: epit1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[0] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: USBH1_PWR of instance: usboh3.
 * 111 - Select mux mode: ALT7 mux port: SNVS_VIO_5 of instance: snvs_hp_wrapper.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_1. NOTE: Pad GPIO_1 is involved in Daisy Chain. - Config IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT for mode ALT3. - Config IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT for mode ALT0. - Config IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_ADDR      (REGS_IOMUXC_BASE + 0x210)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_1. NOTE: Pad GPIO_1 is
 * involved in Daisy Chain. - Config IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT for mode ALT3. - Config
 * IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: SCKR of instance: esai.
 * 001 - Select mux mode: ALT1 mux port: WDOG_B of instance: wdog2.
 * 010 - Select mux mode: ALT2 mux port: ROW[5] of instance: kpp.
 * 011 - Select mux mode: ALT3 mux port: USBOTG_ID of instance: anatop.
 * 100 - Select mux mode: ALT4 mux port: PWMO of instance: pwm2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[1] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: CD of instance: usdhc1.
 * 111 - Select mux mode: ALT7 mux port: TESTER_ACK of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_16. NOTE: Pad GPIO_16 is involved in Daisy Chain. - Config IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT for mode ALT2. - Config IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT for mode ALT0. - Config IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT for mode ALT6. - Config IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_16_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_ADDR      (REGS_IOMUXC_BASE + 0x214)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_16_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_16. NOTE: Pad GPIO_16
 * is involved in Daisy Chain. - Config IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT for mode ALT2. -
 * Config IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT for mode ALT6. - Config IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT
 * for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: TX3_RX2 of instance: esai.
 * 001 - Select mux mode: ALT1 mux port: 1588_EVENT2_IN of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: ANATOP_ETHERNET_REF_OUT of instance: enet.
 * 011 - Select mux mode: ALT3 mux port: LCTL of instance: usdhc1.
 * 100 - Select mux mode: ALT4 mux port: IN1 of instance: spdif.
 * 101 - Select mux mode: ALT5 mux port: GPIO[11] of instance: gpio7.
 * 110 - Select mux mode: ALT6 mux port: SDA of instance: i2c3.
 * 111 - Select mux mode: ALT7 mux port: DE_B of instance: sjc.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_16.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_16, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: GPIO_17. NOTE: Pad GPIO_17 is involved in Daisy Chain. - Config IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT for mode ALT2. - Config IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT for mode ALT0. - Config IOMUXC_SDMA_EVENTS_14_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_17_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_ADDR      (REGS_IOMUXC_BASE + 0x218)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_17_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: GPIO_17. NOTE: Pad GPIO_17
 * is involved in Daisy Chain. - Config IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT for mode ALT2.
 * - Config IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_SDMA_EVENTS_14_SELECT_INPUT for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: TX0 of instance: esai.
 * 001 - Select mux mode: ALT1 mux port: 1588_EVENT3_IN of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: PMIC_RDY of instance: ccm.
 * 011 - Select mux mode: ALT3 mux port: SDMA_EXT_EVENT[0] of instance: sdma.
 * 100 - Select mux mode: ALT4 mux port: OUT1 of instance: spdif.
 * 101 - Select mux mode: ALT5 mux port: GPIO[12] of instance: gpio7.
 * 111 - Select mux mode: ALT7 mux port: JTAG_ACT of instance: sjc.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_17.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_17, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_18. NOTE: Pad GPIO_18 is involved in Daisy Chain. - Config IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT for mode ALT4. - Config IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT for mode ALT1. - Config IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT for mode ALT0. - Config IOMUXC_SDMA_EVENTS_15_SELECT_INPUT for mode ALT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_18_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_ADDR      (REGS_IOMUXC_BASE + 0x21c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_18_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_18. NOTE: Pad GPIO_18
 * is involved in Daisy Chain. - Config IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT for mode ALT4. -
 * Config IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT for mode ALT1. - Config
 * IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT for mode ALT0. - Config IOMUXC_SDMA_EVENTS_15_SELECT_INPUT
 * for mode ALT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: TX1 of instance: esai.
 * 001 - Select mux mode: ALT1 mux port: RX_CLK of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: VSELECT of instance: usdhc3.
 * 011 - Select mux mode: ALT3 mux port: SDMA_EXT_EVENT[1] of instance: sdma.
 * 100 - Select mux mode: ALT4 mux port: ASRC_EXT_CLK of instance: asrc.
 * 101 - Select mux mode: ALT5 mux port: GPIO[13] of instance: gpio7.
 * 110 - Select mux mode: ALT6 mux port: SNVS_VIO_5_CTL of instance: snvs_hp_wrapper.
 * 111 - Select mux mode: ALT7 mux port: SYSTEM_RST of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_18.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_18, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_19. NOTE: Pad GPIO_19 is involved in Daisy Chain. - Config IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT for mode ALT0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_19_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_ADDR      (REGS_IOMUXC_BASE + 0x220)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_19_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_19. NOTE: Pad GPIO_19
 * is involved in Daisy Chain. - Config IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT for mode ALT0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: COL[5] of instance: kpp.
 * 001 - Select mux mode: ALT1 mux port: 1588_EVENT0_OUT of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: OUT1 of instance: spdif.
 * 011 - Select mux mode: ALT3 mux port: CLKO of instance: ccm.
 * 100 - Select mux mode: ALT4 mux port: RDY of instance: ecspi1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[5] of instance: gpio4.
 * 110 - Select mux mode: ALT6 mux port: TX_ER of instance: enet.
 * 111 - Select mux mode: ALT7 mux port: INT_BOOT of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_19.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_19, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_2. NOTE: Pad GPIO_2 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT for mode ALT0. - Config IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT for mode ALT2. - Config IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT for mode ALT7.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_ADDR      (REGS_IOMUXC_BASE + 0x224)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_2. NOTE: Pad GPIO_2 is
 * involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT for mode ALT2. - Config IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT
 * for mode ALT7.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: FST of instance: esai.
 * 001 - Reserved.
 * 010 - Select mux mode: ALT2 mux port: ROW[6] of instance: kpp.
 * 011 - Reserved.
 * 100 - Select mux mode: ALT4 mux port: CSU_ALARM_AUT[0] of instance: csu.
 * 101 - Select mux mode: ALT5 mux port: GPIO[2] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: WP of instance: usdhc2.
 * 111 - Select mux mode: ALT7 mux port: MLBDAT of instance: mlb.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_3. NOTE: Pad GPIO_3 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT for mode ALT0. - Config IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT for mode ALT2. - Config IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT for mode ALT7. - Config IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT for mode ALT6.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_ADDR      (REGS_IOMUXC_BASE + 0x228)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_3. NOTE: Pad GPIO_3 is
 * involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT for mode ALT2. - Config IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT
 * for mode ALT7. - Config IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT for mode ALT6.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: HCKR of instance: esai.
 * 001 - Reserved.
 * 010 - Select mux mode: ALT2 mux port: SCL of instance: i2c3.
 * 011 - Reserved.
 * 100 - Select mux mode: ALT4 mux port: CLKO2 of instance: ccm.
 * 101 - Select mux mode: ALT5 mux port: GPIO[3] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: USBH1_OC of instance: usboh3.
 * 111 - Select mux mode: ALT7 mux port: MLBCLK of instance: mlb.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_4. NOTE: Pad GPIO_4 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT for mode ALT0. - Config IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_ADDR      (REGS_IOMUXC_BASE + 0x22c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_4_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_4. NOTE: Pad GPIO_4 is
 * involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: HCKT of instance: esai.
 * 001 - Reserved.
 * 010 - Select mux mode: ALT2 mux port: COL[7] of instance: kpp.
 * 011 - Reserved.
 * 100 - Select mux mode: ALT4 mux port: CSU_ALARM_AUT[1] of instance: csu.
 * 101 - Select mux mode: ALT5 mux port: GPIO[4] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: CD of instance: usdhc2.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_4.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_4, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_5. NOTE: Pad GPIO_5 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT for mode ALT0. - Config IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT for mode ALT6. - Config IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_ADDR      (REGS_IOMUXC_BASE + 0x230)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_5_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_5. NOTE: Pad GPIO_5 is
 * involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT for mode ALT0. -
 * Config IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT for mode ALT6. - Config
 * IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: TX2_RX3 of instance: esai.
 * 001 - Reserved.
 * 010 - Select mux mode: ALT2 mux port: ROW[7] of instance: kpp.
 * 011 - Select mux mode: ALT3 mux port: CLKO of instance: ccm.
 * 100 - Select mux mode: ALT4 mux port: CSU_ALARM_AUT[2] of instance: csu.
 * 101 - Select mux mode: ALT5 mux port: GPIO[5] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: SCL of instance: i2c3.
 * 111 - Select mux mode: ALT7 mux port: EVENTI of instance: simba.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_5.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_5, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_6. NOTE: Pad GPIO_6 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT for mode ALT0. - Config IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT for mode ALT2. - Config IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT for mode ALT7.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_ADDR      (REGS_IOMUXC_BASE + 0x234)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_6_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_6. NOTE: Pad GPIO_6 is
 * involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT for mode ALT2. - Config IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT
 * for mode ALT7.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: SCKT of instance: esai.
 * 001 - Reserved.
 * 010 - Select mux mode: ALT2 mux port: SDA of instance: i2c3.
 * 011 - Reserved.
 * 100 - Select mux mode: ALT4 mux port: CSU_INT_DEB of instance: csu.
 * 101 - Select mux mode: ALT5 mux port: GPIO[6] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: LCTL of instance: usdhc2.
 * 111 - Select mux mode: ALT7 mux port: MLBSIG of instance: mlb.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_6.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_6, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_7. NOTE: Pad GPIO_7 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT for mode ALT0. - Config IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT for mode ALT8. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_ADDR      (REGS_IOMUXC_BASE + 0x238)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_7_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_7. NOTE: Pad GPIO_7 is
 * involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT for mode ALT0. -
 * Config IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT for mode ALT8. - Config
 * IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: TX4_RX1 of instance: esai.
 * 1000 - Select mux mode: ALT8 mux port: SCL of instance: i2c4.
 * 010 - Select mux mode: ALT2 mux port: EPITO of instance: epit1.
 * 011 - Select mux mode: ALT3 mux port: TXCAN of instance: can1.
 * 100 - Select mux mode: ALT4 mux port: TXD_MUX of instance: uart2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[7] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: PLOCK of instance: spdif.
 * 111 - Select mux mode: ALT7 mux port: OTGUSB_HOST_MODE of instance: usboh3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_7.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_7, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: GPIO_8. NOTE: Pad GPIO_8 is involved in Daisy Chain. - Config IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT for mode ALT3. - Config IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT for mode ALT0. - Config IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT for mode ALT8. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_8_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_ADDR      (REGS_IOMUXC_BASE + 0x23c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_8_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: GPIO_8. NOTE: Pad GPIO_8 is
 * involved in Daisy Chain. - Config IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT for mode ALT3. - Config
 * IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT for mode ALT8. - Config
 * IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: TX5_RX0 of instance: esai.
 * 001 - Reserved.
 * 1000 - Select mux mode: ALT8 mux port: SDA of instance: i2c4.
 * 010 - Select mux mode: ALT2 mux port: EPITO of instance: epit2.
 * 011 - Select mux mode: ALT3 mux port: RXCAN of instance: can1.
 * 100 - Select mux mode: ALT4 mux port: RXD_MUX of instance: uart2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[8] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: SRCLK of instance: spdif.
 * 111 - Select mux mode: ALT7 mux port: OTGUSB_PWRCTL_WAKEUP of instance: usboh3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_8.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_8, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_9. NOTE: Pad GPIO_9 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT for mode ALT0. - Config IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT for mode ALT2. - Config IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT for mode ALT6.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_9_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_ADDR      (REGS_IOMUXC_BASE + 0x240)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_9_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: GPIO_9. NOTE: Pad GPIO_9 is
 * involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT for mode ALT2. - Config
 * IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT for mode ALT6.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: FSR of instance: esai.
 * 001 - Select mux mode: ALT1 mux port: WDOG_B of instance: wdog1.
 * 010 - Select mux mode: ALT2 mux port: COL[6] of instance: kpp.
 * 011 - Select mux mode: ALT3 mux port: REF_EN_B of instance: ccm.
 * 100 - Select mux mode: ALT4 mux port: PWMO of instance: pwm1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[9] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: WP of instance: usdhc1.
 * 111 - Select mux mode: ALT7 mux port: EARLY_RST of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad GPIO_9.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_GPIO_9, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_COL0. NOTE: Pad KEY_COL0 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT for mode ALT2. - Config IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT0. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT for mode ALT1. - Config IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_ADDR      (REGS_IOMUXC_BASE + 0x244)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_COL0. NOTE: Pad KEY_COL0
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT for mode ALT2.
 * - Config IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT for mode ALT1. - Config
 * IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: SCLK of instance: ecspi1.
 * 001 - Select mux mode: ALT1 mux port: RDATA[3] of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: AUD5_TXC of instance: audmux.
 * 011 - Select mux mode: ALT3 mux port: COL[0] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: TXD_MUX of instance: uart4.
 * 101 - Select mux mode: ALT5 mux port: GPIO[6] of instance: gpio4.
 * 110 - Select mux mode: ALT6 mux port: DCIC_OUT of instance: dcic1.
 * 111 - Select mux mode: ALT7 mux port: ANY_PU_RST of instance: src.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad KEY_COL0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_COL1. NOTE: Pad KEY_COL1 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT for mode ALT2. - Config IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT for mode ALT0. - Config IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT for mode ALT1. - Config IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_ADDR      (REGS_IOMUXC_BASE + 0x248)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_COL1. NOTE: Pad KEY_COL1
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT for mode ALT2.
 * - Config IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT for mode ALT1. - Config
 * IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: MISO of instance: ecspi1.
 * 001 - Select mux mode: ALT1 mux port: MDIO of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: AUD5_TXFS of instance: audmux.
 * 011 - Select mux mode: ALT3 mux port: COL[1] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: TXD_MUX of instance: uart5.
 * 101 - Select mux mode: ALT5 mux port: GPIO[8] of instance: gpio4.
 * 110 - Select mux mode: ALT6 mux port: VSELECT of instance: usdhc1.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad KEY_COL1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_COL2. NOTE: Pad KEY_COL2 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT for mode ALT0. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_ADDR      (REGS_IOMUXC_BASE + 0x24c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_COL2. NOTE: Pad KEY_COL2
 * is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT for mode ALT0. -
 * Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT for mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: SS1 of instance: ecspi1.
 * 001 - Select mux mode: ALT1 mux port: RDATA[2] of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: TXCAN of instance: can1.
 * 011 - Select mux mode: ALT3 mux port: COL[2] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: MDC of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[10] of instance: gpio4.
 * 110 - Select mux mode: ALT6 mux port: H1USB_PWRCTL_WAKEUP of instance: usboh3.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad KEY_COL2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_COL3. NOTE: Pad KEY_COL3 is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT for mode ALT0. - Config IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT for mode ALT2. - Config IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT for mode ALT4. - Config IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT for mode ALT6.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_ADDR      (REGS_IOMUXC_BASE + 0x250)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_COL3. NOTE: Pad KEY_COL3
 * is involved in Daisy Chain. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT for mode ALT0. -
 * Config IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT for mode ALT2. - Config
 * IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT for mode ALT4. - Config IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT
 * for mode ALT6.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: SS3 of instance: ecspi1.
 * 001 - Select mux mode: ALT1 mux port: CRS of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: DDC_SCL of instance: hdmi_tx.
 * 011 - Select mux mode: ALT3 mux port: COL[3] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: SCL of instance: i2c2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[12] of instance: gpio4.
 * 110 - Select mux mode: ALT6 mux port: IN1 of instance: spdif.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad KEY_COL3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_COL4. NOTE: Pad KEY_COL4 is involved in Daisy Chain. - Config IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4. - Config IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_ADDR      (REGS_IOMUXC_BASE + 0x254)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col4_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_COL4. NOTE: Pad KEY_COL4
 * is involved in Daisy Chain. - Config IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4. -
 * Config IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: TXCAN of instance: can2.
 * 001 - Reserved.
 * 010 - Select mux mode: ALT2 mux port: USBOTG_OC of instance: usboh3.
 * 011 - Select mux mode: ALT3 mux port: COL[4] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: RTS of instance: uart5.
 * 101 - Select mux mode: ALT5 mux port: GPIO[14] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad KEY_COL4.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_COL4, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_ROW0. NOTE: Pad KEY_ROW0 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT for mode ALT2. - Config IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT for mode ALT0. - Config IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_ADDR      (REGS_IOMUXC_BASE + 0x258)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_ROW0. NOTE: Pad KEY_ROW0
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT for mode ALT2. -
 * Config IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: MOSI of instance: ecspi1.
 * 001 - Select mux mode: ALT1 mux port: TDATA[3] of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: AUD5_TXD of instance: audmux.
 * 011 - Select mux mode: ALT3 mux port: ROW[0] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: RXD_MUX of instance: uart4.
 * 101 - Select mux mode: ALT5 mux port: GPIO[7] of instance: gpio4.
 * 110 - Select mux mode: ALT6 mux port: DCIC_OUT of instance: dcic2.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad KEY_ROW0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_ROW1. NOTE: Pad KEY_ROW1 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT for mode ALT2. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT0. - Config IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_ADDR      (REGS_IOMUXC_BASE + 0x25c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_ROW1. NOTE: Pad KEY_ROW1
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT for mode ALT2. -
 * Config IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: SS0 of instance: ecspi1.
 * 001 - Select mux mode: ALT1 mux port: COL of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: AUD5_RXD of instance: audmux.
 * 011 - Select mux mode: ALT3 mux port: ROW[1] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: RXD_MUX of instance: uart5.
 * 101 - Select mux mode: ALT5 mux port: GPIO[9] of instance: gpio4.
 * 110 - Select mux mode: ALT6 mux port: VSELECT of instance: usdhc2.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad KEY_ROW1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_ROW2. NOTE: Pad KEY_ROW2 is involved in Daisy Chain. - Config IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT for mode ALT2. - Config IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT for mode ALT0. - Config IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT for mode ALT6.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_ADDR      (REGS_IOMUXC_BASE + 0x260)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_ROW2. NOTE: Pad KEY_ROW2
 * is involved in Daisy Chain. - Config IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT for mode ALT2. -
 * Config IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT for mode ALT0. - Config
 * IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT for mode ALT6.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: SS2 of instance: ecspi1.
 * 001 - Select mux mode: ALT1 mux port: TDATA[2] of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: RXCAN of instance: can1.
 * 011 - Select mux mode: ALT3 mux port: ROW[2] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: VSELECT of instance: usdhc2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[11] of instance: gpio4.
 * 110 - Select mux mode: ALT6 mux port: CEC_LINE of instance: hdmi_tx.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad KEY_ROW2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_ROW3. NOTE: Pad KEY_ROW3 is involved in Daisy Chain. - Config IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT for mode ALT1. - Config IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT for mode ALT2. - Config IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_ADDR      (REGS_IOMUXC_BASE + 0x264)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_ROW3. NOTE: Pad KEY_ROW3
 * is involved in Daisy Chain. - Config IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT for mode ALT1. -
 * Config IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT for mode ALT2. - Config
 * IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Reserved.
 * 001 - Select mux mode: ALT1 mux port: ASRC_EXT_CLK of instance: asrc.
 * 010 - Select mux mode: ALT2 mux port: DDC_SDA of instance: hdmi_tx.
 * 011 - Select mux mode: ALT3 mux port: ROW[3] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: SDA of instance: i2c2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[13] of instance: gpio4.
 * 110 - Select mux mode: ALT6 mux port: VSELECT of instance: usdhc1.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad KEY_ROW3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_ROW4. NOTE: Pad KEY_ROW4 is involved in Daisy Chain. - Config IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT for mode ALT0. - Config IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_ADDR      (REGS_IOMUXC_BASE + 0x268)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row4_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: KEY_ROW4. NOTE: Pad KEY_ROW4
 * is involved in Daisy Chain. - Config IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT for mode ALT0. -
 * Config IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: RXCAN of instance: can2.
 * 001 - Reserved.
 * 010 - Select mux mode: ALT2 mux port: USBOTG_PWR of instance: usboh3.
 * 011 - Select mux mode: ALT3 mux port: ROW[4] of instance: kpp.
 * 100 - Select mux mode: ALT4 mux port: CTS of instance: uart5.
 * 101 - Select mux mode: ALT5 mux port: GPIO[15] of instance: gpio4.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad KEY_ROW4.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: NANDF_ALE. NOTE: Pad NANDF_ALE is involved in Daisy Chain. - Config IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT8.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_ale_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_ADDR      (REGS_IOMUXC_BASE + 0x26c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_ale_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: NANDF_ALE. NOTE: Pad
 * NANDF_ALE is involved in Daisy Chain. - Config IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT for
 * mode ALT8.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: ALE of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: RST of instance: usdhc4.
 * 1000 - Select mux mode: ALT8 mux port: CLKI of instance: usdhc3.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[8] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_ALE.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_CLE.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cle_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_ADDR      (REGS_IOMUXC_BASE + 0x270)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cle_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_CLE.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CLE of instance: rawnand.
 * 1000 - Select mux mode: ALT8 mux port: CLKO of instance: usdhc3.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[7] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_CLE.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: NANDF_CS0.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_ADDR      (REGS_IOMUXC_BASE + 0x274)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: NANDF_CS0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CE0N of instance: rawnand.
 * 1000 - Select mux mode: ALT8 mux port: CLKO of instance: usdhc1.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[11] of instance: gpio6.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_CS0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_CS1. NOTE: Pad NANDF_CS1 is involved in Daisy Chain. - Config IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT8.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_ADDR      (REGS_IOMUXC_BASE + 0x278)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_CS1. NOTE: Pad
 * NANDF_CS1 is involved in Daisy Chain. - Config IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT for
 * mode ALT8.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CE1N of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: VSELECT of instance: usdhc4.
 * 1000 - Select mux mode: ALT8 mux port: CLKI of instance: usdhc1.
 * 010 - Select mux mode: ALT2 mux port: VSELECT of instance: usdhc3.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[14] of instance: gpio6.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_CS1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_CS2. NOTE: Pad NANDF_CS2 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT for mode ALT2.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_ADDR      (REGS_IOMUXC_BASE + 0x27c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_CS2. NOTE: Pad
 * NANDF_CS2 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT for mode
 * ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CE2N of instance: rawnand.
 * 001 - Reserved.
 * 1000 - Select mux mode: ALT8 mux port: CLKO of instance: usdhc2.
 * 010 - Select mux mode: ALT2 mux port: TX0 of instance: esai.
 * 011 - Select mux mode: ALT3 mux port: WEIM_CRE of instance: weim.
 * 100 - Select mux mode: ALT4 mux port: CLKO2 of instance: ccm.
 * 101 - Select mux mode: ALT5 mux port: GPIO[15] of instance: gpio6.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_CS2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: NANDF_CS3. NOTE: Pad NANDF_CS3 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT for mode ALT2. - Config IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT for mode ALT9. - Config IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT8.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_ADDR      (REGS_IOMUXC_BASE + 0x280)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 9 iomux modes to be used for pad: NANDF_CS3. NOTE: Pad
 * NANDF_CS3 is involved in Daisy Chain. - Config IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT for mode
 * ALT2. - Config IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT for mode ALT9. - Config
 * IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT8.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CE3N of instance: rawnand.
 * 001 - Reserved.
 * 1000 - Select mux mode: ALT8 mux port: CLKI of instance: usdhc2.
 * 1001 - Select mux mode: ALT9 mux port: SDA of instance: i2c4.
 * 010 - Select mux mode: ALT2 mux port: TX1 of instance: esai.
 * 011 - Select mux mode: ALT3 mux port: WEIM_A[26] of instance: weim.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[16] of instance: gpio6.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_CS3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_ADDR      (REGS_IOMUXC_BASE + 0x284)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D0 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT4 of instance: usdhc1.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[0] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_D0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_ADDR      (REGS_IOMUXC_BASE + 0x288)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D1 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT5 of instance: usdhc1.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[1] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_D1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_ADDR      (REGS_IOMUXC_BASE + 0x28c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D2 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT6 of instance: usdhc1.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[2] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_D2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_ADDR      (REGS_IOMUXC_BASE + 0x290)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D3 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT7 of instance: usdhc1.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[3] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_D3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_ADDR      (REGS_IOMUXC_BASE + 0x294)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d4_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D4 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT4 of instance: usdhc2.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[4] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_D4.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D4, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D5.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_ADDR      (REGS_IOMUXC_BASE + 0x298)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d5_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D5.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D5 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT5 of instance: usdhc2.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[5] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_D5.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D5, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D6.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_ADDR      (REGS_IOMUXC_BASE + 0x29c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d6_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D6.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D6 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT6 of instance: usdhc2.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[6] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_D6.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D6, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D7.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_ADDR      (REGS_IOMUXC_BASE + 0x2a0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d7_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_D7.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D7 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT7 of instance: usdhc2.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[7] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_D7.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_D7, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_RB0. NOTE: Pad NANDF_RB0 is involved in Daisy Chain. - Config IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT8.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_rb0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_ADDR      (REGS_IOMUXC_BASE + 0x2a4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_rb0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: NANDF_RB0. NOTE: Pad
 * NANDF_RB0 is involved in Daisy Chain. - Config IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT for
 * mode ALT8.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: READY0 of instance: rawnand.
 * 1000 - Select mux mode: ALT8 mux port: CLKI of instance: usdhc4.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[10] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_RB0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 4; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: NANDF_WP_B. NOTE: Pad NANDF_WP_B is involved in Daisy Chain. - Config IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT for mode ALT9.
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED0 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_wp_b_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_ADDR      (REGS_IOMUXC_BASE + 0x2a8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_wp_b_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B, field MUX_MODE[3:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: NANDF_WP_B. NOTE: Pad
 * NANDF_WP_B is involved in Daisy Chain. - Config IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT for mode
 * ALT9.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: RESETN of instance: rawnand.
 * 1000 - Select mux mode: ALT8 mux port: CLKO of instance: usdhc4.
 * 1001 - Select mux mode: ALT9 mux port: SCL of instance: i2c4.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[9] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_MUX_MODE      (0x0000000f)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad NANDF_WP_B.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_RD0. NOTE: Pad RGMII_RD0 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_ADDR      (REGS_IOMUXC_BASE + 0x2ac)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_RD0. NOTE: Pad
 * RGMII_RD0 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT for
 * mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: RX_READY of instance: mipi_hsi_ctrl.
 * 001 - Select mux mode: ALT1 mux port: RGMII_RD0 of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[25] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_RD0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: RGMII_RD1. NOTE: Pad RGMII_RD1 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_ADDR      (REGS_IOMUXC_BASE + 0x2b0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: RGMII_RD1. NOTE: Pad
 * RGMII_RD1 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT for
 * mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: TX_FLAG of instance: mipi_hsi_ctrl.
 * 001 - Select mux mode: ALT1 mux port: RGMII_RD1 of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[27] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: FAIL of instance: sjc.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_RD1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_RD2. NOTE: Pad RGMII_RD2 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_ADDR      (REGS_IOMUXC_BASE + 0x2b4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_RD2. NOTE: Pad
 * RGMII_RD2 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT for
 * mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: TX_DATA of instance: mipi_hsi_ctrl.
 * 001 - Select mux mode: ALT1 mux port: RGMII_RD2 of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[28] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_RD2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_RD3. NOTE: Pad RGMII_RD3 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_ADDR      (REGS_IOMUXC_BASE + 0x2b8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_RD3. NOTE: Pad
 * RGMII_RD3 is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT for
 * mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: TX_WAKE of instance: mipi_hsi_ctrl.
 * 001 - Select mux mode: ALT1 mux port: RGMII_RD3 of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[29] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_RD3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_RX_CTL. NOTE: Pad RGMII_RX_CTL is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rx_ctl_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_ADDR      (REGS_IOMUXC_BASE + 0x2bc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rx_ctl_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_RX_CTL. NOTE: Pad
 * RGMII_RX_CTL is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT for
 * mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: H3_DATA of instance: usboh3.
 * 001 - Select mux mode: ALT1 mux port: RGMII_RX_CTL of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[24] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_RX_CTL.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_RXC. NOTE: Pad RGMII_RXC is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rxc_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_ADDR      (REGS_IOMUXC_BASE + 0x2c0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rxc_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_RXC. NOTE: Pad
 * RGMII_RXC is involved in Daisy Chain. - Config IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT for
 * mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: H3_STROBE of instance: usboh3.
 * 001 - Select mux mode: ALT1 mux port: RGMII_RXC of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[30] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_RXC.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_TD0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_ADDR      (REGS_IOMUXC_BASE + 0x2c4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_TD0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: TX_READY of instance: mipi_hsi_ctrl.
 * 001 - Select mux mode: ALT1 mux port: RGMII_TD0 of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[20] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_TD0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: RGMII_TD1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_ADDR      (REGS_IOMUXC_BASE + 0x2c8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: RGMII_TD1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: RX_FLAG of instance: mipi_hsi_ctrl.
 * 001 - Select mux mode: ALT1 mux port: RGMII_TD1 of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[21] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_TD1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: RGMII_TD2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_ADDR      (REGS_IOMUXC_BASE + 0x2cc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: RGMII_TD2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: RX_DATA of instance: mipi_hsi_ctrl.
 * 001 - Select mux mode: ALT1 mux port: RGMII_TD2 of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[22] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_TD2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_TD3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_ADDR      (REGS_IOMUXC_BASE + 0x2d0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 4 iomux modes to be used for pad: RGMII_TD3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: RX_WAKE of instance: mipi_hsi_ctrl.
 * 001 - Select mux mode: ALT1 mux port: RGMII_TD3 of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[23] of instance: gpio6.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_TD3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: RGMII_TX_CTL. NOTE: Pad RGMII_TX_CTL is involved in Daisy Chain. - Config IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT for mode ALT7.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_tx_ctl_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_ADDR      (REGS_IOMUXC_BASE + 0x2d4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_tx_ctl_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: RGMII_TX_CTL. NOTE: Pad
 * RGMII_TX_CTL is involved in Daisy Chain. - Config IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT for mode
 * ALT7.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: H2_STROBE of instance: usboh3.
 * 001 - Select mux mode: ALT1 mux port: RGMII_TX_CTL of instance: enet.
 * 101 - Select mux mode: ALT5 mux port: GPIO[26] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Select mux mode: ALT7 mux port: ANATOP_ETHERNET_REF_OUT of instance: enet.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_TX_CTL.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: RGMII_TXC. NOTE: Pad RGMII_TXC is involved in Daisy Chain. - Config IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_txc_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_ADDR      (REGS_IOMUXC_BASE + 0x2d8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_txc_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: RGMII_TXC. NOTE: Pad
 * RGMII_TXC is involved in Daisy Chain. - Config IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: H2_DATA of instance: usboh3.
 * 001 - Select mux mode: ALT1 mux port: RGMII_TXC of instance: enet.
 * 010 - Select mux mode: ALT2 mux port: SPDIF_EXTCLK of instance: spdif.
 * 101 - Select mux mode: ALT5 mux port: GPIO[19] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad RGMII_TXC.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: SD1_CLK. NOTE: Pad SD1_CLK is involved in Daisy Chain. - Config IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_ADDR      (REGS_IOMUXC_BASE + 0x2dc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_clk_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: SD1_CLK. NOTE: Pad SD1_CLK
 * is involved in Daisy Chain. - Config IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CLK of instance: usdhc1.
 * 010 - Reserved.
 * 011 - Select mux mode: ALT3 mux port: CLKIN of instance: gpt.
 * 101 - Select mux mode: ALT5 mux port: GPIO[20] of instance: gpio1.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD1_CLK.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CLK, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: SD1_CMD.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_cmd_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_ADDR      (REGS_IOMUXC_BASE + 0x2e0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_cmd_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: SD1_CMD.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CMD of instance: usdhc1.
 * 010 - Select mux mode: ALT2 mux port: PWMO of instance: pwm4.
 * 011 - Select mux mode: ALT3 mux port: CMPOUT1 of instance: gpt.
 * 101 - Select mux mode: ALT5 mux port: GPIO[18] of instance: gpio1.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD1_CMD.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_CMD, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD1_DAT0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_ADDR      (REGS_IOMUXC_BASE + 0x2e4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD1_DAT0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT0 of instance: usdhc1.
 * 010 - Select mux mode: ALT2 mux port: RNG_OSC_OBS of instance: caam_wrapper.
 * 011 - Select mux mode: ALT3 mux port: CAPIN1 of instance: gpt.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[16] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: OPHYDTB[1] of instance: hdmi_tx.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD1_DAT0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD1_DAT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_ADDR      (REGS_IOMUXC_BASE + 0x2e8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD1_DAT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT1 of instance: usdhc1.
 * 010 - Select mux mode: ALT2 mux port: PWMO of instance: pwm3.
 * 011 - Select mux mode: ALT3 mux port: CAPIN2 of instance: gpt.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[17] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: OPHYDTB[0] of instance: hdmi_tx.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD1_DAT1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD1_DAT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_ADDR      (REGS_IOMUXC_BASE + 0x2ec)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD1_DAT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT2 of instance: usdhc1.
 * 010 - Select mux mode: ALT2 mux port: CMPOUT2 of instance: gpt.
 * 011 - Select mux mode: ALT3 mux port: PWMO of instance: pwm2.
 * 100 - Select mux mode: ALT4 mux port: WDOG_B of instance: wdog1.
 * 101 - Select mux mode: ALT5 mux port: GPIO[19] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: WDOG_RST_B_DEB of instance: wdog1.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD1_DAT2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD1_DAT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_ADDR      (REGS_IOMUXC_BASE + 0x2f0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD1_DAT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT3 of instance: usdhc1.
 * 010 - Select mux mode: ALT2 mux port: CMPOUT3 of instance: gpt.
 * 011 - Select mux mode: ALT3 mux port: PWMO of instance: pwm1.
 * 100 - Select mux mode: ALT4 mux port: WDOG_B of instance: wdog2.
 * 101 - Select mux mode: ALT5 mux port: GPIO[21] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: WDOG_RST_B_DEB of instance: wdog2.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD1_DAT3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: SD2_CLK. NOTE: Pad SD2_CLK is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT for mode ALT2. - Config IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_ADDR      (REGS_IOMUXC_BASE + 0x2f4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_clk_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: SD2_CLK. NOTE: Pad SD2_CLK
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT for mode ALT3.
 * - Config IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT for mode ALT2. - Config
 * IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CLK of instance: usdhc2.
 * 010 - Select mux mode: ALT2 mux port: COL[5] of instance: kpp.
 * 011 - Select mux mode: ALT3 mux port: AUD4_RXFS of instance: audmux.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[10] of instance: gpio1.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD2_CLK.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CLK, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: SD2_CMD. NOTE: Pad SD2_CMD is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_cmd_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_ADDR      (REGS_IOMUXC_BASE + 0x2f8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_cmd_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: SD2_CMD. NOTE: Pad SD2_CMD
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT for mode ALT3.
 * - Config IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CMD of instance: usdhc2.
 * 010 - Select mux mode: ALT2 mux port: ROW[5] of instance: kpp.
 * 011 - Select mux mode: ALT3 mux port: AUD4_RXC of instance: audmux.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[11] of instance: gpio1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD2_CMD.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_CMD, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: SD2_DAT0. NOTE: Pad SD2_DAT0 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_ADDR      (REGS_IOMUXC_BASE + 0x2fc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: SD2_DAT0. NOTE: Pad SD2_DAT0
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT for mode ALT3. -
 * Config IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT0 of instance: usdhc2.
 * 011 - Select mux mode: ALT3 mux port: AUD4_RXD of instance: audmux.
 * 100 - Select mux mode: ALT4 mux port: ROW[7] of instance: kpp.
 * 101 - Select mux mode: ALT5 mux port: GPIO[15] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: DCIC_OUT of instance: dcic2.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD2_DAT0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD2_DAT1. NOTE: Pad SD2_DAT1 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_ADDR      (REGS_IOMUXC_BASE + 0x300)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD2_DAT1. NOTE: Pad SD2_DAT1
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT for mode ALT3.
 * - Config IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT1 of instance: usdhc2.
 * 010 - Select mux mode: ALT2 mux port: WEIM_CS[2] of instance: weim.
 * 011 - Select mux mode: ALT3 mux port: AUD4_TXFS of instance: audmux.
 * 100 - Select mux mode: ALT4 mux port: COL[7] of instance: kpp.
 * 101 - Select mux mode: ALT5 mux port: GPIO[14] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: WAIT of instance: ccm.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD2_DAT1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD2_DAT2. NOTE: Pad SD2_DAT2 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT for mode ALT4.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_ADDR      (REGS_IOMUXC_BASE + 0x304)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD2_DAT2. NOTE: Pad SD2_DAT2
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT for mode ALT3. -
 * Config IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT for mode ALT4.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT2 of instance: usdhc2.
 * 010 - Select mux mode: ALT2 mux port: WEIM_CS[3] of instance: weim.
 * 011 - Select mux mode: ALT3 mux port: AUD4_TXD of instance: audmux.
 * 100 - Select mux mode: ALT4 mux port: ROW[6] of instance: kpp.
 * 101 - Select mux mode: ALT5 mux port: GPIO[13] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: STOP of instance: ccm.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD2_DAT2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD2_DAT3. NOTE: Pad SD2_DAT3 is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT for mode ALT3. - Config IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_ADDR      (REGS_IOMUXC_BASE + 0x308)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD2_DAT3. NOTE: Pad SD2_DAT3
 * is involved in Daisy Chain. - Config IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT for mode ALT3.
 * - Config IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT3 of instance: usdhc2.
 * 010 - Select mux mode: ALT2 mux port: COL[6] of instance: kpp.
 * 011 - Select mux mode: ALT3 mux port: AUD4_TXC of instance: audmux.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[12] of instance: gpio1.
 * 110 - Select mux mode: ALT6 mux port: DONE of instance: sjc.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD2_DAT3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_CLK. NOTE: Pad SD3_CLK is involved in Daisy Chain. - Config IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT for mode ALT2. - Config IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1. - Config IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_ADDR      (REGS_IOMUXC_BASE + 0x30c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_clk_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_CLK. NOTE: Pad SD3_CLK
 * is involved in Daisy Chain. - Config IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT for mode ALT2. -
 * Config IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1. - Config
 * IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CLK of instance: usdhc3.
 * 001 - Select mux mode: ALT1 mux port: RTS of instance: uart2.
 * 010 - Select mux mode: ALT2 mux port: RXCAN of instance: can1.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[3] of instance: gpio7.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD3_CLK.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CLK, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_CMD. NOTE: Pad SD3_CMD is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_cmd_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_ADDR      (REGS_IOMUXC_BASE + 0x310)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_cmd_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_CMD. NOTE: Pad SD3_CMD
 * is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CMD of instance: usdhc3.
 * 001 - Select mux mode: ALT1 mux port: CTS of instance: uart2.
 * 010 - Select mux mode: ALT2 mux port: TXCAN of instance: can1.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[2] of instance: gpio7.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD3_CMD.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_CMD, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT0. NOTE: Pad SD3_DAT0 is involved in Daisy Chain. - Config IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_ADDR      (REGS_IOMUXC_BASE + 0x314)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT0. NOTE: Pad SD3_DAT0
 * is involved in Daisy Chain. - Config IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT0 of instance: usdhc3.
 * 001 - Select mux mode: ALT1 mux port: CTS of instance: uart1.
 * 010 - Select mux mode: ALT2 mux port: TXCAN of instance: can2.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[4] of instance: gpio7.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD3_DAT0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT1. NOTE: Pad SD3_DAT1 is involved in Daisy Chain. - Config IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT for mode ALT2. - Config IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_ADDR      (REGS_IOMUXC_BASE + 0x318)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT1. NOTE: Pad SD3_DAT1
 * is involved in Daisy Chain. - Config IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT for mode ALT2. -
 * Config IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT1 of instance: usdhc3.
 * 001 - Select mux mode: ALT1 mux port: RTS of instance: uart1.
 * 010 - Select mux mode: ALT2 mux port: RXCAN of instance: can2.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[5] of instance: gpio7.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD3_DAT1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD3_DAT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_ADDR      (REGS_IOMUXC_BASE + 0x31c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD3_DAT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT2 of instance: usdhc3.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[6] of instance: gpio7.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD3_DAT2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT3. NOTE: Pad SD3_DAT3 is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_ADDR      (REGS_IOMUXC_BASE + 0x320)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT3. NOTE: Pad SD3_DAT3
 * is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT3 of instance: usdhc3.
 * 001 - Select mux mode: ALT1 mux port: CTS of instance: uart3.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[7] of instance: gpio7.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD3_DAT3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT4. NOTE: Pad SD3_DAT4 is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_ADDR      (REGS_IOMUXC_BASE + 0x324)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat4_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT4. NOTE: Pad SD3_DAT4
 * is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT4 of instance: usdhc3.
 * 001 - Select mux mode: ALT1 mux port: RXD_MUX of instance: uart2.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[1] of instance: gpio7.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD3_DAT4.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT5. NOTE: Pad SD3_DAT5 is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_ADDR      (REGS_IOMUXC_BASE + 0x328)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat5_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT5. NOTE: Pad SD3_DAT5
 * is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT5 of instance: usdhc3.
 * 001 - Select mux mode: ALT1 mux port: TXD_MUX of instance: uart2.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[0] of instance: gpio7.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD3_DAT5.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT6. NOTE: Pad SD3_DAT6 is involved in Daisy Chain. - Config IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_ADDR      (REGS_IOMUXC_BASE + 0x32c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat6_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT6. NOTE: Pad SD3_DAT6
 * is involved in Daisy Chain. - Config IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT6 of instance: usdhc3.
 * 001 - Select mux mode: ALT1 mux port: RXD_MUX of instance: uart1.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[18] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD3_DAT6.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT7. NOTE: Pad SD3_DAT7 is involved in Daisy Chain. - Config IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_ADDR      (REGS_IOMUXC_BASE + 0x330)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat7_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_DAT7. NOTE: Pad SD3_DAT7
 * is involved in Daisy Chain. - Config IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: DAT7 of instance: usdhc3.
 * 001 - Select mux mode: ALT1 mux port: TXD_MUX of instance: uart1.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[17] of instance: gpio6.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD3_DAT7.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_RST. NOTE: Pad SD3_RST is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_rst_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_ADDR      (REGS_IOMUXC_BASE + 0x334)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_rst_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 8 iomux modes to be used for pad: SD3_RST. NOTE: Pad SD3_RST
 * is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT for mode ALT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: RST of instance: usdhc3.
 * 001 - Select mux mode: ALT1 mux port: RTS of instance: uart3.
 * 010 - Reserved.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[8] of instance: gpio7.
 * 110 - Reserved.
 * 111 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD3_RST.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD3_RST, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: SD4_CLK. NOTE: Pad SD4_CLK is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2. - Config IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_ADDR      (REGS_IOMUXC_BASE + 0x338)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_clk_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: SD4_CLK. NOTE: Pad SD4_CLK
 * is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2. -
 * Config IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT for mode ALT0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CLK of instance: usdhc4.
 * 001 - Select mux mode: ALT1 mux port: WRN of instance: rawnand.
 * 010 - Select mux mode: ALT2 mux port: RXD_MUX of instance: uart3.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[10] of instance: gpio7.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD4_CLK.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CLK, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: SD4_CMD. NOTE: Pad SD4_CMD is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_cmd_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_ADDR      (REGS_IOMUXC_BASE + 0x33c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_cmd_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 5 iomux modes to be used for pad: SD4_CMD. NOTE: Pad SD4_CMD
 * is involved in Daisy Chain. - Config IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: CMD of instance: usdhc4.
 * 001 - Select mux mode: ALT1 mux port: RDN of instance: rawnand.
 * 010 - Select mux mode: ALT2 mux port: TXD_MUX of instance: uart3.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[9] of instance: gpio7.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD4_CMD.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_CMD, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT0.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_ADDR      (REGS_IOMUXC_BASE + 0x340)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat0_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT0.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D8 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT0 of instance: usdhc4.
 * 010 - Select mux mode: ALT2 mux port: DQS of instance: rawnand.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[8] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD4_DAT0.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT1.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_ADDR      (REGS_IOMUXC_BASE + 0x344)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat1_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT1.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D9 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT1 of instance: usdhc4.
 * 010 - Select mux mode: ALT2 mux port: PWMO of instance: pwm3.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[9] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD4_DAT1.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_ADDR      (REGS_IOMUXC_BASE + 0x348)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat2_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D10 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT2 of instance: usdhc4.
 * 010 - Select mux mode: ALT2 mux port: PWMO of instance: pwm4.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[10] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD4_DAT2.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: SD4_DAT3.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_ADDR      (REGS_IOMUXC_BASE + 0x34c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat3_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 6 iomux modes to be used for pad: SD4_DAT3.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D11 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT3 of instance: usdhc4.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[11] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD4_DAT3.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT4. NOTE: Pad SD4_DAT4 is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_ADDR      (REGS_IOMUXC_BASE + 0x350)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat4_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT4. NOTE: Pad SD4_DAT4
 * is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D12 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT4 of instance: usdhc4.
 * 010 - Select mux mode: ALT2 mux port: RXD_MUX of instance: uart2.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[12] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD4_DAT4.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT5. NOTE: Pad SD4_DAT5 is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_ADDR      (REGS_IOMUXC_BASE + 0x354)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat5_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT5. NOTE: Pad SD4_DAT5
 * is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D13 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT5 of instance: usdhc4.
 * 010 - Select mux mode: ALT2 mux port: RTS of instance: uart2.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[13] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD4_DAT5.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT6. NOTE: Pad SD4_DAT6 is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_ADDR      (REGS_IOMUXC_BASE + 0x358)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat6_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT6. NOTE: Pad SD4_DAT6
 * is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D14 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT6 of instance: usdhc4.
 * 010 - Select mux mode: ALT2 mux port: CTS of instance: uart2.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[14] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD4_DAT6.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7 - SW_MUX_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned MUX_MODE : 3; //!< MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT7. NOTE: Pad SD4_DAT7 is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2.
        unsigned RESERVED0 : 1; //!< Reserved
        unsigned SION : 1; //!< Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE functionality.
        unsigned RESERVED1 : 27; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7 register
 */
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_ADDR      (REGS_IOMUXC_BASE + 0x35c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7           (*(volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat7_t *) HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_RD()      (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7.U)
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_WR(v)     (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_SET(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_WR(HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7, field MUX_MODE[2:0] (RW)
 *
 * MUX Mode Select Field. Select 1 of 7 iomux modes to be used for pad: SD4_DAT7. NOTE: Pad SD4_DAT7
 * is involved in Daisy Chain. - Config IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT for mode ALT2.
 *
 * Values:
 * 000 - Select mux mode: ALT0 mux port: D15 of instance: rawnand.
 * 001 - Select mux mode: ALT1 mux port: DAT7 of instance: usdhc4.
 * 010 - Select mux mode: ALT2 mux port: TXD_MUX of instance: uart2.
 * 011 - Reserved.
 * 100 - Reserved.
 * 101 - Select mux mode: ALT5 mux port: GPIO[15] of instance: gpio2.
 * 110 - Reserved.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_MUX_MODE      (0)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_MUX_MODE      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_MUX_MODE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_MUX_MODE)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_MUX_MODE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_MUX_MODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the MUX_MODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_MUX_MODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7, MUX_MODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7, field SION[4:4] (RW)
 *
 * Software Input On Field. Force the selected mux mode Input path no matter of MUX_MODE
 * functionality.
 *
 * Values:
 * 0 - Input Path is determined by functionality of the selected mux mode (regular).
 * 1 - Force input path of pad SD4_DAT7.
 */

#define BP_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_SION      (4)
#define BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_SION      (0x00000010)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_SION(v)   ((((reg32_t) v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_SION)
#else
#define BF_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_SION(v)   (((v) << 4) & BM_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_SION)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SION field to a new value.
#define BW_IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7_SION(v)   BF_CS1(IOMUXC_IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7, SION, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT10.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT10.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT10.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT10.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT10.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT10.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT10.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT10.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat10_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_ADDR      (REGS_IOMUXC_BASE + 0x360)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat10_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT10.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT10.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT10.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT10.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT10.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT10.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT10.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT10.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT11.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT11.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT11.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT11.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT11.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT11.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT11.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT11.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat11_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_ADDR      (REGS_IOMUXC_BASE + 0x364)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat11_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT11.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT11.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT11.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT11.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT11.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT11.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT11.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT11.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT12.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT12.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT12.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT12.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT12.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT12.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT12.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT12.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat12_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_ADDR      (REGS_IOMUXC_BASE + 0x368)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat12_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT12.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT12.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT12.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT12.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT12.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT12.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT12.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT12.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT13.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT13.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT13.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT13.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT13.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT13.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT13.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT13.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat13_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_ADDR      (REGS_IOMUXC_BASE + 0x36c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat13_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT13.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT13.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT13.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT13.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT13.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT13.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT13.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT13.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT14.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT14.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT14.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT14.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT14.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT14.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT14.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT14.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat14_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_ADDR      (REGS_IOMUXC_BASE + 0x370)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat14_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT14.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT14.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT14.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT14.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT14.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT14.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT14.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT14.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT15.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT15.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT15.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT15.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT15.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT15.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT15.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT15.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat15_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_ADDR      (REGS_IOMUXC_BASE + 0x374)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat15_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT15.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT15.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT15.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT15.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT15.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT15.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT15.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT15.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT16.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT16.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT16.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT16.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT16.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT16.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT16.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT16.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat16_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_ADDR      (REGS_IOMUXC_BASE + 0x378)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat16_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT16.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT16.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT16.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT16.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT16.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT16.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT16.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT16.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT17.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT17.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT17.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT17.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT17.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT17.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT17.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT17.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat17_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_ADDR      (REGS_IOMUXC_BASE + 0x37c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat17_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT17.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT17.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT17.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT17.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT17.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT17.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT17.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT17.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT18.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT18.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT18.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT18.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT18.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT18.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT18.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT18.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat18_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_ADDR      (REGS_IOMUXC_BASE + 0x380)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat18_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT18.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT18.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT18.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT18.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT18.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT18.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT18.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT18.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT19.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT19.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT19.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT19.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT19.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT19.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT19.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT19.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat19_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_ADDR      (REGS_IOMUXC_BASE + 0x384)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat19_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT19.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT19.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT19.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT19.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT19.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT19.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT19.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT19.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT4.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT4.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT4.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT4.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT4.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT4.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT4.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT4.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_ADDR      (REGS_IOMUXC_BASE + 0x388)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT4.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT4.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT4.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT4.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT4.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT4.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT5.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT5.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT5.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT5.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT5.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT5.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT5.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT5.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_ADDR      (REGS_IOMUXC_BASE + 0x38c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat5_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT5.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT5.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT5.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT5.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT5.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT5.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT5.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT5.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT6.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT6.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT6.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT6.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT6.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT6.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT6.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT6.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_ADDR      (REGS_IOMUXC_BASE + 0x390)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat6_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT6.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT6.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT6.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT6.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT6.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT6.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT6.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT6.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT7.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT7.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT7.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT7.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT7.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT7.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT7.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT7.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_ADDR      (REGS_IOMUXC_BASE + 0x394)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat7_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT7.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT7.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT7.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT7.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT7.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT7.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT7.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT7.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT8.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT8.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT8.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT8.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT8.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT8.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT8.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT8.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat8_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_ADDR      (REGS_IOMUXC_BASE + 0x398)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat8_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT8.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT8.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT8.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT8.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT8.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT8.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT8.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT8.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DAT9.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DAT9.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DAT9.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DAT9.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT9.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT9.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT9.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT9.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat9_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_ADDR      (REGS_IOMUXC_BASE + 0x39c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat9_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DAT9.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DAT9.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DAT9.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DAT9.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DAT9.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DAT9.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DAT9.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DAT9.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_DATA_EN.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_DATA_EN.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_DATA_EN.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_DATA_EN.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_DATA_EN.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_DATA_EN.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DATA_EN.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_DATA_EN.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_data_en_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_ADDR      (REGS_IOMUXC_BASE + 0x3a0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_data_en_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_DATA_EN.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_DATA_EN.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_DATA_EN.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_DATA_EN.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_DATA_EN.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_DATA_EN.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_DATA_EN.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_DATA_EN.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_MCLK.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_MCLK.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_MCLK.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_MCLK.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_MCLK.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_MCLK.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_MCLK.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_MCLK.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_mclk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_ADDR      (REGS_IOMUXC_BASE + 0x3a4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_mclk_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_MCLK.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_MCLK.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_MCLK.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_MCLK.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_MCLK.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_MCLK.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_MCLK.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_MCLK.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_PIXCLK.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_PIXCLK.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_PIXCLK.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_PIXCLK.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_PIXCLK.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_PIXCLK.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_PIXCLK.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_PIXCLK.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_pixclk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_ADDR      (REGS_IOMUXC_BASE + 0x3a8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_pixclk_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_PIXCLK.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_PIXCLK.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_PIXCLK.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_PIXCLK.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_PIXCLK.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_PIXCLK.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_PIXCLK.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_PIXCLK.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: CSI0_VSYNC.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: CSI0_VSYNC.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: CSI0_VSYNC.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: CSI0_VSYNC.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: CSI0_VSYNC.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: CSI0_VSYNC.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: CSI0_VSYNC.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: CSI0_VSYNC.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_vsync_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_ADDR      (REGS_IOMUXC_BASE + 0x3ac)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_vsync_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: CSI0_VSYNC.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: CSI0_VSYNC.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: CSI0_VSYNC.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: CSI0_VSYNC.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: CSI0_VSYNC.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: CSI0_VSYNC.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: CSI0_VSYNC.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: CSI0_VSYNC.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DI0_DISP_CLK.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DI0_DISP_CLK.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DI0_DISP_CLK.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DI0_DISP_CLK.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DI0_DISP_CLK.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DI0_DISP_CLK.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DI0_DISP_CLK.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DI0_DISP_CLK.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_disp_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_ADDR      (REGS_IOMUXC_BASE + 0x3b0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_disp_clk_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DI0_DISP_CLK.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DI0_DISP_CLK.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DI0_DISP_CLK.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DI0_DISP_CLK.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DI0_DISP_CLK.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DI0_DISP_CLK.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DI0_DISP_CLK.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DI0_DISP_CLK.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DI0_PIN15.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DI0_PIN15.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DI0_PIN15.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DI0_PIN15.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DI0_PIN15.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DI0_PIN15.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DI0_PIN15.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DI0_PIN15.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin15_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_ADDR      (REGS_IOMUXC_BASE + 0x3b4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin15_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DI0_PIN15.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DI0_PIN15.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DI0_PIN15.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DI0_PIN15.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DI0_PIN15.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DI0_PIN15.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DI0_PIN15.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DI0_PIN15.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DI0_PIN2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DI0_PIN2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DI0_PIN2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DI0_PIN2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DI0_PIN2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DI0_PIN2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DI0_PIN2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DI0_PIN2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_ADDR      (REGS_IOMUXC_BASE + 0x3b8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DI0_PIN2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DI0_PIN2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DI0_PIN2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DI0_PIN2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DI0_PIN2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DI0_PIN2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DI0_PIN2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DI0_PIN2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DI0_PIN3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DI0_PIN3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DI0_PIN3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DI0_PIN3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DI0_PIN3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DI0_PIN3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DI0_PIN3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DI0_PIN3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_ADDR      (REGS_IOMUXC_BASE + 0x3bc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DI0_PIN3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DI0_PIN3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DI0_PIN3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DI0_PIN3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DI0_PIN3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DI0_PIN3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DI0_PIN3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DI0_PIN3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DI0_PIN4.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DI0_PIN4.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DI0_PIN4.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DI0_PIN4.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DI0_PIN4.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DI0_PIN4.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DI0_PIN4.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DI0_PIN4.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_ADDR      (REGS_IOMUXC_BASE + 0x3c0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DI0_PIN4.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DI0_PIN4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DI0_PIN4.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DI0_PIN4.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DI0_PIN4.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DI0_PIN4.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DI0_PIN4.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DI0_PIN4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_ADDR      (REGS_IOMUXC_BASE + 0x3c4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_ADDR      (REGS_IOMUXC_BASE + 0x3c8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT10.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT10.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT10.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT10.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT10.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT10.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT10.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT10.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat10_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_ADDR      (REGS_IOMUXC_BASE + 0x3cc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat10_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT10.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT10.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT10.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT10.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT10.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT10.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT10.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT10.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT11.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT11.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT11.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT11.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT11.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT11.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT11.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT11.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat11_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_ADDR      (REGS_IOMUXC_BASE + 0x3d0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat11_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT11.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT11.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT11.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT11.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT11.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT11.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT11.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT11.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT12.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT12.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT12.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT12.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT12.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT12.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT12.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT12.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat12_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_ADDR      (REGS_IOMUXC_BASE + 0x3d4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat12_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT12.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT12.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT12.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT12.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT12.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT12.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT12.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT12.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT13.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT13.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT13.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT13.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT13.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT13.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT13.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT13.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat13_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_ADDR      (REGS_IOMUXC_BASE + 0x3d8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat13_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT13.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT13.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT13.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT13.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT13.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT13.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT13.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT13.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT14.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT14.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT14.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT14.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT14.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT14.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT14.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT14.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat14_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_ADDR      (REGS_IOMUXC_BASE + 0x3dc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat14_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT14.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT14.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT14.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT14.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT14.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT14.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT14.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT14.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT15.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT15.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT15.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT15.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT15.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT15.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT15.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT15.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat15_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_ADDR      (REGS_IOMUXC_BASE + 0x3e0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat15_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT15.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT15.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT15.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT15.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT15.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT15.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT15.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT15.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT16.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT16.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT16.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT16.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT16.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT16.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT16.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT16.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat16_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_ADDR      (REGS_IOMUXC_BASE + 0x3e4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat16_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT16.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT16.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT16.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT16.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT16.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT16.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT16.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT16.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT17.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT17.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT17.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT17.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT17.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT17.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT17.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT17.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat17_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_ADDR      (REGS_IOMUXC_BASE + 0x3e8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat17_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT17.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT17.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT17.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT17.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT17.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT17.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT17.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT17.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT18.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT18.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT18.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT18.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT18.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT18.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT18.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT18.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat18_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_ADDR      (REGS_IOMUXC_BASE + 0x3ec)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat18_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT18.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT18.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT18.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT18.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT18.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT18.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT18.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT18.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT19.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT19.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT19.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT19.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT19.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT19.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT19.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT19.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat19_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_ADDR      (REGS_IOMUXC_BASE + 0x3f0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat19_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT19.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT19.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT19.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT19.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT19.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT19.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT19.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT19.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_ADDR      (REGS_IOMUXC_BASE + 0x3f4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT20.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT20.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT20.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT20.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT20.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT20.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT20.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT20.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat20_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_ADDR      (REGS_IOMUXC_BASE + 0x3f8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat20_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT20.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT20.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT20.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT20.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT20.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT20.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT20.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT20.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT21.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT21.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT21.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT21.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT21.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT21.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT21.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT21.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat21_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_ADDR      (REGS_IOMUXC_BASE + 0x3fc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat21_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT21.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT21.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT21.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT21.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT21.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT21.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT21.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT21.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT22.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT22.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT22.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT22.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT22.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT22.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT22.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT22.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat22_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_ADDR      (REGS_IOMUXC_BASE + 0x400)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat22_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT22.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT22.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT22.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT22.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT22.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT22.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT22.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT22.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT23.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT23.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT23.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT23.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT23.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT23.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT23.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT23.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat23_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_ADDR      (REGS_IOMUXC_BASE + 0x404)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat23_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT23.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT23.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT23.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT23.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT23.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT23.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT23.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT23.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_ADDR      (REGS_IOMUXC_BASE + 0x408)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT4.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT4.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT4.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT4.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT4.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT4.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT4.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT4.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_ADDR      (REGS_IOMUXC_BASE + 0x40c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT4.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT4.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT4.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT4.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT4.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT4.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT5.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT5.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT5.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT5.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT5.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT5.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT5.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT5.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_ADDR      (REGS_IOMUXC_BASE + 0x410)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat5_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT5.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT5.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT5.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT5.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT5.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT5.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT5.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT5.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT6.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT6.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT6.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT6.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT6.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT6.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT6.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT6.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_ADDR      (REGS_IOMUXC_BASE + 0x414)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat6_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT6.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT6.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT6.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT6.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT6.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT6.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT6.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT6.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT7.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT7.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT7.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT7.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT7.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT7.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT7.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT7.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_ADDR      (REGS_IOMUXC_BASE + 0x418)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat7_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT7.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT7.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT7.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT7.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT7.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT7.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT7.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT7.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT8.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT8.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT8.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT8.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT8.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT8.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT8.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT8.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat8_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_ADDR      (REGS_IOMUXC_BASE + 0x41c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat8_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT8.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT8.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT8.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT8.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT8.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT8.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT8.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT8.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: DISP0_DAT9.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DISP0_DAT9.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: DISP0_DAT9.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: DISP0_DAT9.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT9.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT9.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT9.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT9.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat9_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_ADDR      (REGS_IOMUXC_BASE + 0x420)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat9_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: DISP0_DAT9.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DISP0_DAT9.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: DISP0_DAT9.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: DISP0_DAT9.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DISP0_DAT9.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DISP0_DAT9.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DISP0_DAT9.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DISP0_DAT9.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A0.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A0.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A0.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_ADDR      (REGS_IOMUXC_BASE + 0x424)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A0.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A0.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A0_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A1.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A1.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A1.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_ADDR      (REGS_IOMUXC_BASE + 0x428)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A1.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A1.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, field DO_TRIM[21:20] (RW)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DO_TRIM      (0x00300000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DO_TRIM(v)   ((((reg32_t) v) << 20) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DO_TRIM)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DO_TRIM(v)   (((v) << 20) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DO_TRIM)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DO_TRIM field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1_DO_TRIM(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A1, DO_TRIM, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A10.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A10.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A10.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a10_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_ADDR      (REGS_IOMUXC_BASE + 0x42c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a10_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A10.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A10.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A10.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A10_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A11.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A11.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A11.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a11_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_ADDR      (REGS_IOMUXC_BASE + 0x430)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a11_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A11.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A11.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A11.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A11_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A12.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A12.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A12.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a12_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_ADDR      (REGS_IOMUXC_BASE + 0x434)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a12_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A12.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A12.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A12.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A12_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A13.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A13.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A13.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a13_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_ADDR      (REGS_IOMUXC_BASE + 0x438)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a13_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A13.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A13.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A13.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A13_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A14.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A14.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A14.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a14_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_ADDR      (REGS_IOMUXC_BASE + 0x43c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a14_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A14.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A14.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A14.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A14_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A15.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A15.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A15.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a15_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_ADDR      (REGS_IOMUXC_BASE + 0x440)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a15_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A15.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A15.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A15.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A15_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A2.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A2.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A2.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_ADDR      (REGS_IOMUXC_BASE + 0x444)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A2.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A2.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A2_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A3.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A3.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A3.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_ADDR      (REGS_IOMUXC_BASE + 0x448)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A3.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A3.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A3_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A4.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A4.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A4.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_ADDR      (REGS_IOMUXC_BASE + 0x44c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A4.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A4.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A4_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A5.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A5.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A5.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_ADDR      (REGS_IOMUXC_BASE + 0x450)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a5_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A5.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A5.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A5.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A5_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A6.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A6.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A6.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_ADDR      (REGS_IOMUXC_BASE + 0x454)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a6_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A6.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A6.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A6.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A6_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A7.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A7.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A7.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_ADDR      (REGS_IOMUXC_BASE + 0x458)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a7_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A7.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A7.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A7.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A7_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A8.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A8.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A8.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a8_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_ADDR      (REGS_IOMUXC_BASE + 0x45c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a8_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A8.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A8.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A8.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A8_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_A9.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_A9.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A9.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a9_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_ADDR      (REGS_IOMUXC_BASE + 0x460)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a9_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_A9.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_A9.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_A9.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_A9_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_CAS.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_CAS.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_CAS.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_CAS.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_cas_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_ADDR      (REGS_IOMUXC_BASE + 0x464)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_cas_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_CAS.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_CAS.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_CAS.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_CAS.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_CTLDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_CS0.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_CS0.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_CS0.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_cs0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_ADDR      (REGS_IOMUXC_BASE + 0x468)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_cs0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_CTLDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_CS0.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_CS0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_CS0.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_CTLDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_CS1.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_CS1.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_CS1.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_cs1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_ADDR      (REGS_IOMUXC_BASE + 0x46c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_cs1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_CTLDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_CS1.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_CS1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_CS1.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_DQM0.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_DQM0.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM0.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM0.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ADDR      (REGS_IOMUXC_BASE + 0x470)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_DQM0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_DQM0.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM0.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_DQM1.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_DQM1.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM1.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM1.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ADDR      (REGS_IOMUXC_BASE + 0x474)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_DQM1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_DQM1.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM1.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_DQM2.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_DQM2.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM2.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM2.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ADDR      (REGS_IOMUXC_BASE + 0x478)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_DQM2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_DQM2.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM2.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_DQM3.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_DQM3.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM3.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM3.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ADDR      (REGS_IOMUXC_BASE + 0x47c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_DQM3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_DQM3.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM3.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_DQM4.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_DQM4.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM4.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM4.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_ADDR      (REGS_IOMUXC_BASE + 0x480)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_DQM4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_DQM4.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM4.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_DQM5.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_DQM5.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM5.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM5.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_ADDR      (REGS_IOMUXC_BASE + 0x484)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm5_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_DQM5.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_DQM5.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM5.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM5.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_DQM6.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_DQM6.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM6.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM6.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_ADDR      (REGS_IOMUXC_BASE + 0x488)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm6_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_DQM6.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_DQM6.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM6.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM6.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_DQM7.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_DQM7.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM7.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM7.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_ADDR      (REGS_IOMUXC_BASE + 0x48c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm7_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_DQM7.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_DQM7.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_DQM7.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_DQM7.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_RAS.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_RAS.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_RAS.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_RAS.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_ras_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_ADDR      (REGS_IOMUXC_BASE + 0x490)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_ras_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_RAS.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_RAS.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_RAS.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_RAS.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_RESET.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_RESET.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_RESET.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_RESET.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_RESET.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_RESET.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_RESET.
        unsigned DDR_SEL : 2; //!< DDR Select Field Select one out of next values for pad: DRAM_RESET.
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_reset_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ADDR      (REGS_IOMUXC_BASE + 0x494)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_reset_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_RESET.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_RESET.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_RESET.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_RESET.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_RESET.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_RESET.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_RESET.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, field DDR_SEL[19:18] (RW)
 *
 * DDR Select Field Select one out of next values for pad: DRAM_RESET.
 *
 * Values:
 * 00 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 * 01 - DDR2 driver mode
 * 10 - LPDDR2 mode
 * 11 - Reserved
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL      (0x000c0000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL(v)   ((((reg32_t) v) << 18) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL(v)   (((v) << 18) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, DDR_SEL, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_SDBA0.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_SDBA0.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDBA0.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdba0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ADDR      (REGS_IOMUXC_BASE + 0x498)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdba0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_SDBA0.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_SDBA0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDBA0.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_ADDDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_SDBA1.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_SDBA1.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDBA1.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdba1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ADDR      (REGS_IOMUXC_BASE + 0x49c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdba1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_ADDDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_SDBA1.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_SDBA1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDBA1.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_CTLDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_SDBA2.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDBA2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDBA2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_SDBA2.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDBA2.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdba2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ADDR      (REGS_IOMUXC_BASE + 0x4a0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdba2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_CTLDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_SDBA2.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDBA2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDBA2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_SDBA2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDBA2.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_CTLDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_SDCKE0.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDCKE0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDCKE0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDCKE0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_SDCKE0.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDCKE0.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdcke0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ADDR      (REGS_IOMUXC_BASE + 0x4a4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdcke0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_CTLDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_SDCKE0.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDCKE0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDCKE0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDCKE0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_SDCKE0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDCKE0.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_CTLDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_SDCKE1.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDCKE1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDCKE1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDCKE1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_SDCKE1.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDCKE1.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdcke1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ADDR      (REGS_IOMUXC_BASE + 0x4a8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdcke1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_CTLDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_SDCKE1.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDCKE1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDCKE1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDCKE1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_SDCKE1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDCKE1.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDCLK_0.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_SDCLK_0.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_SDCLK_0.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDCLK_0.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdclk_0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_ADDR      (REGS_IOMUXC_BASE + 0x4ac)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdclk_0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDCLK_0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_SDCLK_0.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_SDCLK_0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDCLK_0.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDCLK_1.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_SDCLK_1.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_SDCLK_1.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDCLK_1.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdclk_1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_ADDR      (REGS_IOMUXC_BASE + 0x4b0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdclk_1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDCLK_1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_SDCLK_1.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_SDCLK_1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDCLK_1.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDODT0.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_SDODT0.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDODT0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDODT0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDODT0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_SDODT0.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDODT0.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdodt0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_ADDR      (REGS_IOMUXC_BASE + 0x4b4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdodt0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDODT0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_SDODT0.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDODT0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDODT0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDODT0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_SDODT0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDODT0.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDODT1.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_SDODT1.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDODT1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDODT1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDODT1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_SDODT1.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDODT1.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdodt1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_ADDR      (REGS_IOMUXC_BASE + 0x4b8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdodt1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDODT1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_SDODT1.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDODT1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDODT1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDODT1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_SDODT1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDODT1.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDQS0.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRHYS
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_ADDR      (REGS_IOMUXC_BASE + 0x4bc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDQS0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, field HYS[16:16] (RO)
 *
 * Hysteresis Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRHYS
 *
 * Values:
 * 0 - Hysteresis Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_HYS      (0x00010000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, field DDR_INPUT[17:17] (RO)
 *
 * DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
 *
 * Values:
 * 0 - CMOS input type
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DDR_INPUT      (0x00020000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDQS1.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRHYS
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_ADDR      (REGS_IOMUXC_BASE + 0x4c0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDQS1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, field HYS[16:16] (RO)
 *
 * Hysteresis Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRHYS
 *
 * Values:
 * 0 - Hysteresis Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_HYS      (0x00010000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, field DDR_INPUT[17:17] (RO)
 *
 * DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
 *
 * Values:
 * 0 - CMOS input type
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DDR_INPUT      (0x00020000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDQS2.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRHYS
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_ADDR      (REGS_IOMUXC_BASE + 0x4c4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDQS2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, field HYS[16:16] (RO)
 *
 * Hysteresis Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRHYS
 *
 * Values:
 * 0 - Hysteresis Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_HYS      (0x00010000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, field DDR_INPUT[17:17] (RO)
 *
 * DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
 *
 * Values:
 * 0 - CMOS input type
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DDR_INPUT      (0x00020000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDQS3.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRHYS
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_ADDR      (REGS_IOMUXC_BASE + 0x4c8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDQS3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, field HYS[16:16] (RO)
 *
 * Hysteresis Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRHYS
 *
 * Values:
 * 0 - Hysteresis Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_HYS      (0x00010000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, field DDR_INPUT[17:17] (RO)
 *
 * DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
 *
 * Values:
 * 0 - CMOS input type
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DDR_INPUT      (0x00020000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDQS4.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS4.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS4.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS4.
        unsigned HYS : 1; //!< Hysteresis Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRHYS
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_ADDR      (REGS_IOMUXC_BASE + 0x4cc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDQS4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS4.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS4.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS4.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, field HYS[16:16] (RO)
 *
 * Hysteresis Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRHYS
 *
 * Values:
 * 0 - Hysteresis Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_HYS      (0x00010000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, field DDR_INPUT[17:17] (RO)
 *
 * DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
 *
 * Values:
 * 0 - CMOS input type
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DDR_INPUT      (0x00020000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDQS5.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS5.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS5.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS5.
        unsigned HYS : 1; //!< Hysteresis Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRHYS
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_ADDR      (REGS_IOMUXC_BASE + 0x4d0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs5_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDQS5.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS5.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS5.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS5.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, field HYS[16:16] (RO)
 *
 * Hysteresis Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRHYS
 *
 * Values:
 * 0 - Hysteresis Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_HYS      (0x00010000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, field DDR_INPUT[17:17] (RO)
 *
 * DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
 *
 * Values:
 * 0 - CMOS input type
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DDR_INPUT      (0x00020000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDQS6.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS6.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS6.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS6.
        unsigned HYS : 1; //!< Hysteresis Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRHYS
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_ADDR      (REGS_IOMUXC_BASE + 0x4d4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs6_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDQS6.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS6.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS6.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS6.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, field HYS[16:16] (RO)
 *
 * Hysteresis Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRHYS
 *
 * Values:
 * 0 - Hysteresis Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_HYS      (0x00010000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, field DDR_INPUT[17:17] (RO)
 *
 * DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
 *
 * Values:
 * 0 - CMOS input type
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DDR_INPUT      (0x00020000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: DRAM_SDQS7.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS7.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS7.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS7.
        unsigned HYS : 1; //!< Hysteresis Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRHYS
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_ADDR      (REGS_IOMUXC_BASE + 0x4d8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs7_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: DRAM_SDQS7.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: DRAM_SDQS7.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: DRAM_SDQS7.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: DRAM_SDQS7.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, field HYS[16:16] (RO)
 *
 * Hysteresis Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRHYS
 *
 * Values:
 * 0 - Hysteresis Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_HYS      (0x00010000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, field DDR_INPUT[17:17] (RO)
 *
 * DDR / CMOS Input Mode Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
 *
 * Values:
 * 0 - CMOS input type
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DDR_INPUT      (0x00020000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_CTLDS
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for pad: DRAM_SDWE.
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPKE
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDRPK
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: DRAM_SDWE.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDWE.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdwe_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_ADDR      (REGS_IOMUXC_BASE + 0x4dc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdwe_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_CTLDS
 *
 * Values:
 * 0 - Output driver disabled.
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for pad: DRAM_SDWE.
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, ODT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, field PKE[12:12] (RO)
 *
 * Pull / Keep Enable Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_PKE      (0x00001000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDRPK
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: DRAM_SDWE.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: DRAM_SDWE.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_A16.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_A16.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_A16.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_A16.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_A16.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_A16.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_A16.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_A16.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a16_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_ADDR      (REGS_IOMUXC_BASE + 0x4e0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a16_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_A16.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_A16.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_A16.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_A16.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_A16.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_A16.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_A16.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_A16.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A16, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_A17.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_A17.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_A17.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_A17.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_A17.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_A17.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_A17.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_A17.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a17_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_ADDR      (REGS_IOMUXC_BASE + 0x4e4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a17_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_A17.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_A17.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_A17.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_A17.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_A17.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_A17.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_A17.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_A17.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A17, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_A18.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_A18.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_A18.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_A18.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_A18.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_A18.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_A18.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_A18.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a18_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_ADDR      (REGS_IOMUXC_BASE + 0x4e8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a18_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_A18.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_A18.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_A18.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_A18.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_A18.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_A18.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_A18.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_A18.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A18, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_A19.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_A19.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_A19.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_A19.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_A19.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_A19.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_A19.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_A19.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a19_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_ADDR      (REGS_IOMUXC_BASE + 0x4ec)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a19_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_A19.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_A19.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_A19.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_A19.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_A19.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_A19.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_A19.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_A19.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A19, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_A20.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_A20.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_A20.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_A20.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_A20.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_A20.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_A20.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_A20.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a20_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_ADDR      (REGS_IOMUXC_BASE + 0x4f0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a20_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_A20.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_A20.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_A20.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_A20.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_A20.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_A20.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_A20.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_A20.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A20, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_A21.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_A21.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_A21.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_A21.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_A21.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_A21.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_A21.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_A21.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a21_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_ADDR      (REGS_IOMUXC_BASE + 0x4f4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a21_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_A21.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_A21.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_A21.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_A21.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_A21.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_A21.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_A21.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_A21.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A21, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_A22.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_A22.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_A22.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_A22.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_A22.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_A22.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_A22.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_A22.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a22_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_ADDR      (REGS_IOMUXC_BASE + 0x4f8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a22_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_A22.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_A22.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_A22.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_A22.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_A22.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_A22.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_A22.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_A22.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A22, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_A23.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_A23.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_A23.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_A23.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_A23.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_A23.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_A23.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_A23.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a23_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_ADDR      (REGS_IOMUXC_BASE + 0x4fc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a23_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_A23.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_A23.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_A23.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_A23.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_A23.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_A23.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_A23.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_A23.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A23, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_A24.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_A24.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_A24.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_A24.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_A24.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_A24.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_A24.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_A24.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a24_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_ADDR      (REGS_IOMUXC_BASE + 0x500)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a24_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_A24.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_A24.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_A24.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_A24.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_A24.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_A24.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_A24.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_A24.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A24, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_A25.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_A25.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_A25.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_A25.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_A25.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_A25.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_A25.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_A25.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a25_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_ADDR      (REGS_IOMUXC_BASE + 0x504)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a25_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_A25.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_A25.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_A25.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_A25.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_A25.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_A25.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_A25.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_A25.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_A25, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_BCLK.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_BCLK.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_BCLK.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_BCLK.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_BCLK.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_BCLK.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_BCLK.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_BCLK.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_bclk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_ADDR      (REGS_IOMUXC_BASE + 0x508)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_bclk_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_BCLK.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_BCLK.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_BCLK.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_BCLK.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_BCLK.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_BCLK.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_BCLK.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_BCLK.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_CS0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_CS0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_CS0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_CS0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_CS0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_CS0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_CS0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_CS0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_cs0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_ADDR      (REGS_IOMUXC_BASE + 0x50c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_cs0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_CS0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_CS0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_CS0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_CS0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_CS0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_CS0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_CS0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_CS0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_CS1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_CS1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_CS1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_CS1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_CS1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_CS1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_CS1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_CS1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_cs1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_ADDR      (REGS_IOMUXC_BASE + 0x510)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_cs1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_CS1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_CS1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_CS1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_CS1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_CS1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_CS1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_CS1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_CS1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_CS1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D16.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D16.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D16.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D16.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D16.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D16.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D16.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D16.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d16_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_ADDR      (REGS_IOMUXC_BASE + 0x514)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d16_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D16.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D16.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D16.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D16.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D16.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D16.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D16.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D16.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D16, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D17.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D17.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D17.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D17.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D17.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D17.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D17.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D17.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d17_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_ADDR      (REGS_IOMUXC_BASE + 0x518)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d17_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D17.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D17.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D17.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D17.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D17.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D17.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D17.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D17.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D17, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D18.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D18.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D18.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D18.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D18.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D18.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D18.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D18.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d18_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_ADDR      (REGS_IOMUXC_BASE + 0x51c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d18_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D18.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D18.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D18.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D18.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D18.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D18.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D18.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D18.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D18, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D19.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D19.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D19.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D19.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D19.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D19.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D19.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D19.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d19_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_ADDR      (REGS_IOMUXC_BASE + 0x520)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d19_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D19.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D19.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D19.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D19.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D19.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D19.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D19.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D19.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D19, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D20.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D20.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D20.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D20.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D20.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D20.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D20.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D20.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d20_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_ADDR      (REGS_IOMUXC_BASE + 0x524)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d20_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D20.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D20.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D20.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D20.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D20.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D20.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D20.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D20.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D20, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D21.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D21.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D21.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D21.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D21.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D21.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D21.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D21.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d21_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_ADDR      (REGS_IOMUXC_BASE + 0x528)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d21_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D21.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D21.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D21.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D21.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D21.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D21.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D21.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D21.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D21, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D22.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D22.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D22.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D22.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D22.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D22.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D22.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D22.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d22_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_ADDR      (REGS_IOMUXC_BASE + 0x52c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d22_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D22.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D22.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D22.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D22.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D22.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D22.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D22.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D22.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D22, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D23.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D23.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D23.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D23.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D23.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D23.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D23.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D23.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d23_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_ADDR      (REGS_IOMUXC_BASE + 0x530)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d23_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D23.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D23.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D23.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D23.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D23.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D23.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D23.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D23.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D23, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D24.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D24.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D24.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D24.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D24.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D24.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D24.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D24.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d24_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_ADDR      (REGS_IOMUXC_BASE + 0x534)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d24_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D24.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D24.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D24.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D24.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D24.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D24.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D24.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D24.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D24, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D25.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D25.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D25.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D25.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D25.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D25.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D25.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D25.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d25_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_ADDR      (REGS_IOMUXC_BASE + 0x538)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d25_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D25.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D25.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D25.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D25.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D25.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D25.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D25.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D25.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D25, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D26.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D26.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D26.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D26.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D26.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D26.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D26.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D26.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d26_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_ADDR      (REGS_IOMUXC_BASE + 0x53c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d26_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D26.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D26.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D26.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D26.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D26.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D26.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D26.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D26.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D26, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D27.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D27.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D27.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D27.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D27.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D27.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D27.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D27.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d27_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_ADDR      (REGS_IOMUXC_BASE + 0x540)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d27_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D27.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D27.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D27.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D27.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D27.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D27.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D27.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D27.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D27, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D28.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D28.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D28.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D28.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D28.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D28.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D28.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D28.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d28_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_ADDR      (REGS_IOMUXC_BASE + 0x544)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d28_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D28.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D28.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D28.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D28.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D28.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D28.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D28.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D28.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D28, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D29.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D29.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D29.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D29.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D29.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D29.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D29.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D29.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d29_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_ADDR      (REGS_IOMUXC_BASE + 0x548)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d29_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D29.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D29.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D29.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D29.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D29.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D29.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D29.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D29.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D29, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D30.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D30.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D30.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D30.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D30.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D30.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D30.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D30.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d30_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_ADDR      (REGS_IOMUXC_BASE + 0x54c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d30_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D30.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D30.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D30.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D30.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D30.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D30.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D30.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D30.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D30, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_D31.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_D31.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_D31.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_D31.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_D31.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_D31.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_D31.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_D31.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d31_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_ADDR      (REGS_IOMUXC_BASE + 0x550)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d31_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_D31.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_D31.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_D31.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_D31.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_D31.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_D31.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_D31.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_D31.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_D31, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_ADDR      (REGS_IOMUXC_BASE + 0x554)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_ADDR      (REGS_IOMUXC_BASE + 0x558)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA10.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA10.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA10.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA10.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA10.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA10.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA10.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA10.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da10_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_ADDR      (REGS_IOMUXC_BASE + 0x55c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da10_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA10.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA10.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA10.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA10.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA10.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA10.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA10.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA10.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA10, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA11.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA11.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA11.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA11.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA11.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA11.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA11.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA11.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da11_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_ADDR      (REGS_IOMUXC_BASE + 0x560)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da11_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA11.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA11.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA11.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA11.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA11.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA11.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA11.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA11.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA11, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA12.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA12.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA12.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA12.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA12.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA12.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA12.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA12.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da12_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_ADDR      (REGS_IOMUXC_BASE + 0x564)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da12_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA12.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA12.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA12.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA12.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA12.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA12.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA12.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA12.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA12, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA13.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA13.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA13.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA13.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA13.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA13.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA13.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA13.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da13_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_ADDR      (REGS_IOMUXC_BASE + 0x568)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da13_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA13.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA13.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA13.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA13.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA13.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA13.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA13.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA13.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA13, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA14.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA14.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA14.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA14.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA14.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA14.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA14.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA14.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da14_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_ADDR      (REGS_IOMUXC_BASE + 0x56c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da14_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA14.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA14.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA14.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA14.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA14.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA14.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA14.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA14.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA14, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA15.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA15.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA15.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA15.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA15.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA15.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA15.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA15.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da15_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_ADDR      (REGS_IOMUXC_BASE + 0x570)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da15_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA15.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA15.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA15.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA15.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA15.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA15.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA15.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA15.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA15, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_ADDR      (REGS_IOMUXC_BASE + 0x574)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_ADDR      (REGS_IOMUXC_BASE + 0x578)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA4.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA4.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA4.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA4.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA4.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA4.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA4.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA4.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_ADDR      (REGS_IOMUXC_BASE + 0x57c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA4.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA4.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA4.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA4.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA4.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA4.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA4, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA5.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA5.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA5.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA5.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA5.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA5.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA5.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA5.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_ADDR      (REGS_IOMUXC_BASE + 0x580)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da5_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA5.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA5.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA5.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA5.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA5.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA5.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA5.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA5.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA5, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA6.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA6.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA6.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA6.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA6.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA6.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA6.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA6.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_ADDR      (REGS_IOMUXC_BASE + 0x584)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da6_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA6.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA6.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA6.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA6.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA6.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA6.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA6.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA6.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA6, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA7.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA7.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA7.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA7.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA7.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA7.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA7.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA7.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_ADDR      (REGS_IOMUXC_BASE + 0x588)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da7_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA7.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA7.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA7.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA7.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA7.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA7.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA7.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA7.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA7, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA8.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA8.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA8.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA8.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA8.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA8.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA8.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA8.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da8_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_ADDR      (REGS_IOMUXC_BASE + 0x58c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da8_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA8.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA8.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA8.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA8.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA8.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA8.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA8.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA8.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA8, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_DA9.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_DA9.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_DA9.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_DA9.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_DA9.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_DA9.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA9.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_DA9.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da9_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_ADDR      (REGS_IOMUXC_BASE + 0x590)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da9_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_DA9.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_DA9.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_DA9.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_DA9.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_DA9.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_DA9.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_DA9.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_DA9.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_DA9, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_EB0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_EB0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_EB0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_EB0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_EB0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_EB0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_EB0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_EB0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_ADDR      (REGS_IOMUXC_BASE + 0x594)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_EB0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_EB0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_EB0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_EB0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_EB0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_EB0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_EB0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_EB0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_EB1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_EB1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_EB1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_EB1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_EB1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_EB1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_EB1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_EB1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_ADDR      (REGS_IOMUXC_BASE + 0x598)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_EB1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_EB1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_EB1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_EB1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_EB1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_EB1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_EB1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_EB1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_EB2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_EB2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_EB2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_EB2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_EB2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_EB2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_EB2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_EB2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_ADDR      (REGS_IOMUXC_BASE + 0x59c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_EB2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_EB2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_EB2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_EB2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_EB2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_EB2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_EB2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_EB2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_EB3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_EB3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_EB3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_EB3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_EB3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_EB3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_EB3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_EB3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_ADDR      (REGS_IOMUXC_BASE + 0x5a0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_EB3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_EB3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_EB3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_EB3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_EB3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_EB3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_EB3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_EB3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_EB3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_LBA.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_LBA.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_LBA.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_LBA.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_LBA.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_LBA.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_LBA.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_LBA.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_lba_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_ADDR      (REGS_IOMUXC_BASE + 0x5a4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_lba_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_LBA.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_LBA.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_LBA.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_LBA.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_LBA.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_LBA.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_LBA.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_LBA.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_LBA, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_OE.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_OE.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_OE.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_OE.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_OE.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_OE.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_OE.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_OE.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_oe_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_ADDR      (REGS_IOMUXC_BASE + 0x5a8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_oe_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_OE.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_OE.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_OE.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_OE.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_OE.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_OE.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_OE.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_OE.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_OE, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_RW.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_RW.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_RW.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_RW.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_RW.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_RW.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_RW.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_RW.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_rw_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_ADDR      (REGS_IOMUXC_BASE + 0x5ac)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_rw_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_RW.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_RW.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_RW.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_RW.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_RW.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_RW.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_RW.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_RW.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_RW, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: EIM_WAIT.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: EIM_WAIT.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: EIM_WAIT.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: EIM_WAIT.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: EIM_WAIT.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: EIM_WAIT.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: EIM_WAIT.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: EIM_WAIT.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_wait_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_ADDR      (REGS_IOMUXC_BASE + 0x5b0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_wait_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: EIM_WAIT.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: EIM_WAIT.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: EIM_WAIT.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: EIM_WAIT.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: EIM_WAIT.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: EIM_WAIT.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: EIM_WAIT.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: EIM_WAIT.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: ENET_CRS_DV.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: ENET_CRS_DV.
        unsigned SPEED : 2; //!< Speed Field Read Only Field
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: ENET_CRS_DV.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: ENET_CRS_DV.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: ENET_CRS_DV.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: ENET_CRS_DV.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: ENET_CRS_DV.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_crs_dv_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_ADDR      (REGS_IOMUXC_BASE + 0x5b4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_crs_dv_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: ENET_CRS_DV.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: ENET_CRS_DV.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, field SPEED[7:6] (RO)
 *
 * Speed Field Read Only Field
 *
 * Values:
 * 10 - medium(100MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_SPEED      (0x000000c0)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: ENET_CRS_DV.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: ENET_CRS_DV.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: ENET_CRS_DV.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: ENET_CRS_DV.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: ENET_CRS_DV.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: ENET_MDC.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: ENET_MDC.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: ENET_MDC.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: ENET_MDC.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: ENET_MDC.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: ENET_MDC.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: ENET_MDC.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: ENET_MDC.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_mdc_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_ADDR      (REGS_IOMUXC_BASE + 0x5b8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_mdc_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: ENET_MDC.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: ENET_MDC.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: ENET_MDC.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: ENET_MDC.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: ENET_MDC.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: ENET_MDC.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: ENET_MDC.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: ENET_MDC.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDC, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: ENET_MDIO.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: ENET_MDIO.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: ENET_MDIO.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: ENET_MDIO.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: ENET_MDIO.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: ENET_MDIO.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: ENET_MDIO.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: ENET_MDIO.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_mdio_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_ADDR      (REGS_IOMUXC_BASE + 0x5bc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_mdio_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: ENET_MDIO.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: ENET_MDIO.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: ENET_MDIO.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: ENET_MDIO.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: ENET_MDIO.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: ENET_MDIO.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: ENET_MDIO.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: ENET_MDIO.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: ENET_REF_CLK.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: ENET_REF_CLK.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: ENET_REF_CLK.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: ENET_REF_CLK.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: ENET_REF_CLK.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: ENET_REF_CLK.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: ENET_REF_CLK.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: ENET_REF_CLK.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_ref_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_ADDR      (REGS_IOMUXC_BASE + 0x5c0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_ref_clk_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: ENET_REF_CLK.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: ENET_REF_CLK.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: ENET_REF_CLK.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: ENET_REF_CLK.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: ENET_REF_CLK.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: ENET_REF_CLK.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: ENET_REF_CLK.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: ENET_REF_CLK.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: ENET_RX_ER.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: ENET_RX_ER. 000 output driver disabled; 001 240 Ohm 010 120 Ohm 011 80 Ohm 100 60 Ohm 101 48 Ohm 110 40 Ohm 111 34 Ohm
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: ENET_RX_ER.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: ENET_RX_ER.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: ENET_RX_ER.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: ENET_RX_ER.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: ENET_RX_ER.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: ENET_RX_ER.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_rx_er_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_ADDR      (REGS_IOMUXC_BASE + 0x5c4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_rx_er_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: ENET_RX_ER.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: ENET_RX_ER. 000 output driver
 * disabled; 001 240 Ohm 010 120 Ohm 011 80 Ohm 100 60 Ohm 101 48 Ohm 110 40 Ohm 111 34 Ohm
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: ENET_RX_ER.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: ENET_RX_ER.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: ENET_RX_ER.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: ENET_RX_ER.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: ENET_RX_ER.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: ENET_RX_ER.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: ENET_RXD0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: ENET_RXD0.
        unsigned SPEED : 2; //!< Speed Field Read Only Field
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: ENET_RXD0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: ENET_RXD0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: ENET_RXD0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: ENET_RXD0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: ENET_RXD0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_rxd0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_ADDR      (REGS_IOMUXC_BASE + 0x5c8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_rxd0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: ENET_RXD0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: ENET_RXD0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, field SPEED[7:6] (RO)
 *
 * Speed Field Read Only Field
 *
 * Values:
 * 10 - medium(100MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_SPEED      (0x000000c0)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: ENET_RXD0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: ENET_RXD0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: ENET_RXD0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: ENET_RXD0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: ENET_RXD0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: ENET_RXD1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: ENET_RXD1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: ENET_RXD1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: ENET_RXD1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: ENET_RXD1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: ENET_RXD1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: ENET_RXD1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: ENET_RXD1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_rxd1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_ADDR      (REGS_IOMUXC_BASE + 0x5cc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_rxd1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: ENET_RXD1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: ENET_RXD1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: ENET_RXD1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: ENET_RXD1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: ENET_RXD1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: ENET_RXD1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: ENET_RXD1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: ENET_RXD1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: ENET_TX_EN.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: ENET_TX_EN.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: ENET_TX_EN.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: ENET_TX_EN.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: ENET_TX_EN.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: ENET_TX_EN.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: ENET_TX_EN.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: ENET_TX_EN.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_tx_en_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_ADDR      (REGS_IOMUXC_BASE + 0x5d0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_tx_en_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: ENET_TX_EN.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: ENET_TX_EN.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: ENET_TX_EN.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: ENET_TX_EN.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: ENET_TX_EN.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: ENET_TX_EN.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: ENET_TX_EN.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: ENET_TX_EN.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: ENET_TXD0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: ENET_TXD0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: ENET_TXD0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: ENET_TXD0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: ENET_TXD0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: ENET_TXD0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: ENET_TXD0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: ENET_TXD0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_txd0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_ADDR      (REGS_IOMUXC_BASE + 0x5d4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_txd0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: ENET_TXD0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: ENET_TXD0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: ENET_TXD0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: ENET_TXD0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: ENET_TXD0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: ENET_TXD0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: ENET_TXD0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: ENET_TXD0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: ENET_TXD1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: ENET_TXD1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: ENET_TXD1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: ENET_TXD1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: ENET_TXD1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: ENET_TXD1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: ENET_TXD1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: ENET_TXD1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_txd1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_ADDR      (REGS_IOMUXC_BASE + 0x5d8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_txd1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: ENET_TXD1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: ENET_TXD1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: ENET_TXD1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: ENET_TXD1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: ENET_TXD1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: ENET_TXD1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: ENET_TXD1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: ENET_TXD1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_0.
        unsigned SPEED : 2; //!< Speed Field Read Only Field
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_ADDR      (REGS_IOMUXC_BASE + 0x5dc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, field SPEED[7:6] (RO)
 *
 * Speed Field Read Only Field
 *
 * Values:
 * 10 - medium(100MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_SPEED      (0x000000c0)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_ADDR      (REGS_IOMUXC_BASE + 0x5e0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_16.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_16.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_16.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_16.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_16.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_16.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_16.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_16.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_16_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_ADDR      (REGS_IOMUXC_BASE + 0x5e4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_16_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_16.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_16.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_16.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_16.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_16.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_16.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_16.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_16.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_16, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_17.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_17.
        unsigned SPEED : 2; //!< Speed Field Read Only Field
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_17.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_17.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_17.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_17.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_17.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_17_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_ADDR      (REGS_IOMUXC_BASE + 0x5e8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_17_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_17.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_17.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, field SPEED[7:6] (RO)
 *
 * Speed Field Read Only Field
 *
 * Values:
 * 10 - medium(100MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_SPEED      (0x000000c0)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_17.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_17.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_17.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_17.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_17.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_17, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_18.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_18.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_18.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_18.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_18.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_18.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_18.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_18.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_18_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_ADDR      (REGS_IOMUXC_BASE + 0x5ec)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_18_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_18.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_18.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_18.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_18.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_18.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_18.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_18.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_18.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_18, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_19.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_19.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_19.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_19.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_19.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_19.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_19.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_19.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_19_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_ADDR      (REGS_IOMUXC_BASE + 0x5f0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_19_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_19.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_19.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_19.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_19.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_19.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_19.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_19.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_19.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_19, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_ADDR      (REGS_IOMUXC_BASE + 0x5f4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_ADDR      (REGS_IOMUXC_BASE + 0x5f8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_4.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_4.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_4.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_4.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_4.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_4.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_4.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_4.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_ADDR      (REGS_IOMUXC_BASE + 0x5fc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_4.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_4.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_4.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_4.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_4.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_4.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_4, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_5.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_5.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_5.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_5.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_5.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_5.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_5.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_5.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_ADDR      (REGS_IOMUXC_BASE + 0x600)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_5_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_5.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_5.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_5.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_5.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_5.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_5.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_5.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_5.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_5, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_6.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_6.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_6.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_6.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_6.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_6.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_6.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_6.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_ADDR      (REGS_IOMUXC_BASE + 0x604)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_6_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_6.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_6.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_6.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_6.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_6.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_6.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_6.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_6.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_6, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_7.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_7.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_7.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_7.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_7.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_7.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_7.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_7.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_ADDR      (REGS_IOMUXC_BASE + 0x608)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_7_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_7.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_7.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_7.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_7.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_7.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_7.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_7.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_7.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_7, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_8.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_8.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_8.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_8.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_8.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_8.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_8.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_8.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_8_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_ADDR      (REGS_IOMUXC_BASE + 0x60c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_8_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_8.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_8.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_8.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_8.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_8.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_8.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_8.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_8.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_8, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: GPIO_9.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: GPIO_9.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: GPIO_9.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: GPIO_9.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: GPIO_9.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: GPIO_9.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: GPIO_9.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: GPIO_9.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_9_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_ADDR      (REGS_IOMUXC_BASE + 0x610)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_9_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: GPIO_9.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: GPIO_9.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: GPIO_9.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: GPIO_9.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: GPIO_9.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: GPIO_9.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: GPIO_9.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: GPIO_9.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_GPIO_9, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Read Only Field
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field
        unsigned SPEED : 2; //!< Speed Field Read Only Field
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Read Only Field
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: JTAG_MOD.
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: JTAG_MOD.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: JTAG_MOD.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_mod_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_ADDR      (REGS_IOMUXC_BASE + 0x614)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_mod_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD, field SRE[0:0] (RO)
 *
 * Slew Rate Field Read Only Field
 *
 * Values:
 * 0 - Slow Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SRE      (0x00000001)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field
 *
 * Values:
 * 100 - 60 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD, field SPEED[7:6] (RO)
 *
 * Speed Field Read Only Field
 *
 * Values:
 * 01 - low(50MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SPEED      (0x000000c0)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD, field ODE[11:11] (RO)
 *
 * Open Drain Enable Field Read Only Field
 *
 * Values:
 * 0 - Open Drain Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_ODE      (0x00000800)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: JTAG_MOD.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field
 *
 * Values:
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: JTAG_MOD.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: JTAG_MOD.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Read Only Field
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field
        unsigned SPEED : 2; //!< Speed Field Read Only Field
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Read Only Field
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: JTAG_TCK.
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: JTAG_TCK.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: JTAG_TCK.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tck_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_ADDR      (REGS_IOMUXC_BASE + 0x618)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tck_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK, field SRE[0:0] (RO)
 *
 * Slew Rate Field Read Only Field
 *
 * Values:
 * 0 - Slow Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SRE      (0x00000001)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field
 *
 * Values:
 * 100 - 60 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK, field SPEED[7:6] (RO)
 *
 * Speed Field Read Only Field
 *
 * Values:
 * 01 - low(50MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SPEED      (0x000000c0)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK, field ODE[11:11] (RO)
 *
 * Open Drain Enable Field Read Only Field
 *
 * Values:
 * 0 - Open Drain Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_ODE      (0x00000800)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: JTAG_TCK.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field
 *
 * Values:
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: JTAG_TCK.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: JTAG_TCK.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Read Only Field
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field
        unsigned SPEED : 2; //!< Speed Field Read Only Field
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Read Only Field
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: JTAG_TDI.
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: JTAG_TDI.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: JTAG_TDI.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tdi_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_ADDR      (REGS_IOMUXC_BASE + 0x61c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tdi_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI, field SRE[0:0] (RO)
 *
 * Slew Rate Field Read Only Field
 *
 * Values:
 * 0 - Slow Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SRE      (0x00000001)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field
 *
 * Values:
 * 100 - 60 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI, field SPEED[7:6] (RO)
 *
 * Speed Field Read Only Field
 *
 * Values:
 * 01 - low(50MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SPEED      (0x000000c0)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI, field ODE[11:11] (RO)
 *
 * Open Drain Enable Field Read Only Field
 *
 * Values:
 * 0 - Open Drain Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_ODE      (0x00000800)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: JTAG_TDI.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field
 *
 * Values:
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: JTAG_TDI.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: JTAG_TDI.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Read Only Field
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field
        unsigned SPEED : 2; //!< Speed Field Read Only Field
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Read Only Field
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: JTAG_TDO.
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Read Only Field
        unsigned HYS : 1; //!< Hysteresis Enable Field Read Only Field
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tdo_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_ADDR      (REGS_IOMUXC_BASE + 0x620)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tdo_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO, field SRE[0:0] (RO)
 *
 * Slew Rate Field Read Only Field
 *
 * Values:
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SRE      (0x00000001)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field
 *
 * Values:
 * 110 - 40 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO, field SPEED[7:6] (RO)
 *
 * Speed Field Read Only Field
 *
 * Values:
 * 10 - medium(100MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SPEED      (0x000000c0)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO, field ODE[11:11] (RO)
 *
 * Open Drain Enable Field Read Only Field
 *
 * Values:
 * 0 - Open Drain Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_ODE      (0x00000800)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: JTAG_TDO.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field
 *
 * Values:
 * 0 - Keeper
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO, field PUS[15:14] (RO)
 *
 * Pull Up / Down Config. Field Read Only Field
 *
 * Values:
 * 10 - 100KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PUS      (0x0000c000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO, field HYS[16:16] (RO)
 *
 * Hysteresis Enable Field Read Only Field
 *
 * Values:
 * 0 - Hysteresis Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_HYS      (0x00010000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Read Only Field
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field
        unsigned SPEED : 2; //!< Speed Field Read Only Field
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Read Only Field
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: JTAG_TMS.
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: JTAG_TMS.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: JTAG_TMS.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tms_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_ADDR      (REGS_IOMUXC_BASE + 0x624)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tms_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS, field SRE[0:0] (RO)
 *
 * Slew Rate Field Read Only Field
 *
 * Values:
 * 0 - Slow Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SRE      (0x00000001)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field
 *
 * Values:
 * 100 - 60 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS, field SPEED[7:6] (RO)
 *
 * Speed Field Read Only Field
 *
 * Values:
 * 01 - low(50MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SPEED      (0x000000c0)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS, field ODE[11:11] (RO)
 *
 * Open Drain Enable Field Read Only Field
 *
 * Values:
 * 0 - Open Drain Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_ODE      (0x00000800)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: JTAG_TMS.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field
 *
 * Values:
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: JTAG_TMS.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: JTAG_TMS.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Read Only Field
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Read Only Field
        unsigned SPEED : 2; //!< Speed Field Read Only Field
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Read Only Field
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: JTAG_TRSTB.
        unsigned PUE : 1; //!< Pull / Keep Select Field Read Only Field
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: JTAG_TRSTB.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: JTAG_TRSTB.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_trstb_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_ADDR      (REGS_IOMUXC_BASE + 0x628)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_trstb_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB, field SRE[0:0] (RO)
 *
 * Slew Rate Field Read Only Field
 *
 * Values:
 * 0 - Slow Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_SRE      (0x00000001)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB, field DSE[5:3] (RO)
 *
 * Drive Strength Field Read Only Field
 *
 * Values:
 * 100 - 60 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_DSE      (0x00000038)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB, field SPEED[7:6] (RO)
 *
 * Speed Field Read Only Field
 *
 * Values:
 * 01 - low(50MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_SPEED      (0x000000c0)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB, field ODE[11:11] (RO)
 *
 * Open Drain Enable Field Read Only Field
 *
 * Values:
 * 0 - Open Drain Disabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_ODE      (0x00000800)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: JTAG_TRSTB.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB, field PUE[13:13] (RO)
 *
 * Pull / Keep Select Field Read Only Field
 *
 * Values:
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PUE      (0x00002000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: JTAG_TRSTB.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: JTAG_TRSTB.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: KEY_COL0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: KEY_COL0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: KEY_COL0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: KEY_COL0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: KEY_COL0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: KEY_COL0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: KEY_COL0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: KEY_COL0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_ADDR      (REGS_IOMUXC_BASE + 0x62c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: KEY_COL0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: KEY_COL0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: KEY_COL0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: KEY_COL0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: KEY_COL0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: KEY_COL0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: KEY_COL0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: KEY_COL0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: KEY_COL1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: KEY_COL1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: KEY_COL1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: KEY_COL1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: KEY_COL1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: KEY_COL1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: KEY_COL1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: KEY_COL1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_ADDR      (REGS_IOMUXC_BASE + 0x630)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: KEY_COL1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: KEY_COL1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: KEY_COL1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: KEY_COL1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: KEY_COL1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: KEY_COL1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: KEY_COL1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: KEY_COL1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: KEY_COL2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: KEY_COL2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: KEY_COL2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: KEY_COL2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: KEY_COL2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: KEY_COL2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: KEY_COL2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: KEY_COL2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_ADDR      (REGS_IOMUXC_BASE + 0x634)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: KEY_COL2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: KEY_COL2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: KEY_COL2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: KEY_COL2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: KEY_COL2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: KEY_COL2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: KEY_COL2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: KEY_COL2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: KEY_COL3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: KEY_COL3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: KEY_COL3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: KEY_COL3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: KEY_COL3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: KEY_COL3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: KEY_COL3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: KEY_COL3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_ADDR      (REGS_IOMUXC_BASE + 0x638)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: KEY_COL3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: KEY_COL3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: KEY_COL3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: KEY_COL3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: KEY_COL3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: KEY_COL3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: KEY_COL3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: KEY_COL3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: KEY_COL4.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: KEY_COL4.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: KEY_COL4.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: KEY_COL4.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: KEY_COL4.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: KEY_COL4.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: KEY_COL4.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: KEY_COL4.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ADDR      (REGS_IOMUXC_BASE + 0x63c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: KEY_COL4.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: KEY_COL4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: KEY_COL4.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: KEY_COL4.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: KEY_COL4.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: KEY_COL4.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: KEY_COL4.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: KEY_COL4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_COL4, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: KEY_ROW0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: KEY_ROW0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: KEY_ROW0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: KEY_ROW0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: KEY_ROW0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: KEY_ROW0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: KEY_ROW0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: KEY_ROW0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_ADDR      (REGS_IOMUXC_BASE + 0x640)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: KEY_ROW0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: KEY_ROW0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: KEY_ROW0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: KEY_ROW0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: KEY_ROW0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: KEY_ROW0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: KEY_ROW0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: KEY_ROW0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: KEY_ROW1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: KEY_ROW1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: KEY_ROW1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: KEY_ROW1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: KEY_ROW1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: KEY_ROW1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: KEY_ROW1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: KEY_ROW1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_ADDR      (REGS_IOMUXC_BASE + 0x644)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: KEY_ROW1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: KEY_ROW1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: KEY_ROW1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: KEY_ROW1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: KEY_ROW1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: KEY_ROW1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: KEY_ROW1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: KEY_ROW1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: KEY_ROW2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: KEY_ROW2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: KEY_ROW2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: KEY_ROW2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: KEY_ROW2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: KEY_ROW2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: KEY_ROW2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: KEY_ROW2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_ADDR      (REGS_IOMUXC_BASE + 0x648)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: KEY_ROW2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: KEY_ROW2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: KEY_ROW2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: KEY_ROW2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: KEY_ROW2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: KEY_ROW2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: KEY_ROW2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: KEY_ROW2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: KEY_ROW3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: KEY_ROW3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: KEY_ROW3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: KEY_ROW3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: KEY_ROW3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: KEY_ROW3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: KEY_ROW3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: KEY_ROW3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_ADDR      (REGS_IOMUXC_BASE + 0x64c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: KEY_ROW3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: KEY_ROW3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: KEY_ROW3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: KEY_ROW3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: KEY_ROW3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: KEY_ROW3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: KEY_ROW3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: KEY_ROW3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: KEY_ROW4.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: KEY_ROW4.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: KEY_ROW4.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: KEY_ROW4.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: KEY_ROW4.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: KEY_ROW4.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: KEY_ROW4.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: KEY_ROW4.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ADDR      (REGS_IOMUXC_BASE + 0x650)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: KEY_ROW4.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: KEY_ROW4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: KEY_ROW4.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: KEY_ROW4.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: KEY_ROW4.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: KEY_ROW4.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: KEY_ROW4.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: KEY_ROW4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_ALE.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_ALE.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_ALE.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_ALE.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_ALE.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_ALE.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_ALE.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_ALE.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_ale_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_ADDR      (REGS_IOMUXC_BASE + 0x654)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_ale_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_ALE.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_ALE.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_ALE.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_ALE.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_ALE.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_ALE.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_ALE.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_ALE.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_CLE.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_CLE.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_CLE.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_CLE.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_CLE.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_CLE.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_CLE.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_CLE.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cle_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_ADDR      (REGS_IOMUXC_BASE + 0x658)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cle_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_CLE.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_CLE.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_CLE.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_CLE.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_CLE.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_CLE.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_CLE.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_CLE.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_CS0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_CS0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_CS0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_CS0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_CS0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_CS0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_CS0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_CS0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_ADDR      (REGS_IOMUXC_BASE + 0x65c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_CS0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_CS0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_CS0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_CS0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_CS0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_CS0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_CS0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_CS0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_CS1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_CS1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_CS1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_CS1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_CS1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_CS1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_CS1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_CS1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_ADDR      (REGS_IOMUXC_BASE + 0x660)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_CS1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_CS1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_CS1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_CS1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_CS1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_CS1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_CS1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_CS1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_CS2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_CS2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_CS2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_CS2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_CS2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_CS2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_CS2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_CS2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_ADDR      (REGS_IOMUXC_BASE + 0x664)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_CS2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_CS2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_CS2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_CS2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_CS2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_CS2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_CS2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_CS2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_CS3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_CS3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_CS3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_CS3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_CS3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_CS3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_CS3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_CS3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_ADDR      (REGS_IOMUXC_BASE + 0x668)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_CS3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_CS3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_CS3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_CS3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_CS3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_CS3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_CS3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_CS3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_D0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_D0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_D0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_D0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_D0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_D0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_D0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_ADDR      (REGS_IOMUXC_BASE + 0x66c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_D0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_D0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_D0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_D0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_D0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_D0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_D0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_D1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_D1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_D1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_D1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_D1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_D1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_D1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_ADDR      (REGS_IOMUXC_BASE + 0x670)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_D1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_D1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_D1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_D1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_D1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_D1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_D1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_D2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_D2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_D2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_D2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_D2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_D2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_D2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_ADDR      (REGS_IOMUXC_BASE + 0x674)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_D2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_D2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_D2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_D2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_D2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_D2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_D2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_D3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_D3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_D3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_D3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_D3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_D3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_D3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_ADDR      (REGS_IOMUXC_BASE + 0x678)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_D3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_D3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_D3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_D3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_D3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_D3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_D3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_D4.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_D4.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_D4.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_D4.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_D4.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_D4.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D4.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_D4.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_ADDR      (REGS_IOMUXC_BASE + 0x67c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_D4.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_D4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_D4.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_D4.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_D4.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_D4.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D4.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_D4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D4, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_D5.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_D5.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_D5.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_D5.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_D5.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_D5.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D5.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_D5.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_ADDR      (REGS_IOMUXC_BASE + 0x680)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d5_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_D5.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_D5.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_D5.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_D5.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_D5.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_D5.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D5.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_D5.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D5, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_D6.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_D6.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_D6.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_D6.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_D6.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_D6.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D6.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_D6.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_ADDR      (REGS_IOMUXC_BASE + 0x684)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d6_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_D6.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_D6.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_D6.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_D6.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_D6.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_D6.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D6.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_D6.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D6, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_D7.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_D7.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_D7.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_D7.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_D7.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_D7.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D7.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_D7.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_ADDR      (REGS_IOMUXC_BASE + 0x688)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d7_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_D7.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_D7.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_D7.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_D7.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_D7.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_D7.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_D7.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_D7.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_D7, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_RB0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_RB0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_RB0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_RB0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_RB0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_RB0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_RB0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_RB0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_rb0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_ADDR      (REGS_IOMUXC_BASE + 0x68c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_rb0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_RB0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_RB0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_RB0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_RB0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_RB0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_RB0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_RB0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_RB0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: NANDF_WP_B.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: NANDF_WP_B.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: NANDF_WP_B.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: NANDF_WP_B.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: NANDF_WP_B.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: NANDF_WP_B.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: NANDF_WP_B.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: NANDF_WP_B.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_wp_b_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_ADDR      (REGS_IOMUXC_BASE + 0x690)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_wp_b_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: NANDF_WP_B.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: NANDF_WP_B.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: NANDF_WP_B.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: NANDF_WP_B.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: NANDF_WP_B.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: NANDF_WP_B.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: NANDF_WP_B.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: NANDF_WP_B.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_RD0.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_RD0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_RD0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RD0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_RD0.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RD0.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_ADDR      (REGS_IOMUXC_BASE + 0x694)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_RD0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
 *
 * Values:
 * 0 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_RD0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_RD0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RD0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_RD0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RD0.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_RD1.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_RD1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_RD1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RD1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_RD1.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RD1.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_ADDR      (REGS_IOMUXC_BASE + 0x698)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_RD1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
 *
 * Values:
 * 0 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_RD1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_RD1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RD1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_RD1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RD1.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_RD2.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_RD2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_RD2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RD2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_RD2.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RD2.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_ADDR      (REGS_IOMUXC_BASE + 0x69c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_RD2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
 *
 * Values:
 * 0 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_RD2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_RD2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RD2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_RD2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RD2.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_RD3.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_RD3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_RD3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RD3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_RD3.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RD3.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_ADDR      (REGS_IOMUXC_BASE + 0x6a0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_RD3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
 *
 * Values:
 * 0 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_RD3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_RD3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RD3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_RD3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RD3.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_RX_CTL.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_RX_CTL.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_RX_CTL.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RX_CTL.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_RX_CTL.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RX_CTL.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rx_ctl_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_ADDR      (REGS_IOMUXC_BASE + 0x6a4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rx_ctl_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_RX_CTL.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
 *
 * Values:
 * 0 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_RX_CTL.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_RX_CTL.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RX_CTL.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_RX_CTL.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RX_CTL.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_RXC.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_RXC.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_RXC.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RXC.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_RXC.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RXC.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rxc_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_ADDR      (REGS_IOMUXC_BASE + 0x6a8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rxc_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_RXC.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
 *
 * Values:
 * 0 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_RXC.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_RXC.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_RXC.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_RXC.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_RXC.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_TD0.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_TD0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_TD0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TD0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_TD0.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_TD0.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_ADDR      (REGS_IOMUXC_BASE + 0x6ac)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_TD0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_TD0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_TD0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TD0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_TD0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_TD0.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_TD1.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_TD1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_TD1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TD1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_TD1.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_TD1.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_ADDR      (REGS_IOMUXC_BASE + 0x6b0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_TD1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_TD1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_TD1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TD1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_TD1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_TD1.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_TD2.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_TD2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_TD2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TD2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_TD2.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_TD2.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_ADDR      (REGS_IOMUXC_BASE + 0x6b4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_TD2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_TD2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_TD2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TD2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_TD2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_TD2.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_TD3.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_TD3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_TD3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TD3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_TD3.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_TD3.
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_ADDR      (REGS_IOMUXC_BASE + 0x6b8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_TD3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_TD3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_TD3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TD3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_TD3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for pad: RGMII_TD3.
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, DDR_INPUT, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_TX_CTL.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_TX_CTL.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_TX_CTL.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TX_CTL.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_TX_CTL.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Read Only Field
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_tx_ctl_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_ADDR      (REGS_IOMUXC_BASE + 0x6bc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_tx_ctl_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_TX_CTL.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_TX_CTL.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_TX_CTL.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TX_CTL.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_TX_CTL.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, field DDR_INPUT[17:17] (RO)
 *
 * DDR / CMOS Input Mode Field Read Only Field
 *
 * Values:
 * 0 - CMOS input type
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DDR_INPUT      (0x00020000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: RGMII_TXC.
        unsigned RESERVED1 : 2; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Read Only Field
        unsigned RESERVED2 : 1; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: RGMII_TXC.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: RGMII_TXC.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TXC.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: RGMII_TXC.
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Read Only Field
        unsigned DDR_SEL : 2; //!< DDR Select Field Read Only Field Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
        unsigned DO_TRIM : 2; //!< DO Trim Field Read Only Field
        unsigned RESERVED3 : 10; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_txc_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_ADDR      (REGS_IOMUXC_BASE + 0x6c0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_txc_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: RGMII_TXC.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, field ODT[10:8] (RO)
 *
 * On Die Termination Field Read Only Field
 *
 * Values:
 * 000 - off
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_ODT      (0x00000700)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: RGMII_TXC.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: RGMII_TXC.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: RGMII_TXC.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: RGMII_TXC.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, HYS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, field DDR_INPUT[17:17] (RO)
 *
 * DDR / CMOS Input Mode Field Read Only Field
 *
 * Values:
 * 0 - CMOS input type
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DDR_INPUT      (0x00020000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, field DDR_SEL[19:18] (RO)
 *
 * DDR Select Field Read Only Field Can be configured using Group Control Register:
 * IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
 *
 * Values:
 * 0 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DDR_SEL      (0x000c0000)


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC, field DO_TRIM[21:20] (RO)
 *
 * DO Trim Field Read Only Field
 *
 * Values:
 * 0 - 0
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DO_TRIM      (20)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC_DO_TRIM      (0x00300000)


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD1_CLK.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD1_CLK.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD1_CLK.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD1_CLK.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD1_CLK.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD1_CLK.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD1_CLK.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD1_CLK.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_ADDR      (REGS_IOMUXC_BASE + 0x6c4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_clk_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD1_CLK.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD1_CLK.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD1_CLK.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD1_CLK.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD1_CLK.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD1_CLK.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD1_CLK.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD1_CLK.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CLK, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD1_CMD.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD1_CMD.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD1_CMD.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD1_CMD.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD1_CMD.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD1_CMD.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD1_CMD.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD1_CMD.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_cmd_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_ADDR      (REGS_IOMUXC_BASE + 0x6c8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_cmd_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD1_CMD.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD1_CMD.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD1_CMD.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD1_CMD.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD1_CMD.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD1_CMD.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD1_CMD.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD1_CMD.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_CMD, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD1_DAT0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD1_DAT0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD1_DAT0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD1_DAT0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD1_DAT0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD1_DAT0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD1_DAT0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD1_DAT0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_ADDR      (REGS_IOMUXC_BASE + 0x6cc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD1_DAT0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD1_DAT0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD1_DAT0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD1_DAT0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD1_DAT0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD1_DAT0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD1_DAT0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD1_DAT0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD1_DAT1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD1_DAT1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD1_DAT1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD1_DAT1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD1_DAT1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD1_DAT1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD1_DAT1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD1_DAT1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_ADDR      (REGS_IOMUXC_BASE + 0x6d0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD1_DAT1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD1_DAT1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD1_DAT1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD1_DAT1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD1_DAT1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD1_DAT1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD1_DAT1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD1_DAT1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD1_DAT2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD1_DAT2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD1_DAT2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD1_DAT2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD1_DAT2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD1_DAT2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD1_DAT2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD1_DAT2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_ADDR      (REGS_IOMUXC_BASE + 0x6d4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD1_DAT2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD1_DAT2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD1_DAT2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD1_DAT2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD1_DAT2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD1_DAT2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD1_DAT2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD1_DAT2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD1_DAT3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD1_DAT3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD1_DAT3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD1_DAT3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD1_DAT3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD1_DAT3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD1_DAT3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD1_DAT3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_ADDR      (REGS_IOMUXC_BASE + 0x6d8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD1_DAT3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD1_DAT3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD1_DAT3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD1_DAT3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD1_DAT3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD1_DAT3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD1_DAT3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD1_DAT3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD2_CLK.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD2_CLK.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD2_CLK.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD2_CLK.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD2_CLK.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD2_CLK.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD2_CLK.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD2_CLK.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_ADDR      (REGS_IOMUXC_BASE + 0x6dc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_clk_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD2_CLK.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD2_CLK.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD2_CLK.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD2_CLK.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD2_CLK.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD2_CLK.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD2_CLK.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD2_CLK.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CLK, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD2_CMD.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD2_CMD.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD2_CMD.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD2_CMD.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD2_CMD.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD2_CMD.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD2_CMD.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD2_CMD.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_cmd_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_ADDR      (REGS_IOMUXC_BASE + 0x6e0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_cmd_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD2_CMD.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD2_CMD.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD2_CMD.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD2_CMD.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD2_CMD.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD2_CMD.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD2_CMD.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD2_CMD.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_CMD, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD2_DAT0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD2_DAT0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD2_DAT0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD2_DAT0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD2_DAT0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD2_DAT0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD2_DAT0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD2_DAT0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_ADDR      (REGS_IOMUXC_BASE + 0x6e4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD2_DAT0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD2_DAT0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD2_DAT0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD2_DAT0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD2_DAT0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD2_DAT0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD2_DAT0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD2_DAT0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD2_DAT1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD2_DAT1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD2_DAT1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD2_DAT1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD2_DAT1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD2_DAT1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD2_DAT1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD2_DAT1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_ADDR      (REGS_IOMUXC_BASE + 0x6e8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD2_DAT1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD2_DAT1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD2_DAT1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD2_DAT1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD2_DAT1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD2_DAT1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD2_DAT1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD2_DAT1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD2_DAT2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD2_DAT2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD2_DAT2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD2_DAT2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD2_DAT2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD2_DAT2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD2_DAT2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD2_DAT2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_ADDR      (REGS_IOMUXC_BASE + 0x6ec)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD2_DAT2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD2_DAT2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD2_DAT2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD2_DAT2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD2_DAT2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD2_DAT2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD2_DAT2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD2_DAT2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD2_DAT3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD2_DAT3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD2_DAT3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD2_DAT3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD2_DAT3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD2_DAT3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD2_DAT3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD2_DAT3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_ADDR      (REGS_IOMUXC_BASE + 0x6f0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD2_DAT3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD2_DAT3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD2_DAT3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD2_DAT3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD2_DAT3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD2_DAT3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD2_DAT3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD2_DAT3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD3_CLK.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD3_CLK.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD3_CLK.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD3_CLK.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD3_CLK.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD3_CLK.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD3_CLK.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD3_CLK.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_ADDR      (REGS_IOMUXC_BASE + 0x6f4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_clk_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD3_CLK.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD3_CLK.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD3_CLK.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD3_CLK.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD3_CLK.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD3_CLK.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD3_CLK.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD3_CLK.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CLK, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD3_CMD.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD3_CMD.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD3_CMD.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD3_CMD.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD3_CMD.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD3_CMD.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD3_CMD.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD3_CMD.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_cmd_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_ADDR      (REGS_IOMUXC_BASE + 0x6f8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_cmd_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD3_CMD.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD3_CMD.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD3_CMD.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD3_CMD.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD3_CMD.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD3_CMD.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD3_CMD.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD3_CMD.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_CMD, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD3_DAT0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD3_DAT0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD3_DAT0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD3_DAT0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD3_DAT0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD3_DAT0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_ADDR      (REGS_IOMUXC_BASE + 0x6fc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD3_DAT0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD3_DAT0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD3_DAT0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD3_DAT0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD3_DAT0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD3_DAT0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD3_DAT1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD3_DAT1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD3_DAT1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD3_DAT1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD3_DAT1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD3_DAT1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_ADDR      (REGS_IOMUXC_BASE + 0x700)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD3_DAT1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD3_DAT1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD3_DAT1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD3_DAT1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD3_DAT1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD3_DAT1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD3_DAT2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD3_DAT2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD3_DAT2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD3_DAT2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD3_DAT2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD3_DAT2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_ADDR      (REGS_IOMUXC_BASE + 0x704)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD3_DAT2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD3_DAT2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD3_DAT2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD3_DAT2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD3_DAT2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD3_DAT2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD3_DAT3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD3_DAT3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD3_DAT3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD3_DAT3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD3_DAT3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD3_DAT3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_ADDR      (REGS_IOMUXC_BASE + 0x708)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD3_DAT3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD3_DAT3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD3_DAT3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD3_DAT3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD3_DAT3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD3_DAT3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD3_DAT4.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD3_DAT4.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD3_DAT4.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD3_DAT4.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT4.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD3_DAT4.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT4.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD3_DAT4.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_ADDR      (REGS_IOMUXC_BASE + 0x70c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD3_DAT4.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD3_DAT4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD3_DAT4.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD3_DAT4.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT4.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD3_DAT4.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT4.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD3_DAT4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD3_DAT5.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD3_DAT5.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD3_DAT5.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD3_DAT5.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT5.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD3_DAT5.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT5.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD3_DAT5.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_ADDR      (REGS_IOMUXC_BASE + 0x710)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat5_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD3_DAT5.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD3_DAT5.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD3_DAT5.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD3_DAT5.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT5.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD3_DAT5.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT5.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD3_DAT5.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD3_DAT6.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD3_DAT6.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD3_DAT6.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD3_DAT6.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT6.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD3_DAT6.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT6.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD3_DAT6.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_ADDR      (REGS_IOMUXC_BASE + 0x714)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat6_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD3_DAT6.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD3_DAT6.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD3_DAT6.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD3_DAT6.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT6.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD3_DAT6.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT6.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD3_DAT6.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD3_DAT7.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD3_DAT7.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD3_DAT7.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD3_DAT7.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT7.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD3_DAT7.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT7.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD3_DAT7.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_ADDR      (REGS_IOMUXC_BASE + 0x718)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat7_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD3_DAT7.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD3_DAT7.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD3_DAT7.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD3_DAT7.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD3_DAT7.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD3_DAT7.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD3_DAT7.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD3_DAT7.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD3_RST.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD3_RST.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD3_RST.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD3_RST.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD3_RST.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD3_RST.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD3_RST.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD3_RST.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_rst_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_ADDR      (REGS_IOMUXC_BASE + 0x71c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_rst_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD3_RST.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD3_RST.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD3_RST.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD3_RST.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD3_RST.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD3_RST.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD3_RST.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD3_RST.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD3_RST, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD4_CLK.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD4_CLK.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD4_CLK.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD4_CLK.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD4_CLK.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD4_CLK.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD4_CLK.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD4_CLK.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_clk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_ADDR      (REGS_IOMUXC_BASE + 0x720)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_clk_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD4_CLK.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD4_CLK.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD4_CLK.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD4_CLK.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD4_CLK.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD4_CLK.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD4_CLK.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD4_CLK.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CLK, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD4_CMD.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD4_CMD.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD4_CMD.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD4_CMD.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD4_CMD.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD4_CMD.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD4_CMD.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD4_CMD.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_cmd_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_ADDR      (REGS_IOMUXC_BASE + 0x724)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_cmd_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD4_CMD.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD4_CMD.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD4_CMD.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD4_CMD.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD4_CMD.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD4_CMD.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD4_CMD.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD4_CMD.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_CMD, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD4_DAT0.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD4_DAT0.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD4_DAT0.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD4_DAT0.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT0.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD4_DAT0.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT0.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD4_DAT0.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat0_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_ADDR      (REGS_IOMUXC_BASE + 0x728)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat0_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD4_DAT0.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD4_DAT0.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD4_DAT0.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD4_DAT0.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT0.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD4_DAT0.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT0.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD4_DAT0.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD4_DAT1.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD4_DAT1.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD4_DAT1.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD4_DAT1.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT1.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD4_DAT1.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT1.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD4_DAT1.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat1_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_ADDR      (REGS_IOMUXC_BASE + 0x72c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat1_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD4_DAT1.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD4_DAT1.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD4_DAT1.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD4_DAT1.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT1.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD4_DAT1.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT1.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD4_DAT1.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD4_DAT2.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD4_DAT2.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD4_DAT2.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD4_DAT2.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT2.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD4_DAT2.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT2.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD4_DAT2.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat2_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_ADDR      (REGS_IOMUXC_BASE + 0x730)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat2_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD4_DAT2.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD4_DAT2.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD4_DAT2.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD4_DAT2.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT2.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD4_DAT2.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT2.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD4_DAT2.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD4_DAT3.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD4_DAT3.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD4_DAT3.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD4_DAT3.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT3.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD4_DAT3.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT3.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD4_DAT3.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat3_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_ADDR      (REGS_IOMUXC_BASE + 0x734)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat3_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD4_DAT3.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD4_DAT3.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD4_DAT3.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD4_DAT3.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT3.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD4_DAT3.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT3.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD4_DAT3.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD4_DAT4.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD4_DAT4.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD4_DAT4.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD4_DAT4.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT4.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD4_DAT4.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT4.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD4_DAT4.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat4_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_ADDR      (REGS_IOMUXC_BASE + 0x738)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat4_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD4_DAT4.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD4_DAT4.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD4_DAT4.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD4_DAT4.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT4.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD4_DAT4.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT4.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD4_DAT4.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD4_DAT5.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD4_DAT5.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD4_DAT5.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD4_DAT5.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT5.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD4_DAT5.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT5.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD4_DAT5.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat5_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_ADDR      (REGS_IOMUXC_BASE + 0x73c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat5_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD4_DAT5.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD4_DAT5.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD4_DAT5.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD4_DAT5.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT5.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD4_DAT5.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT5.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD4_DAT5.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD4_DAT6.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD4_DAT6.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD4_DAT6.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD4_DAT6.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT6.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD4_DAT6.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT6.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD4_DAT6.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat6_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_ADDR      (REGS_IOMUXC_BASE + 0x740)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat6_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD4_DAT6.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD4_DAT6.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD4_DAT6.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD4_DAT6.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT6.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD4_DAT6.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT6.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD4_DAT6.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7 - SW_PAD_CTL (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned SRE : 1; //!< Slew Rate Field Select one out of next values for pad: SD4_DAT7.
        unsigned RESERVED0 : 2; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for pad: SD4_DAT7.
        unsigned SPEED : 2; //!< Speed Field Select one out of next values for pad: SD4_DAT7.
        unsigned RESERVED1 : 3; //!< Reserved
        unsigned ODE : 1; //!< Open Drain Enable Field Select one out of next values for pad: SD4_DAT7.
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT7.
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for pad: SD4_DAT7.
        unsigned PUS : 2; //!< Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT7.
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for pad: SD4_DAT7.
        unsigned RESERVED2 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat7_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7 register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_ADDR      (REGS_IOMUXC_BASE + 0x744)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat7_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7 bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, field SRE[0:0] (RW)
 *
 * Slew Rate Field Select one out of next values for pad: SD4_DAT7.
 *
 * Values:
 * 0 - Slow Slew Rate
 * 1 - Fast Slew Rate
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SRE      (0)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SRE      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SRE(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SRE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SRE(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SRE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SRE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SRE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, SRE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for pad: SD4_DAT7.
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, DSE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, field SPEED[7:6] (RW)
 *
 * Speed Field Select one out of next values for pad: SD4_DAT7.
 *
 * Values:
 * 00 - TBD
 * 01 - low(50MHz)
 * 10 - medium(100MHz)
 * 11 - max(200MHz)
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SPEED      (6)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SPEED      (0x000000c0)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SPEED(v)   ((((reg32_t) v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SPEED)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SPEED(v)   (((v) << 6) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SPEED)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the SPEED field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_SPEED(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, SPEED, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, field ODE[11:11] (RW)
 *
 * Open Drain Enable Field Select one out of next values for pad: SD4_DAT7.
 *
 * Values:
 * 0 - Open Drain Disabled
 * 1 - Open Drain Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_ODE      (11)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_ODE      (0x00000800)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_ODE(v)   ((((reg32_t) v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_ODE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_ODE(v)   (((v) << 11) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_ODE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_ODE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, ODE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for pad: SD4_DAT7.
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, PKE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for pad: SD4_DAT7.
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, PUE, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, field PUS[15:14] (RW)
 *
 * Pull Up / Down Config. Field Select one out of next values for pad: SD4_DAT7.
 *
 * Values:
 * 00 - 100KOhm Pull Down
 * 01 - 47KOhm Pull Up
 * 10 - 100KOhm Pull Up
 * 11 - 22KOhm Pull Up
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUS      (14)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUS      (0x0000c000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUS(v)   ((((reg32_t) v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUS(v)   (((v) << 14) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_PUS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, PUS, v)
#endif


/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for pad: SD4_DAT7.
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for group: B7DS (Pads: DRAM_D56 DRAM_D57 DRAM_D58 DRAM_D59 DRAM_D60 DRAM_D61 DRAM_D62 DRAM_D63).
        unsigned RESERVED1 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_b7ds_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_ADDR      (REGS_IOMUXC_BASE + 0x748)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b7ds_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for group: B7DS (Pads: DRAM_D56 DRAM_D57
 * DRAM_D58 DRAM_D59 DRAM_D60 DRAM_D61 DRAM_D62 DRAM_D63).
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B7DS, DSE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for group: ADDDS (Pads: DRAM_A0 DRAM_A1 DRAM_A10 DRAM_A11 DRAM_A12 DRAM_A13 DRAM_A14 DRAM_A15 DRAM_A2 DRAM_A3 DRAM_A4 DRAM_A5 DRAM_A6 DRAM_A7 DRAM_A8 DRAM_A9 DRAM_SDBA0 DRAM_SDBA1).
        unsigned RESERVED1 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_addds_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_ADDR      (REGS_IOMUXC_BASE + 0x74c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_addds_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for group: ADDDS (Pads: DRAM_A0 DRAM_A1
 * DRAM_A10 DRAM_A11 DRAM_A12 DRAM_A13 DRAM_A14 DRAM_A15 DRAM_A2 DRAM_A3 DRAM_A4 DRAM_A5 DRAM_A6
 * DRAM_A7 DRAM_A8 DRAM_A9 DRAM_SDBA0 DRAM_SDBA1).
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_ADDDS, DSE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 17; //!< Reserved
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for group: DDRMODE_CTL (Pads: DRAM_SDQS0 DRAM_SDQS1 DRAM_SDQS2 DRAM_SDQS3 DRAM_SDQS4 DRAM_SDQS5 DRAM_SDQS6 DRAM_SDQS7).
        unsigned RESERVED1 : 14; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrmode_ctl_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_ADDR      (REGS_IOMUXC_BASE + 0x750)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrmode_ctl_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for group: DDRMODE_CTL (Pads:
 * DRAM_SDQS0 DRAM_SDQS1 DRAM_SDQS2 DRAM_SDQS3 DRAM_SDQS4 DRAM_SDQS5 DRAM_SDQS6 DRAM_SDQS7).
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL, DDR_INPUT, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 12; //!< Reserved
        unsigned PKE : 1; //!< Pull / Keep Enable Field Select one out of next values for group: DDRPKE (Pads: DRAM_A0 DRAM_A1 DRAM_A10 DRAM_A11 DRAM_A12 DRAM_A13 DRAM_A14 DRAM_A15 DRAM_A2 DRAM_A3 DRAM_A4 DRAM_A5 DRAM_A6 DRAM_A7 DRAM_A8 DRAM_A9 DRAM_CAS DRAM_CS0 DRAM_CS1 DRAM_D0 DRAM_D1 DRAM_D10 DRAM_D11 DRAM_D12 DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D16 DRAM_D17 DRAM_D18 DRAM_D19 DRAM_D2 DRAM_D20 DRAM_D21 DRAM_D22 DRAM_D23 DRAM_D24 DRAM_D25 DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29 DRAM_D3 DRAM_D30 DRAM_D31 DRAM_D32 DRAM_D33 DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39 DRAM_D4 DRAM_D40 DRAM_D41 DRAM_D42 DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47 DRAM_D48 DRAM_D49 DRAM_D5 DRAM_D50 DRAM_D51 DRAM_D52 DRAM_D53 DRAM_D54 DRAM_D55 DRAM_D56 DRAM_D57 DRAM_D58 DRAM_D59 DRAM_D6 DRAM_D60 DRAM_D61 DRAM_D62 DRAM_D63 DRAM_D7 DRAM_D8 DRAM_D9 DRAM_DQM0 DRAM_DQM1 DRAM_DQM2 DRAM_DQM3 DRAM_DQM4 DRAM_DQM5 DRAM_DQM6 DRAM_DQM7 DRAM_RAS DRAM_SDBA0 DRAM_SDBA1 DRAM_SDCLK_0 DRAM_SDCLK_1 DRAM_SDWE).
        unsigned RESERVED1 : 19; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrpke_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_ADDR      (REGS_IOMUXC_BASE + 0x754)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrpke_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE, field PKE[12:12] (RW)
 *
 * Pull / Keep Enable Field Select one out of next values for group: DDRPKE (Pads: DRAM_A0 DRAM_A1
 * DRAM_A10 DRAM_A11 DRAM_A12 DRAM_A13 DRAM_A14 DRAM_A15 DRAM_A2 DRAM_A3 DRAM_A4 DRAM_A5 DRAM_A6
 * DRAM_A7 DRAM_A8 DRAM_A9 DRAM_CAS DRAM_CS0 DRAM_CS1 DRAM_D0 DRAM_D1 DRAM_D10 DRAM_D11 DRAM_D12
 * DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D16 DRAM_D17 DRAM_D18 DRAM_D19 DRAM_D2 DRAM_D20 DRAM_D21 DRAM_D22
 * DRAM_D23 DRAM_D24 DRAM_D25 DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29 DRAM_D3 DRAM_D30 DRAM_D31 DRAM_D32
 * DRAM_D33 DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39 DRAM_D4 DRAM_D40 DRAM_D41 DRAM_D42
 * DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47 DRAM_D48 DRAM_D49 DRAM_D5 DRAM_D50 DRAM_D51 DRAM_D52
 * DRAM_D53 DRAM_D54 DRAM_D55 DRAM_D56 DRAM_D57 DRAM_D58 DRAM_D59 DRAM_D6 DRAM_D60 DRAM_D61 DRAM_D62
 * DRAM_D63 DRAM_D7 DRAM_D8 DRAM_D9 DRAM_DQM0 DRAM_DQM1 DRAM_DQM2 DRAM_DQM3 DRAM_DQM4 DRAM_DQM5
 * DRAM_DQM6 DRAM_DQM7 DRAM_RAS DRAM_SDBA0 DRAM_SDBA1 DRAM_SDCLK_0 DRAM_SDCLK_1 DRAM_SDWE).
 *
 * Values:
 * 0 - Pull/Keeper Disabled
 * 1 - Pull/Keeper Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_PKE      (12)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_PKE      (0x00001000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_PKE(v)   ((((reg32_t) v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_PKE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_PKE(v)   (((v) << 12) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_PKE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PKE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE_PKE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPKE, PKE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 13; //!< Reserved
        unsigned PUE : 1; //!< Pull / Keep Select Field Select one out of next values for group: DDRPK (Pads: DRAM_A0 DRAM_A1 DRAM_A10 DRAM_A11 DRAM_A12 DRAM_A13 DRAM_A14 DRAM_A15 DRAM_A2 DRAM_A3 DRAM_A4 DRAM_A5 DRAM_A6 DRAM_A7 DRAM_A8 DRAM_A9 DRAM_CAS DRAM_CS0 DRAM_CS1 DRAM_D0 DRAM_D1 DRAM_D10 DRAM_D11 DRAM_D12 DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D16 DRAM_D17 DRAM_D18 DRAM_D19 DRAM_D2 DRAM_D20 DRAM_D21 DRAM_D22 DRAM_D23 DRAM_D24 DRAM_D25 DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29 DRAM_D3 DRAM_D30 DRAM_D31 DRAM_D32 DRAM_D33 DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39 DRAM_D4 DRAM_D40 DRAM_D41 DRAM_D42 DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47 DRAM_D48 DRAM_D49 DRAM_D5 DRAM_D50 DRAM_D51 DRAM_D52 DRAM_D53 DRAM_D54 DRAM_D55 DRAM_D56 DRAM_D57 DRAM_D58 DRAM_D59 DRAM_D6 DRAM_D60 DRAM_D61 DRAM_D62 DRAM_D63 DRAM_D7 DRAM_D8 DRAM_D9 DRAM_DQM0 DRAM_DQM1 DRAM_DQM2 DRAM_DQM3 DRAM_DQM4 DRAM_DQM5 DRAM_DQM6 DRAM_DQM7 DRAM_RAS DRAM_SDBA0 DRAM_SDBA1 DRAM_SDCLK_0 DRAM_SDCLK_1 DRAM_SDWE). 0 Keeper 1 Pull
        unsigned RESERVED1 : 18; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrpk_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_ADDR      (REGS_IOMUXC_BASE + 0x758)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrpk_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK, field PUE[13:13] (RW)
 *
 * Pull / Keep Select Field Select one out of next values for group: DDRPK (Pads: DRAM_A0 DRAM_A1
 * DRAM_A10 DRAM_A11 DRAM_A12 DRAM_A13 DRAM_A14 DRAM_A15 DRAM_A2 DRAM_A3 DRAM_A4 DRAM_A5 DRAM_A6
 * DRAM_A7 DRAM_A8 DRAM_A9 DRAM_CAS DRAM_CS0 DRAM_CS1 DRAM_D0 DRAM_D1 DRAM_D10 DRAM_D11 DRAM_D12
 * DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D16 DRAM_D17 DRAM_D18 DRAM_D19 DRAM_D2 DRAM_D20 DRAM_D21 DRAM_D22
 * DRAM_D23 DRAM_D24 DRAM_D25 DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29 DRAM_D3 DRAM_D30 DRAM_D31 DRAM_D32
 * DRAM_D33 DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39 DRAM_D4 DRAM_D40 DRAM_D41 DRAM_D42
 * DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47 DRAM_D48 DRAM_D49 DRAM_D5 DRAM_D50 DRAM_D51 DRAM_D52
 * DRAM_D53 DRAM_D54 DRAM_D55 DRAM_D56 DRAM_D57 DRAM_D58 DRAM_D59 DRAM_D6 DRAM_D60 DRAM_D61 DRAM_D62
 * DRAM_D63 DRAM_D7 DRAM_D8 DRAM_D9 DRAM_DQM0 DRAM_DQM1 DRAM_DQM2 DRAM_DQM3 DRAM_DQM4 DRAM_DQM5
 * DRAM_DQM6 DRAM_DQM7 DRAM_RAS DRAM_SDBA0 DRAM_SDBA1 DRAM_SDCLK_0 DRAM_SDCLK_1 DRAM_SDWE). 0 Keeper
 * 1 Pull
 *
 * Values:
 * 0 - Keeper
 * 1 - Pull
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_PUE      (13)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_PUE      (0x00002000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_PUE(v)   ((((reg32_t) v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_PUE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_PUE(v)   (((v) << 13) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_PUE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the PUE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK_PUE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRPK, PUE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 16; //!< Reserved
        unsigned HYS : 1; //!< Hysteresis Enable Field Select one out of next values for group: DDRHYS (Pads: DRAM_D0 DRAM_D1 DRAM_D10 DRAM_D11 DRAM_D12 DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D16 DRAM_D17 DRAM_D18 DRAM_D19 DRAM_D2 DRAM_D20 DRAM_D21 DRAM_D22 DRAM_D23 DRAM_D24 DRAM_D25 DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29 DRAM_D3 DRAM_D30 DRAM_D31 DRAM_D32 DRAM_D33 DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39 DRAM_D4 DRAM_D40 DRAM_D41 DRAM_D42 DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47 DRAM_D48 DRAM_D49 DRAM_D5 DRAM_D50 DRAM_D51 DRAM_D52 DRAM_D53 DRAM_D54 DRAM_D55 DRAM_D56 DRAM_D57 DRAM_D58 DRAM_D59 DRAM_D6 DRAM_D60 DRAM_D61 DRAM_D62 DRAM_D63 DRAM_D7 DRAM_D8 DRAM_D9 DRAM_SDQS0 DRAM_SDQS1 DRAM_SDQS2 DRAM_SDQS3 DRAM_SDQS4 DRAM_SDQS5 DRAM_SDQS6 DRAM_SDQS7).
        unsigned RESERVED1 : 15; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrhys_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_ADDR      (REGS_IOMUXC_BASE + 0x75c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrhys_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS, field HYS[16:16] (RW)
 *
 * Hysteresis Enable Field Select one out of next values for group: DDRHYS (Pads: DRAM_D0 DRAM_D1
 * DRAM_D10 DRAM_D11 DRAM_D12 DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D16 DRAM_D17 DRAM_D18 DRAM_D19 DRAM_D2
 * DRAM_D20 DRAM_D21 DRAM_D22 DRAM_D23 DRAM_D24 DRAM_D25 DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29 DRAM_D3
 * DRAM_D30 DRAM_D31 DRAM_D32 DRAM_D33 DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39 DRAM_D4
 * DRAM_D40 DRAM_D41 DRAM_D42 DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47 DRAM_D48 DRAM_D49 DRAM_D5
 * DRAM_D50 DRAM_D51 DRAM_D52 DRAM_D53 DRAM_D54 DRAM_D55 DRAM_D56 DRAM_D57 DRAM_D58 DRAM_D59 DRAM_D6
 * DRAM_D60 DRAM_D61 DRAM_D62 DRAM_D63 DRAM_D7 DRAM_D8 DRAM_D9 DRAM_SDQS0 DRAM_SDQS1 DRAM_SDQS2
 * DRAM_SDQS3 DRAM_SDQS4 DRAM_SDQS5 DRAM_SDQS6 DRAM_SDQS7).
 *
 * Values:
 * 0 - Hysteresis Disabled
 * 1 - Hysteresis Enabled
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_HYS      (16)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_HYS      (0x00010000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_HYS(v)   ((((reg32_t) v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_HYS)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_HYS(v)   (((v) << 16) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_HYS)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the HYS field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS_HYS(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRHYS, HYS, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 17; //!< Reserved
        unsigned DDR_INPUT : 1; //!< DDR / CMOS Input Mode Field Select one out of next values for group: DDRMODE (Pads: DRAM_D0 DRAM_D1 DRAM_D10 DRAM_D11 DRAM_D12 DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D16 DRAM_D17 DRAM_D18 DRAM_D19 DRAM_D2 DRAM_D20 DRAM_D21 DRAM_D22 DRAM_D23 DRAM_D24 DRAM_D25 DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29 DRAM_D3 DRAM_D30 DRAM_D31 DRAM_D32 DRAM_D33 DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39 DRAM_D4 DRAM_D40 DRAM_D41 DRAM_D42 DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47 DRAM_D48 DRAM_D49 DRAM_D5 DRAM_D50 DRAM_D51 DRAM_D52 DRAM_D53 DRAM_D54 DRAM_D55 DRAM_D56 DRAM_D57 DRAM_D58 DRAM_D59 DRAM_D6 DRAM_D60 DRAM_D61 DRAM_D62 DRAM_D63 DRAM_D7 DRAM_D8 DRAM_D9).
        unsigned RESERVED1 : 14; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrmode_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_ADDR      (REGS_IOMUXC_BASE + 0x760)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrmode_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE, field DDR_INPUT[17:17] (RW)
 *
 * DDR / CMOS Input Mode Field Select one out of next values for group: DDRMODE (Pads: DRAM_D0
 * DRAM_D1 DRAM_D10 DRAM_D11 DRAM_D12 DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D16 DRAM_D17 DRAM_D18 DRAM_D19
 * DRAM_D2 DRAM_D20 DRAM_D21 DRAM_D22 DRAM_D23 DRAM_D24 DRAM_D25 DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29
 * DRAM_D3 DRAM_D30 DRAM_D31 DRAM_D32 DRAM_D33 DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39
 * DRAM_D4 DRAM_D40 DRAM_D41 DRAM_D42 DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47 DRAM_D48 DRAM_D49
 * DRAM_D5 DRAM_D50 DRAM_D51 DRAM_D52 DRAM_D53 DRAM_D54 DRAM_D55 DRAM_D56 DRAM_D57 DRAM_D58 DRAM_D59
 * DRAM_D6 DRAM_D60 DRAM_D61 DRAM_D62 DRAM_D63 DRAM_D7 DRAM_D8 DRAM_D9).
 *
 * Values:
 * 0 - CMOS input type
 * 1 - Differential input mode
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_DDR_INPUT      (17)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_DDR_INPUT      (0x00020000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_DDR_INPUT(v)   ((((reg32_t) v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_DDR_INPUT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_DDR_INPUT(v)   (((v) << 17) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_DDR_INPUT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_INPUT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE_DDR_INPUT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDRMODE, DDR_INPUT, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for group: B0DS (Pads: DRAM_D0 DRAM_D1 DRAM_D2 DRAM_D3 DRAM_D4 DRAM_D5 DRAM_D6 DRAM_D7).
        unsigned RESERVED1 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_b0ds_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_ADDR      (REGS_IOMUXC_BASE + 0x764)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b0ds_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for group: B0DS (Pads: DRAM_D0 DRAM_D1 DRAM_D2
 * DRAM_D3 DRAM_D4 DRAM_D5 DRAM_D6 DRAM_D7).
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B0DS, DSE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 18; //!< Reserved
        unsigned DDR_SEL : 2; //!< DDR Select Field Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
        unsigned RESERVED1 : 12; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddr_type_rgmii_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_ADDR      (REGS_IOMUXC_BASE + 0x768)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddr_type_rgmii_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII, field DDR_SEL[19:18] (RW)
 *
 * DDR Select Field Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0
 * RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3
 * RGMII_TXC RGMII_TX_CTL).
 *
 * Values:
 * 00 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 * 01 - DDR2 driver mode
 * 10 - LPDDR2 mode
 * 11 - Reserved
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_DDR_SEL      (0x000c0000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_DDR_SEL(v)   ((((reg32_t) v) << 18) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_DDR_SEL)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_DDR_SEL(v)   (((v) << 18) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_DDR_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII_DDR_SEL(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII, DDR_SEL, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for group: CTLDS (Pads: DRAM_CS0 DRAM_CS1 DRAM_SDBA2 DRAM_SDCKE0 DRAM_SDCKE1 DRAM_SDWE).
        unsigned RESERVED1 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_ctlds_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_ADDR      (REGS_IOMUXC_BASE + 0x76c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ctlds_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for group: CTLDS (Pads: DRAM_CS0 DRAM_CS1
 * DRAM_SDBA2 DRAM_SDCKE0 DRAM_SDCKE1 DRAM_SDWE).
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_CTLDS, DSE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for group: B1DS (Pads: DRAM_D10 DRAM_D11 DRAM_D12 DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D8 DRAM_D9).
        unsigned RESERVED1 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_b1ds_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_ADDR      (REGS_IOMUXC_BASE + 0x770)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b1ds_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for group: B1DS (Pads: DRAM_D10 DRAM_D11
 * DRAM_D12 DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D8 DRAM_D9).
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B1DS, DSE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 18; //!< Reserved
        unsigned DDR_SEL : 2; //!< DDR Select Field Select one out of next values for group: DDR_TYPE (Pads: DRAM_A0 DRAM_A1 DRAM_A10 DRAM_A11 DRAM_A12 DRAM_A13 DRAM_A14 DRAM_A15 DRAM_A2 DRAM_A3 DRAM_A4 DRAM_A5 DRAM_A6 DRAM_A7 DRAM_A8 DRAM_A9 DRAM_CAS DRAM_CS0 DRAM_CS1 DRAM_D0 DRAM_D1 DRAM_D10 DRAM_D11 DRAM_D12 DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D16 DRAM_D17 DRAM_D18 DRAM_D19 DRAM_D2 DRAM_D20 DRAM_D21 DRAM_D22 DRAM_D23 DRAM_D24 DRAM_D25 DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29 DRAM_D3 DRAM_D30 DRAM_D31 DRAM_D32 DRAM_D33 DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39 DRAM_D4 DRAM_D40 DRAM_D41 DRAM_D42 DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47 DRAM_D48 DRAM_D49 DRAM_D5 DRAM_D50 DRAM_D51 DRAM_D52 DRAM_D53 DRAM_D54 DRAM_D55 DRAM_D56 DRAM_D57 DRAM_D58 DRAM_D59 DRAM_D6 DRAM_D60 DRAM_D61 DRAM_D62 DRAM_D63 DRAM_D7 DRAM_D8 DRAM_D9 DRAM_DQM0 DRAM_DQM1 DRAM_DQM2 DRAM_DQM3 DRAM_DQM4 DRAM_DQM5 DRAM_DQM6 DRAM_DQM7 DRAM_RAS DRAM_SDBA0 DRAM_SDBA1 DRAM_SDBA2 DRAM_SDCKE0 DRAM_SDCKE1 DRAM_SDCLK_0 DRAM_SDCLK_1 DRAM_SDODT0 DRAM_SDODT1 DRAM_SDQS0 DRAM_SDQS1 DRAM_SDQS2 DRAM_SDQS3 DRAM_SDQS4 DRAM_SDQS5 DRAM_SDQS6 DRAM_SDQS7 DRAM_SDWE).
        unsigned RESERVED1 : 12; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddr_type_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_ADDR      (REGS_IOMUXC_BASE + 0x774)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddr_type_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE, field DDR_SEL[19:18] (RW)
 *
 * DDR Select Field Select one out of next values for group: DDR_TYPE (Pads: DRAM_A0 DRAM_A1
 * DRAM_A10 DRAM_A11 DRAM_A12 DRAM_A13 DRAM_A14 DRAM_A15 DRAM_A2 DRAM_A3 DRAM_A4 DRAM_A5 DRAM_A6
 * DRAM_A7 DRAM_A8 DRAM_A9 DRAM_CAS DRAM_CS0 DRAM_CS1 DRAM_D0 DRAM_D1 DRAM_D10 DRAM_D11 DRAM_D12
 * DRAM_D13 DRAM_D14 DRAM_D15 DRAM_D16 DRAM_D17 DRAM_D18 DRAM_D19 DRAM_D2 DRAM_D20 DRAM_D21 DRAM_D22
 * DRAM_D23 DRAM_D24 DRAM_D25 DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29 DRAM_D3 DRAM_D30 DRAM_D31 DRAM_D32
 * DRAM_D33 DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39 DRAM_D4 DRAM_D40 DRAM_D41 DRAM_D42
 * DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47 DRAM_D48 DRAM_D49 DRAM_D5 DRAM_D50 DRAM_D51 DRAM_D52
 * DRAM_D53 DRAM_D54 DRAM_D55 DRAM_D56 DRAM_D57 DRAM_D58 DRAM_D59 DRAM_D6 DRAM_D60 DRAM_D61 DRAM_D62
 * DRAM_D63 DRAM_D7 DRAM_D8 DRAM_D9 DRAM_DQM0 DRAM_DQM1 DRAM_DQM2 DRAM_DQM3 DRAM_DQM4 DRAM_DQM5
 * DRAM_DQM6 DRAM_DQM7 DRAM_RAS DRAM_SDBA0 DRAM_SDBA1 DRAM_SDBA2 DRAM_SDCKE0 DRAM_SDCKE1
 * DRAM_SDCLK_0 DRAM_SDCLK_1 DRAM_SDODT0 DRAM_SDODT1 DRAM_SDQS0 DRAM_SDQS1 DRAM_SDQS2 DRAM_SDQS3
 * DRAM_SDQS4 DRAM_SDQS5 DRAM_SDQS6 DRAM_SDQS7 DRAM_SDWE).
 *
 * Values:
 * 00 - LPDDR1 / DDR3 / (DDR2 ODT) modes
 * 01 - DDR2 driver mode
 * 10 - LPDDR2 mode
 * 11 - Reserved
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL      (18)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL      (0x000c0000)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL(v)   ((((reg32_t) v) << 18) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL(v)   (((v) << 18) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DDR_SEL field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE, DDR_SEL, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for group: B2DS (Pads: DRAM_D16 DRAM_D17 DRAM_D18 DRAM_D19 DRAM_D20 DRAM_D21 DRAM_D22 DRAM_D23).
        unsigned RESERVED1 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_b2ds_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_ADDR      (REGS_IOMUXC_BASE + 0x778)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b2ds_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for group: B2DS (Pads: DRAM_D16 DRAM_D17
 * DRAM_D18 DRAM_D19 DRAM_D20 DRAM_D21 DRAM_D22 DRAM_D23).
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B2DS, DSE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for group: B3DS (Pads: DRAM_D24 DRAM_D25 DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29 DRAM_D30 DRAM_D31).
        unsigned RESERVED1 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_b3ds_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_ADDR      (REGS_IOMUXC_BASE + 0x77c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b3ds_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for group: B3DS (Pads: DRAM_D24 DRAM_D25
 * DRAM_D26 DRAM_D27 DRAM_D28 DRAM_D29 DRAM_D30 DRAM_D31).
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B3DS, DSE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for group: B4DS (Pads: DRAM_D32 DRAM_D33 DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39).
        unsigned RESERVED1 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_b4ds_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_ADDR      (REGS_IOMUXC_BASE + 0x780)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b4ds_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for group: B4DS (Pads: DRAM_D32 DRAM_D33
 * DRAM_D34 DRAM_D35 DRAM_D36 DRAM_D37 DRAM_D38 DRAM_D39).
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B4DS, DSE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for group: B5DS (Pads: DRAM_D40 DRAM_D41 DRAM_D42 DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47).
        unsigned RESERVED1 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_b5ds_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_ADDR      (REGS_IOMUXC_BASE + 0x784)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b5ds_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for group: B5DS (Pads: DRAM_D40 DRAM_D41
 * DRAM_D42 DRAM_D43 DRAM_D44 DRAM_D45 DRAM_D46 DRAM_D47).
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B5DS, DSE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 8; //!< Reserved
        unsigned ODT : 3; //!< On Die Termination Field Select one out of next values for group: RGMII_TERM (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC RGMII_RX_CTL).
        unsigned RESERVED1 : 21; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_rgmii_term_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_ADDR      (REGS_IOMUXC_BASE + 0x788)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_rgmii_term_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM, field ODT[10:8] (RW)
 *
 * On Die Termination Field Select one out of next values for group: RGMII_TERM (Pads: RGMII_RD0
 * RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC RGMII_RX_CTL).
 *
 * Values:
 * 000 - off
 * 001 - 120 Ohm ODT
 * 010 - 60 Ohm ODT
 * 011 - 40 Ohm ODT
 * 100 - 30 Ohm ODT
 * 101 - RESERVED
 * 110 - 20 Ohm ODT
 * 111 - RESERVED
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_ODT      (8)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_ODT      (0x00000700)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_ODT(v)   ((((reg32_t) v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_ODT)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_ODT(v)   (((v) << 8) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_ODT)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the ODT field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM_ODT(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM, ODT, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS - SW_GRP (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned RESERVED0 : 3; //!< Reserved
        unsigned DSE : 3; //!< Drive Strength Field Select one out of next values for group: B6DS (Pads: DRAM_D48 DRAM_D49 DRAM_D50 DRAM_D51 DRAM_D52 DRAM_D53 DRAM_D54 DRAM_D55).
        unsigned RESERVED1 : 26; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sw_pad_ctl_grp_b6ds_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS register
 */
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_ADDR      (REGS_IOMUXC_BASE + 0x78c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS           (*(volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b6ds_t *) HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_ADDR)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_RD()      (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS.U)
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_WR(v)     (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS.U = (v))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_SET(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_CLR(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_TOG(v)    (HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_WR(HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS, field DSE[5:3] (RW)
 *
 * Drive Strength Field Select one out of next values for group: B6DS (Pads: DRAM_D48 DRAM_D49
 * DRAM_D50 DRAM_D51 DRAM_D52 DRAM_D53 DRAM_D54 DRAM_D55).
 *
 * Values:
 * 000 - Output driver disabled.
 * 001 - 240 Ohm
 * 010 - 120 Ohm
 * 011 - 80 Ohm
 * 100 - 60 Ohm
 * 101 - 48 Ohm
 * 110 - 40 Ohm
 * 111 - 34 Ohm
 */

#define BP_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_DSE      (3)
#define BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_DSE      (0x00000038)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_DSE(v)   ((((reg32_t) v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_DSE)
#else
#define BF_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_DSE(v)   (((v) << 3) & BM_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_DSE)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DSE field to a new value.
#define BW_IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS_DSE(v)   BF_CS1(IOMUXC_IOMUXC_SW_PAD_CTL_GRP_B6DS, DSE, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: anatop, In Pin: usb_otg_id
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_anatop_usb_otg_id_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x790)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_anatop_usb_otg_id_select_input_t *) HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: anatop, In Pin: usb_otg_id
 *
 * Values:
 * 0 - Selecting Pad: ENET_RX_ER for Mode: ALT0.
 * 1 - Selecting Pad: GPIO_1 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: asrc, In Pin: asrck_clock_6
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_asrc_asrck_clock_6_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x794)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_asrc_asrck_clock_6_select_input_t *) HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: asrc, In Pin: asrck_clock_6
 *
 * Values:
 * 00 - Selecting Pad: GPIO_0 for Mode: ALT3.
 * 01 - Selecting Pad: GPIO_18 for Mode: ALT4.
 * 10 - Selecting Pad: KEY_ROW3 for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_da_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p4_input_da_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x798)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p4_input_da_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_da_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT23 for Mode: ALT3.
 * 1 - Selecting Pad: SD2_DAT0 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_db_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p4_input_db_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x79c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p4_input_db_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_db_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT21 for Mode: ALT3.
 * 1 - Selecting Pad: SD2_DAT2 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_rxclk_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p4_input_rxclk_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7a0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p4_input_rxclk_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_rxclk_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT19 for Mode: ALT4.
 * 1 - Selecting Pad: SD2_CMD for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_rxfs_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p4_input_rxfs_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7a4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p4_input_rxfs_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_rxfs_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT18 for Mode: ALT4.
 * 1 - Selecting Pad: SD2_CLK for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_txclk_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p4_input_txclk_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7a8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p4_input_txclk_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_txclk_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT20 for Mode: ALT3.
 * 1 - Selecting Pad: SD2_DAT3 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_txfs_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p4_input_txfs_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7ac)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p4_input_txfs_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p4_input_txfs_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT22 for Mode: ALT3.
 * 1 - Selecting Pad: SD2_DAT1 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_da_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p5_input_da_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7b0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p5_input_da_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_da_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT19 for Mode: ALT3.
 * 1 - Selecting Pad: KEY_ROW1 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_db_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p5_input_db_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7b4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p5_input_db_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_db_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT17 for Mode: ALT3.
 * 1 - Selecting Pad: KEY_ROW0 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_rxclk_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p5_input_rxclk_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7b8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p5_input_rxclk_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_rxclk_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT14 for Mode: ALT3.
 * 1 - Selecting Pad: EIM_D25 for Mode: ALT6.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_rxfs_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p5_input_rxfs_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7bc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p5_input_rxfs_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_rxfs_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT13 for Mode: ALT3.
 * 1 - Selecting Pad: EIM_D24 for Mode: ALT6.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_txclk_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p5_input_txclk_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7c0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p5_input_txclk_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_txclk_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT16 for Mode: ALT3.
 * 1 - Selecting Pad: KEY_COL0 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_txfs_amx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_audmux_p5_input_txfs_amx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7c4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_audmux_p5_input_txfs_amx_select_input_t *) HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: audmux, In Pin: p5_input_txfs_amx
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT18 for Mode: ALT3.
 * 1 - Selecting Pad: KEY_COL1 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: can1, In Pin: ipp_ind_canrx
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_can1_ipp_ind_canrx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7c8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_can1_ipp_ind_canrx_select_input_t *) HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: can1, In Pin: ipp_ind_canrx
 *
 * Values:
 * 00 - Selecting Pad: GPIO_8 for Mode: ALT3.
 * 01 - Selecting Pad: KEY_ROW2 for Mode: ALT2.
 * 10 - Selecting Pad: SD3_CLK for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: can2, In Pin: ipp_ind_canrx
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_can2_ipp_ind_canrx_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7cc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_can2_ipp_ind_canrx_select_input_t *) HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: can2, In Pin: ipp_ind_canrx
 *
 * Values:
 * 0 - Selecting Pad: KEY_ROW4 for Mode: ALT0.
 * 1 - Selecting Pad: SD3_DAT1 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ccm, In Pin: ipp_di1_clk
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ccm_ipp_di1_clk_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7d0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ccm_ipp_di1_clk_select_input_t *) HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ccm, In Pin: ipp_di1_clk
 *
 * Values:
 * 0 - Selecting Pad: EIM_DA13 for Mode: ALT2.
 * 1 - Selecting Pad: EIM_EB2 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ccm, In Pin: pmic_vfuncional_ready
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ccm_pmic_vfuncional_ready_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7d4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ccm_pmic_vfuncional_ready_select_input_t *) HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ccm, In Pin: pmic_vfuncional_ready
 *
 * Values:
 * 0 - Selecting Pad: EIM_EB0 for Mode: ALT4.
 * 1 - Selecting Pad: GPIO_17 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_cspi_clk_in
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi1_ipp_cspi_clk_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7d8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi1_ipp_cspi_clk_in_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_cspi_clk_in
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT4 for Mode: ALT2.
 * 01 - Selecting Pad: DISP0_DAT20 for Mode: ALT2.
 * 10 - Selecting Pad: EIM_D16 for Mode: ALT1.
 * 11 - Selecting Pad: KEY_COL0 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_miso
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi1_ipp_ind_miso_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7dc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_miso_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_miso
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT6 for Mode: ALT2.
 * 01 - Selecting Pad: DISP0_DAT22 for Mode: ALT2.
 * 10 - Selecting Pad: EIM_D17 for Mode: ALT1.
 * 11 - Selecting Pad: KEY_COL1 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_mosi
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi1_ipp_ind_mosi_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7e0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_mosi_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_mosi
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT5 for Mode: ALT2.
 * 01 - Selecting Pad: DISP0_DAT21 for Mode: ALT2.
 * 10 - Selecting Pad: EIM_D18 for Mode: ALT1.
 * 11 - Selecting Pad: KEY_ROW0 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_ss_b[0]
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_0_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7e4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_0_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_ss_b[0]
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT7 for Mode: ALT2.
 * 01 - Selecting Pad: DISP0_DAT23 for Mode: ALT2.
 * 10 - Selecting Pad: EIM_EB2 for Mode: ALT1.
 * 11 - Selecting Pad: KEY_ROW1 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_ss_b[1]
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_1_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7e8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_1_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_ss_b[1]
 *
 * Values:
 * 00 - Selecting Pad: DISP0_DAT15 for Mode: ALT2.
 * 01 - Selecting Pad: EIM_D19 for Mode: ALT1.
 * 10 - Selecting Pad: KEY_COL2 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_ss_b[2]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_2_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7ec)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_2_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_ss_b[2]
 *
 * Values:
 * 0 - Selecting Pad: EIM_D24 for Mode: ALT3.
 * 1 - Selecting Pad: KEY_ROW2 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_ss_b[3]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_3_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7f0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_3_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi1, In Pin: ipp_ind_ss_b[3]
 *
 * Values:
 * 0 - Selecting Pad: EIM_D25 for Mode: ALT3.
 * 1 - Selecting Pad: KEY_COL3 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi2, In Pin: ipp_cspi_clk_in
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi2_ipp_cspi_clk_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7f4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi2_ipp_cspi_clk_in_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi2, In Pin: ipp_cspi_clk_in
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT8 for Mode: ALT2.
 * 01 - Selecting Pad: DISP0_DAT19 for Mode: ALT2.
 * 10 - Selecting Pad: EIM_CS0 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi2, In Pin: ipp_ind_miso
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi2_ipp_ind_miso_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7f8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi2_ipp_ind_miso_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi2, In Pin: ipp_ind_miso
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT10 for Mode: ALT2.
 * 01 - Selecting Pad: DISP0_DAT17 for Mode: ALT2.
 * 10 - Selecting Pad: EIM_OE for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi2, In Pin: ipp_ind_mosi
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi2_ipp_ind_mosi_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x7fc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi2_ipp_ind_mosi_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi2, In Pin: ipp_ind_mosi
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT9 for Mode: ALT2.
 * 01 - Selecting Pad: DISP0_DAT16 for Mode: ALT2.
 * 10 - Selecting Pad: EIM_CS1 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi2, In Pin: ipp_ind_ss_b[0]
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi2_ipp_ind_ss_b_0_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x800)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi2_ipp_ind_ss_b_0_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi2, In Pin: ipp_ind_ss_b[0]
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT11 for Mode: ALT2.
 * 01 - Selecting Pad: DISP0_DAT18 for Mode: ALT2.
 * 10 - Selecting Pad: EIM_RW for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi2, In Pin: ipp_ind_ss_b[1]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi2_ipp_ind_ss_b_1_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x804)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi2_ipp_ind_ss_b_1_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi2, In Pin: ipp_ind_ss_b[1]
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT15 for Mode: ALT3.
 * 1 - Selecting Pad: EIM_LBA for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ecspi4, In Pin: ipp_ind_ss_b[0]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ecspi4_ipp_ind_ss_b_0_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x808)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ecspi4_ipp_ind_ss_b_0_select_input_t *) HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ecspi4, In Pin: ipp_ind_ss_b[0]
 *
 * Values:
 * 0 - Selecting Pad: EIM_D20 for Mode: ALT1.
 * 1 - Selecting Pad: EIM_D29 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipg_clk_rmii
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_enet_ipg_clk_rmii_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x80c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_enet_ipg_clk_rmii_select_input_t *) HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipg_clk_rmii
 *
 * Values:
 * 0 - Selecting Pad: GPIO_16 for Mode: ALT2.
 * 1 - Selecting Pad: RGMII_TX_CTL for Mode: ALT7.
 */

#define BP_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_mdio
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_enet_ipp_ind_mac0_mdio_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x810)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_mdio_select_input_t *) HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_mdio
 *
 * Values:
 * 0 - Selecting Pad: ENET_MDIO for Mode: ALT1.
 * 1 - Selecting Pad: KEY_COL1 for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxclk
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxclk_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x814)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxclk_select_input_t *) HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxclk
 *
 * Values:
 * 0 - Selecting Pad: GPIO_18 for Mode: ALT1.
 * 1 - Selecting Pad: RGMII_RXC for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxdata[0]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_0_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x818)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_0_select_input_t *) HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxdata[0]
 *
 * Values:
 * 0 - Selecting Pad: ENET_RXD0 for Mode: ALT1.
 * 1 - Selecting Pad: RGMII_RD0 for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxdata[1]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_1_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x81c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_1_select_input_t *) HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxdata[1]
 *
 * Values:
 * 0 - Selecting Pad: ENET_RXD1 for Mode: ALT1.
 * 1 - Selecting Pad: RGMII_RD1 for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxdata[2]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_2_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x820)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_2_select_input_t *) HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxdata[2]
 *
 * Values:
 * 0 - Selecting Pad: KEY_COL2 for Mode: ALT1.
 * 1 - Selecting Pad: RGMII_RD2 for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxdata[3]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_3_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x824)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_3_select_input_t *) HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxdata[3]
 *
 * Values:
 * 0 - Selecting Pad: KEY_COL0 for Mode: ALT1.
 * 1 - Selecting Pad: RGMII_RD3 for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxen
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxen_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x828)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxen_select_input_t *) HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: enet, In Pin: ipp_ind_mac0_rxen
 *
 * Values:
 * 0 - Selecting Pad: ENET_CRS_DV for Mode: ALT1.
 * 1 - Selecting Pad: RGMII_RX_CTL for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_fsr
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_fsr_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x82c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_fsr_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_fsr
 *
 * Values:
 * 0 - Selecting Pad: ENET_REF_CLK for Mode: ALT2.
 * 1 - Selecting Pad: GPIO_9 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_fst
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_fst_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x830)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_fst_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_fst
 *
 * Values:
 * 0 - Selecting Pad: ENET_RXD1 for Mode: ALT2.
 * 1 - Selecting Pad: GPIO_2 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_hckr
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_hckr_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x834)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_hckr_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_hckr
 *
 * Values:
 * 0 - Selecting Pad: ENET_RX_ER for Mode: ALT2.
 * 1 - Selecting Pad: GPIO_3 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_hckt
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_hckt_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x838)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_hckt_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_hckt
 *
 * Values:
 * 0 - Selecting Pad: ENET_RXD0 for Mode: ALT2.
 * 1 - Selecting Pad: GPIO_4 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sckr
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_sckr_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x83c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_sckr_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sckr
 *
 * Values:
 * 0 - Selecting Pad: ENET_MDIO for Mode: ALT2.
 * 1 - Selecting Pad: GPIO_1 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sckt
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_sckt_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x840)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_sckt_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sckt
 *
 * Values:
 * 0 - Selecting Pad: ENET_CRS_DV for Mode: ALT2.
 * 1 - Selecting Pad: GPIO_6 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo0
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_sdo0_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x844)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo0_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo0
 *
 * Values:
 * 0 - Selecting Pad: GPIO_17 for Mode: ALT0.
 * 1 - Selecting Pad: NANDF_CS2 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo1
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_sdo1_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x848)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo1_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo1
 *
 * Values:
 * 0 - Selecting Pad: GPIO_18 for Mode: ALT0.
 * 1 - Selecting Pad: NANDF_CS3 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo2_sdi3
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_sdo2_sdi3_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x84c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo2_sdi3_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo2_sdi3
 *
 * Values:
 * 0 - Selecting Pad: ENET_TXD1 for Mode: ALT2.
 * 1 - Selecting Pad: GPIO_5 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo3_sdi2
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_sdo3_sdi2_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x850)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo3_sdi2_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo3_sdi2
 *
 * Values:
 * 0 - Selecting Pad: ENET_TX_EN for Mode: ALT2.
 * 1 - Selecting Pad: GPIO_16 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo4_sdi1
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_sdo4_sdi1_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x854)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo4_sdi1_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo4_sdi1
 *
 * Values:
 * 0 - Selecting Pad: ENET_TXD0 for Mode: ALT2.
 * 1 - Selecting Pad: GPIO_7 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo5_sdi0
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_esai_ipp_ind_sdo5_sdi0_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x858)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo5_sdi0_select_input_t *) HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: esai, In Pin: ipp_ind_sdo5_sdi0
 *
 * Values:
 * 0 - Selecting Pad: ENET_MDC for Mode: ALT2.
 * 1 - Selecting Pad: GPIO_8 for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: hdmi_tx, In Pin: icecin
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_hdmi_tx_icecin_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x85c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_hdmi_tx_icecin_select_input_t *) HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: hdmi_tx, In Pin: icecin
 *
 * Values:
 * 0 - Selecting Pad: EIM_A25 for Mode: ALT6.
 * 1 - Selecting Pad: KEY_ROW2 for Mode: ALT6.
 */

#define BP_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: hdmi_tx, In Pin: ii2c_msth13tddc_sclin
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_hdmi_tx_ii2c_msth13tddc_sclin_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x860)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_hdmi_tx_ii2c_msth13tddc_sclin_select_input_t *) HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: hdmi_tx, In Pin: ii2c_msth13tddc_sclin
 *
 * Values:
 * 0 - Selecting Pad: EIM_EB2 for Mode: ALT4.
 * 1 - Selecting Pad: KEY_COL3 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: hdmi_tx, In Pin: ii2c_msth13tddc_sdain
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_hdmi_tx_ii2c_msth13tddc_sdain_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x864)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_hdmi_tx_ii2c_msth13tddc_sdain_select_input_t *) HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: hdmi_tx, In Pin: ii2c_msth13tddc_sdain
 *
 * Values:
 * 0 - Selecting Pad: EIM_D16 for Mode: ALT4.
 * 1 - Selecting Pad: KEY_ROW3 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: i2c1, In Pin: ipp_scl_in
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_i2c1_ipp_scl_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x868)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_i2c1_ipp_scl_in_select_input_t *) HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: i2c1, In Pin: ipp_scl_in
 *
 * Values:
 * 0 - Selecting Pad: CSI0_DAT9 for Mode: ALT4.
 * 1 - Selecting Pad: EIM_D21 for Mode: ALT6.
 */

#define BP_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: i2c1, In Pin: ipp_sda_in
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_i2c1_ipp_sda_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x86c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_i2c1_ipp_sda_in_select_input_t *) HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: i2c1, In Pin: ipp_sda_in
 *
 * Values:
 * 0 - Selecting Pad: CSI0_DAT8 for Mode: ALT4.
 * 1 - Selecting Pad: EIM_D28 for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: i2c2, In Pin: ipp_scl_in
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_i2c2_ipp_scl_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x870)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_i2c2_ipp_scl_in_select_input_t *) HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: i2c2, In Pin: ipp_scl_in
 *
 * Values:
 * 0 - Selecting Pad: EIM_EB2 for Mode: ALT6.
 * 1 - Selecting Pad: KEY_COL3 for Mode: ALT4.
 */

#define BP_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: i2c2, In Pin: ipp_sda_in
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_i2c2_ipp_sda_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x874)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_i2c2_ipp_sda_in_select_input_t *) HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: i2c2, In Pin: ipp_sda_in
 *
 * Values:
 * 0 - Selecting Pad: EIM_D16 for Mode: ALT6.
 * 1 - Selecting Pad: KEY_ROW3 for Mode: ALT4.
 */

#define BP_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: i2c3, In Pin: ipp_scl_in
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_i2c3_ipp_scl_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x878)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_i2c3_ipp_scl_in_select_input_t *) HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: i2c3, In Pin: ipp_scl_in
 *
 * Values:
 * 00 - Selecting Pad: EIM_D17 for Mode: ALT6.
 * 01 - Selecting Pad: GPIO_3 for Mode: ALT2.
 * 10 - Selecting Pad: GPIO_5 for Mode: ALT6.
 */

#define BP_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: i2c3, In Pin: ipp_sda_in
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_i2c3_ipp_sda_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x87c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_i2c3_ipp_sda_in_select_input_t *) HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: i2c3, In Pin: ipp_sda_in
 *
 * Values:
 * 00 - Selecting Pad: EIM_D18 for Mode: ALT6.
 * 01 - Selecting Pad: GPIO_16 for Mode: ALT6.
 * 10 - Selecting Pad: GPIO_6 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: i2c4, In Pin: ipp_scl_in
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_i2c4_ipp_scl_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x880)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_i2c4_ipp_scl_in_select_input_t *) HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: i2c4, In Pin: ipp_scl_in
 *
 * Values:
 * 00 - Selecting Pad: ENET_TX_EN for Mode: ALT9.
 * 01 - Selecting Pad: GPIO_7 for Mode: ALT8.
 * 10 - Selecting Pad: NANDF_WP_B for Mode: ALT9.
 */

#define BP_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: i2c4, In Pin: ipp_sda_in
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_i2c4_ipp_sda_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x884)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_i2c4_ipp_sda_in_select_input_t *) HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: i2c4, In Pin: ipp_sda_in
 *
 * Values:
 * 00 - Selecting Pad: ENET_TXD1 for Mode: ALT9.
 * 01 - Selecting Pad: GPIO_8 for Mode: ALT8.
 * 10 - Selecting Pad: NANDF_CS3 for Mode: ALT9.
 */

#define BP_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[10]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_10_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x888)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_10_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[10]
 *
 * Values:
 * 0 - Selecting Pad: EIM_D22 for Mode: ALT3.
 * 1 - Selecting Pad: EIM_EB1 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[11]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_11_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x88c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_11_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[11]
 *
 * Values:
 * 0 - Selecting Pad: EIM_D21 for Mode: ALT3.
 * 1 - Selecting Pad: EIM_EB0 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[12]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_12_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x890)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_12_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[12]
 *
 * Values:
 * 0 - Selecting Pad: EIM_A17 for Mode: ALT2.
 * 1 - Selecting Pad: EIM_D28 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[13]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_13_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x894)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_13_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[13]
 *
 * Values:
 * 0 - Selecting Pad: EIM_A18 for Mode: ALT2.
 * 1 - Selecting Pad: EIM_D27 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[14]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_14_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x898)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_14_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[14]
 *
 * Values:
 * 0 - Selecting Pad: EIM_A19 for Mode: ALT2.
 * 1 - Selecting Pad: EIM_D26 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[15]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_15_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x89c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_15_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[15]
 *
 * Values:
 * 0 - Selecting Pad: EIM_A20 for Mode: ALT2.
 * 1 - Selecting Pad: EIM_D20 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[16]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_16_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8a0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_16_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[16]
 *
 * Values:
 * 0 - Selecting Pad: EIM_A21 for Mode: ALT2.
 * 1 - Selecting Pad: EIM_D19 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[17]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_17_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8a4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_17_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[17]
 *
 * Values:
 * 0 - Selecting Pad: EIM_A22 for Mode: ALT2.
 * 1 - Selecting Pad: EIM_D18 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[18]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_18_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8a8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_18_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[18]
 *
 * Values:
 * 0 - Selecting Pad: EIM_A23 for Mode: ALT2.
 * 1 - Selecting Pad: EIM_D16 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[19]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_19_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8ac)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_19_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data[19]
 *
 * Values:
 * 0 - Selecting Pad: EIM_A24 for Mode: ALT2.
 * 1 - Selecting Pad: EIM_EB2 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data_en
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_en_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8b0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_en_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_data_en
 *
 * Values:
 * 0 - Selecting Pad: EIM_D23 for Mode: ALT4.
 * 1 - Selecting Pad: EIM_DA10 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_hsync
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_hsync_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8b4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_hsync_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_hsync
 *
 * Values:
 * 0 - Selecting Pad: EIM_DA11 for Mode: ALT2.
 * 1 - Selecting Pad: EIM_EB3 for Mode: ALT4.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_pix_clk
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_pix_clk_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8b8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_pix_clk_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_pix_clk
 *
 * Values:
 * 0 - Selecting Pad: EIM_A16 for Mode: ALT2.
 * 1 - Selecting Pad: EIM_D17 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_vsync
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_vsync_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8bc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_vsync_select_input_t *) HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: ipu1, In Pin: ipp_ind_sens1_vsync
 *
 * Values:
 * 0 - Selecting Pad: EIM_D29 for Mode: ALT6.
 * 1 - Selecting Pad: EIM_DA12 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_col[5]
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_kpp_ipp_ind_col_5_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8c0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_kpp_ipp_ind_col_5_select_input_t *) HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_col[5]
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT4 for Mode: ALT3.
 * 01 - Selecting Pad: GPIO_0 for Mode: ALT2.
 * 10 - Selecting Pad: GPIO_19 for Mode: ALT0.
 * 11 - Selecting Pad: SD2_CLK for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_col[6]
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_kpp_ipp_ind_col_6_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8c4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_kpp_ipp_ind_col_6_select_input_t *) HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_col[6]
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT6 for Mode: ALT3.
 * 01 - Selecting Pad: GPIO_9 for Mode: ALT2.
 * 10 - Selecting Pad: SD2_DAT3 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_col[7]
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_kpp_ipp_ind_col_7_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8c8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_kpp_ipp_ind_col_7_select_input_t *) HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_col[7]
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT8 for Mode: ALT3.
 * 01 - Selecting Pad: GPIO_4 for Mode: ALT2.
 * 10 - Selecting Pad: SD2_DAT1 for Mode: ALT4.
 */

#define BP_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_row[5]
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_kpp_ipp_ind_row_5_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8cc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_kpp_ipp_ind_row_5_select_input_t *) HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_row[5]
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT5 for Mode: ALT3.
 * 01 - Selecting Pad: GPIO_1 for Mode: ALT2.
 * 10 - Selecting Pad: SD2_CMD for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_row[6]
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_kpp_ipp_ind_row_6_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8d0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_kpp_ipp_ind_row_6_select_input_t *) HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_row[6]
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT7 for Mode: ALT3.
 * 01 - Selecting Pad: GPIO_2 for Mode: ALT2.
 * 10 - Selecting Pad: SD2_DAT2 for Mode: ALT4.
 */

#define BP_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_row[7]
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_kpp_ipp_ind_row_7_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8d4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_kpp_ipp_ind_row_7_select_input_t *) HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: kpp, In Pin: ipp_ind_row[7]
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT9 for Mode: ALT3.
 * 01 - Selecting Pad: GPIO_5 for Mode: ALT2.
 * 10 - Selecting Pad: SD2_DAT0 for Mode: ALT4.
 */

#define BP_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: lcdif, In Pin: lcdif_busy
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_lcdif_lcdif_busy_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8d8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_lcdif_lcdif_busy_select_input_t *) HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: lcdif, In Pin: lcdif_busy
 *
 * Values:
 * 0 - Selecting Pad: DI0_PIN2 for Mode: ALT1.
 * 1 - Selecting Pad: DI0_PIN4 for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: mlb, In Pin: mlb_clk_in
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_mlb_mlb_clk_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8dc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_mlb_mlb_clk_in_select_input_t *) HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: mlb, In Pin: mlb_clk_in
 *
 * Values:
 * 0 - Selecting Pad: ENET_TXD1 for Mode: ALT0.
 * 1 - Selecting Pad: GPIO_3 for Mode: ALT7.
 */

#define BP_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: mlb, In Pin: mlb_data_in
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_mlb_mlb_data_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8e0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_mlb_mlb_data_in_select_input_t *) HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: mlb, In Pin: mlb_data_in
 *
 * Values:
 * 0 - Selecting Pad: ENET_MDC for Mode: ALT0.
 * 1 - Selecting Pad: GPIO_2 for Mode: ALT7.
 */

#define BP_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: mlb, In Pin: mlb_sig_in
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_mlb_mlb_sig_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8e4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_mlb_mlb_sig_in_select_input_t *) HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: mlb, In Pin: mlb_sig_in
 *
 * Values:
 * 0 - Selecting Pad: ENET_RXD1 for Mode: ALT0.
 * 1 - Selecting Pad: GPIO_6 for Mode: ALT7.
 */

#define BP_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: sdma, In Pin: events[14]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sdma_events_14_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8e8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_sdma_events_14_select_input_t *) HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: sdma, In Pin: events[14]
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT16 for Mode: ALT4.
 * 1 - Selecting Pad: GPIO_17 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_SDMA_EVENTS_14_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: sdma, In Pin: events[15]
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_sdma_events_15_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8ec)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_sdma_events_15_select_input_t *) HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: sdma, In Pin: events[15]
 *
 * Values:
 * 0 - Selecting Pad: DISP0_DAT17 for Mode: ALT4.
 * 1 - Selecting Pad: GPIO_18 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_SDMA_EVENTS_15_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: spdif, In Pin: spdif_in1
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_spdif_spdif_in1_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8f0)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_spdif_spdif_in1_select_input_t *) HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: spdif, In Pin: spdif_in1
 *
 * Values:
 * 00 - Selecting Pad: EIM_D21 for Mode: ALT7.
 * 01 - Selecting Pad: ENET_RX_ER for Mode: ALT3.
 * 10 - Selecting Pad: GPIO_16 for Mode: ALT4.
 * 11 - Selecting Pad: KEY_COL3 for Mode: ALT6.
 */

#define BP_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: spdif, In Pin: tx_clk2
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_spdif_tx_clk2_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8f4)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_spdif_tx_clk2_select_input_t *) HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: spdif, In Pin: tx_clk2
 *
 * Values:
 * 0 - Selecting Pad: ENET_CRS_DV for Mode: ALT3.
 * 1 - Selecting Pad: RGMII_TXC for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: uart1, In Pin: ipp_uart_rts_b
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_uart1_ipp_uart_rts_b_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8f8)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_uart1_ipp_uart_rts_b_select_input_t *) HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: uart1, In Pin: ipp_uart_rts_b
 *
 * Values:
 * 00 - Selecting Pad: EIM_D19 for Mode: ALT4.
 * 01 - Selecting Pad: EIM_D20 for Mode: ALT4.
 * 10 - Selecting Pad: SD3_DAT0 for Mode: ALT1.
 * 11 - Selecting Pad: SD3_DAT1 for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: uart1, In Pin: ipp_uart_rxd_mux
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_uart1_ipp_uart_rxd_mux_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x8fc)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_uart1_ipp_uart_rxd_mux_select_input_t *) HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: uart1, In Pin: ipp_uart_rxd_mux
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT10 for Mode: ALT3.
 * 01 - Selecting Pad: CSI0_DAT11 for Mode: ALT3.
 * 10 - Selecting Pad: SD3_DAT6 for Mode: ALT1.
 * 11 - Selecting Pad: SD3_DAT7 for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 3; //!< Selecting Pads Involved in Daisy Chain. Instance: uart2, In Pin: ipp_uart_rts_b
        unsigned RESERVED0 : 29; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_uart2_ipp_uart_rts_b_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x900)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_uart2_ipp_uart_rts_b_select_input_t *) HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT, field DAISY[2:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: uart2, In Pin: ipp_uart_rts_b
 *
 * Values:
 * 000 - Selecting Pad: EIM_D28 for Mode: ALT4.
 * 001 - Selecting Pad: EIM_D29 for Mode: ALT4.
 * 010 - Selecting Pad: SD3_CLK for Mode: ALT1.
 * 011 - Selecting Pad: SD3_CMD for Mode: ALT1.
 * 100 - Selecting Pad: SD4_DAT5 for Mode: ALT2.
 * 101 - Selecting Pad: SD4_DAT6 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 3; //!< Selecting Pads Involved in Daisy Chain. Instance: uart2, In Pin: ipp_uart_rxd_mux
        unsigned RESERVED0 : 29; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_uart2_ipp_uart_rxd_mux_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x904)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_uart2_ipp_uart_rxd_mux_select_input_t *) HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT, field DAISY[2:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: uart2, In Pin: ipp_uart_rxd_mux
 *
 * Values:
 * 000 - Selecting Pad: EIM_D26 for Mode: ALT4.
 * 001 - Selecting Pad: EIM_D27 for Mode: ALT4.
 * 010 - Selecting Pad: GPIO_7 for Mode: ALT4.
 * 011 - Selecting Pad: GPIO_8 for Mode: ALT4.
 * 100 - Selecting Pad: SD3_DAT4 for Mode: ALT1.
 * 101 - Selecting Pad: SD3_DAT5 for Mode: ALT1.
 * 110 - Selecting Pad: SD4_DAT4 for Mode: ALT2.
 * 111 - Selecting Pad: SD4_DAT7 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 3; //!< Selecting Pads Involved in Daisy Chain. Instance: uart3, In Pin: ipp_uart_rts_b
        unsigned RESERVED0 : 29; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_uart3_ipp_uart_rts_b_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x908)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_uart3_ipp_uart_rts_b_select_input_t *) HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT, field DAISY[2:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: uart3, In Pin: ipp_uart_rts_b
 *
 * Values:
 * 000 - Selecting Pad: EIM_D23 for Mode: ALT2.
 * 001 - Selecting Pad: EIM_D30 for Mode: ALT4.
 * 010 - Selecting Pad: EIM_D31 for Mode: ALT4.
 * 011 - Selecting Pad: EIM_EB3 for Mode: ALT2.
 * 100 - Selecting Pad: SD3_DAT3 for Mode: ALT1.
 * 101 - Selecting Pad: SD3_RST for Mode: ALT1.
 */

#define BP_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY      (0x00000007)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: uart3, In Pin: ipp_uart_rxd_mux
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_uart3_ipp_uart_rxd_mux_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x90c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_uart3_ipp_uart_rxd_mux_select_input_t *) HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: uart3, In Pin: ipp_uart_rxd_mux
 *
 * Values:
 * 00 - Selecting Pad: EIM_D24 for Mode: ALT2.
 * 01 - Selecting Pad: EIM_D25 for Mode: ALT2.
 * 10 - Selecting Pad: SD4_CLK for Mode: ALT2.
 * 11 - Selecting Pad: SD4_CMD for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: uart4, In Pin: ipp_uart_rts_b
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_uart4_ipp_uart_rts_b_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x910)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_uart4_ipp_uart_rts_b_select_input_t *) HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: uart4, In Pin: ipp_uart_rts_b
 *
 * Values:
 * 0 - Selecting Pad: CSI0_DAT16 for Mode: ALT3.
 * 1 - Selecting Pad: CSI0_DAT17 for Mode: ALT3.
 */

#define BP_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: uart4, In Pin: ipp_uart_rxd_mux
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_uart4_ipp_uart_rxd_mux_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x914)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_uart4_ipp_uart_rxd_mux_select_input_t *) HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: uart4, In Pin: ipp_uart_rxd_mux
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT12 for Mode: ALT3.
 * 01 - Selecting Pad: CSI0_DAT13 for Mode: ALT3.
 * 10 - Selecting Pad: KEY_COL0 for Mode: ALT4.
 * 11 - Selecting Pad: KEY_ROW0 for Mode: ALT4.
 */

#define BP_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: uart5, In Pin: ipp_uart_rts_b
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_uart5_ipp_uart_rts_b_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x918)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_uart5_ipp_uart_rts_b_select_input_t *) HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: uart5, In Pin: ipp_uart_rts_b
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT18 for Mode: ALT3.
 * 01 - Selecting Pad: CSI0_DAT19 for Mode: ALT3.
 * 10 - Selecting Pad: KEY_COL4 for Mode: ALT4.
 * 11 - Selecting Pad: KEY_ROW4 for Mode: ALT4.
 */

#define BP_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 2; //!< Selecting Pads Involved in Daisy Chain. Instance: uart5, In Pin: ipp_uart_rxd_mux
        unsigned RESERVED0 : 30; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_uart5_ipp_uart_rxd_mux_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x91c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_uart5_ipp_uart_rxd_mux_select_input_t *) HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT, field DAISY[1:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: uart5, In Pin: ipp_uart_rxd_mux
 *
 * Values:
 * 00 - Selecting Pad: CSI0_DAT14 for Mode: ALT3.
 * 01 - Selecting Pad: CSI0_DAT15 for Mode: ALT3.
 * 10 - Selecting Pad: KEY_COL1 for Mode: ALT4.
 * 11 - Selecting Pad: KEY_ROW1 for Mode: ALT4.
 */

#define BP_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY      (0x00000003)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: usboh3, In Pin: ipp_ind_otg_oc
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_usboh3_ipp_ind_otg_oc_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x920)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_usboh3_ipp_ind_otg_oc_select_input_t *) HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: usboh3, In Pin: ipp_ind_otg_oc
 *
 * Values:
 * 0 - Selecting Pad: EIM_D21 for Mode: ALT4.
 * 1 - Selecting Pad: KEY_COL4 for Mode: ALT2.
 */

#define BP_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: usboh3, In Pin: ipp_ind_uh1_oc
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_usboh3_ipp_ind_uh1_oc_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x924)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_usboh3_ipp_ind_uh1_oc_select_input_t *) HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: usboh3, In Pin: ipp_ind_uh1_oc
 *
 * Values:
 * 0 - Selecting Pad: EIM_D30 for Mode: ALT6.
 * 1 - Selecting Pad: GPIO_3 for Mode: ALT6.
 */

#define BP_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: usdhc1, In Pin: ipp_card_clk_in
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_usdhc1_ipp_card_clk_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x928)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_usdhc1_ipp_card_clk_in_select_input_t *) HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: usdhc1, In Pin: ipp_card_clk_in
 *
 * Values:
 * 0 - Selecting Pad: NANDF_CS1 for Mode: ALT8.
 * 1 - Selecting Pad: SD1_CLK for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: usdhc1, In Pin: ipp_wp_on
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_usdhc1_ipp_wp_on_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x92c)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_usdhc1_ipp_wp_on_select_input_t *) HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: usdhc1, In Pin: ipp_wp_on
 *
 * Values:
 * 0 - Selecting Pad: DI0_PIN4 for Mode: ALT3.
 * 1 - Selecting Pad: GPIO_9 for Mode: ALT6.
 */

#define BP_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: usdhc2, In Pin: ipp_card_clk_in
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_usdhc2_ipp_card_clk_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x930)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_usdhc2_ipp_card_clk_in_select_input_t *) HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: usdhc2, In Pin: ipp_card_clk_in
 *
 * Values:
 * 0 - Selecting Pad: NANDF_CS3 for Mode: ALT8.
 * 1 - Selecting Pad: SD2_CLK for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: usdhc3, In Pin: ipp_card_clk_in
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_usdhc3_ipp_card_clk_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x934)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_usdhc3_ipp_card_clk_in_select_input_t *) HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: usdhc3, In Pin: ipp_card_clk_in
 *
 * Values:
 * 0 - Selecting Pad: NANDF_ALE for Mode: ALT8.
 * 1 - Selecting Pad: SD3_CLK for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT, DAISY, v)
#endif


#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT - DAISY (RW)
 *

 */
typedef union
{
    reg32_t U;
    struct
    {
        unsigned DAISY : 1; //!< Selecting Pads Involved in Daisy Chain. Instance: usdhc4, In Pin: ipp_card_clk_in
        unsigned RESERVED0 : 31; //!< Reserved
    } B;
} hw_iomuxc_iomuxc_usdhc4_ipp_card_clk_in_select_input_t;
#endif

/*
 * constants & macros for entire IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT register
 */
#define HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_ADDR      (REGS_IOMUXC_BASE + 0x938)

#ifndef __LANGUAGE_ASM__
#define HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT           (*(volatile hw_iomuxc_iomuxc_usdhc4_ipp_card_clk_in_select_input_t *) HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_ADDR)
#define HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_RD()      (HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT.U)
#define HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_WR(v)     (HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT.U = (v))
#define HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_SET(v)    (HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_RD() |  (v)))
#define HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_CLR(v)    (HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_RD() & ~(v)))
#define HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_TOG(v)    (HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_WR(HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_RD() ^  (v)))
#endif

/*
 * constants & macros for individual IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT bitfields
 */

/* --- Register HW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT, field DAISY[0:0] (RW)
 *
 * Selecting Pads Involved in Daisy Chain. Instance: usdhc4, In Pin: ipp_card_clk_in
 *
 * Values:
 * 0 - Selecting Pad: NANDF_RB0 for Mode: ALT8.
 * 1 - Selecting Pad: SD4_CLK for Mode: ALT0.
 */

#define BP_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY      (0)
#define BM_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY      (0x00000001)

#ifndef __LANGUAGE_ASM__
#define BF_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   ((((reg32_t) v) << 0) & BM_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY)
#else
#define BF_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   (((v) << 0) & BM_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY)
#endif
#ifndef __LANGUAGE_ASM__
//! @brief Set the DAISY field to a new value.
#define BW_IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT_DAISY(v)   BF_CS1(IOMUXC_IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT, DAISY, v)
#endif



/*!
 * @brief All IOMUXC module registers.
 */
#ifndef __LANGUAGE_ASM__
typedef struct
{
    volatile hw_iomuxc_iomuxc_gpr0_t IOMUXC_GPR0; //!< GPR0
    volatile hw_iomuxc_iomuxc_gpr1_t IOMUXC_GPR1; //!< GPR1
    volatile hw_iomuxc_iomuxc_gpr2_t IOMUXC_GPR2; //!< GPR2
    volatile hw_iomuxc_iomuxc_gpr3_t IOMUXC_GPR3; //!< GPR3
    volatile hw_iomuxc_iomuxc_gpr4_t IOMUXC_GPR4; //!< GPR4
    volatile hw_iomuxc_iomuxc_gpr5_t IOMUXC_GPR5; //!< GPR5
    volatile hw_iomuxc_iomuxc_gpr6_t IOMUXC_GPR6; //!< GPR6
    volatile hw_iomuxc_iomuxc_gpr7_t IOMUXC_GPR7; //!< GPR7
    volatile hw_iomuxc_iomuxc_gpr8_t IOMUXC_GPR8; //!< GPR8
    volatile hw_iomuxc_iomuxc_gpr9_t IOMUXC_GPR9; //!< GPR9
    volatile hw_iomuxc_iomuxc_gpr10_t IOMUXC_GPR10; //!< GPR10
    volatile hw_iomuxc_iomuxc_gpr11_t IOMUXC_GPR11; //!< GPR11
    volatile hw_iomuxc_iomuxc_gpr12_t IOMUXC_GPR12; //!< GPR12
    volatile hw_iomuxc_iomuxc_gpr13_t IOMUXC_GPR13; //!< GPR13
    volatile hw_iomuxc_iomuxc_observe_mux_0_t IOMUXC_OBSERVE_MUX_0; //!< OBSRV
    volatile hw_iomuxc_iomuxc_observe_mux_1_t IOMUXC_OBSERVE_MUX_1; //!< OBSRV
    volatile hw_iomuxc_iomuxc_observe_mux_2_t IOMUXC_OBSERVE_MUX_2; //!< OBSRV
    volatile hw_iomuxc_iomuxc_observe_mux_3_t IOMUXC_OBSERVE_MUX_3; //!< OBSRV
    volatile hw_iomuxc_iomuxc_observe_mux_4_t IOMUXC_OBSERVE_MUX_4; //!< OBSRV
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat10_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat11_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat12_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat13_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat14_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat15_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat16_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat17_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat18_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat19_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat4_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat5_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat6_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat7_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat8_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_dat9_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_data_en_t IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_mclk_t IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_pixclk_t IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_csi0_vsync_t IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_disp_clk_t IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin15_t IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin2_t IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin3_t IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_di0_pin4_t IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat0_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat1_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat10_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat11_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat12_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat13_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat14_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat15_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat16_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat17_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat18_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat19_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat2_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat20_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat21_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat22_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat23_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat3_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat4_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat5_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat6_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat7_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat8_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_disp0_dat9_t IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a16_t IOMUXC_SW_MUX_CTL_PAD_EIM_A16; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a17_t IOMUXC_SW_MUX_CTL_PAD_EIM_A17; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a18_t IOMUXC_SW_MUX_CTL_PAD_EIM_A18; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a19_t IOMUXC_SW_MUX_CTL_PAD_EIM_A19; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a20_t IOMUXC_SW_MUX_CTL_PAD_EIM_A20; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a21_t IOMUXC_SW_MUX_CTL_PAD_EIM_A21; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a22_t IOMUXC_SW_MUX_CTL_PAD_EIM_A22; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a23_t IOMUXC_SW_MUX_CTL_PAD_EIM_A23; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a24_t IOMUXC_SW_MUX_CTL_PAD_EIM_A24; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_a25_t IOMUXC_SW_MUX_CTL_PAD_EIM_A25; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_bclk_t IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_cs0_t IOMUXC_SW_MUX_CTL_PAD_EIM_CS0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_cs1_t IOMUXC_SW_MUX_CTL_PAD_EIM_CS1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d16_t IOMUXC_SW_MUX_CTL_PAD_EIM_D16; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d17_t IOMUXC_SW_MUX_CTL_PAD_EIM_D17; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d18_t IOMUXC_SW_MUX_CTL_PAD_EIM_D18; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d19_t IOMUXC_SW_MUX_CTL_PAD_EIM_D19; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d20_t IOMUXC_SW_MUX_CTL_PAD_EIM_D20; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d21_t IOMUXC_SW_MUX_CTL_PAD_EIM_D21; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d22_t IOMUXC_SW_MUX_CTL_PAD_EIM_D22; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d23_t IOMUXC_SW_MUX_CTL_PAD_EIM_D23; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d24_t IOMUXC_SW_MUX_CTL_PAD_EIM_D24; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d25_t IOMUXC_SW_MUX_CTL_PAD_EIM_D25; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d26_t IOMUXC_SW_MUX_CTL_PAD_EIM_D26; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d27_t IOMUXC_SW_MUX_CTL_PAD_EIM_D27; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d28_t IOMUXC_SW_MUX_CTL_PAD_EIM_D28; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d29_t IOMUXC_SW_MUX_CTL_PAD_EIM_D29; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d30_t IOMUXC_SW_MUX_CTL_PAD_EIM_D30; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_d31_t IOMUXC_SW_MUX_CTL_PAD_EIM_D31; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da0_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da1_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da10_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA10; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da11_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA11; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da12_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA12; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da13_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA13; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da14_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA14; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da15_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA15; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da2_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da3_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da4_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA4; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da5_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA5; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da6_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA6; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da7_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA7; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da8_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA8; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_da9_t IOMUXC_SW_MUX_CTL_PAD_EIM_DA9; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb0_t IOMUXC_SW_MUX_CTL_PAD_EIM_EB0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb1_t IOMUXC_SW_MUX_CTL_PAD_EIM_EB1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb2_t IOMUXC_SW_MUX_CTL_PAD_EIM_EB2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_eb3_t IOMUXC_SW_MUX_CTL_PAD_EIM_EB3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_lba_t IOMUXC_SW_MUX_CTL_PAD_EIM_LBA; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_oe_t IOMUXC_SW_MUX_CTL_PAD_EIM_OE; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_rw_t IOMUXC_SW_MUX_CTL_PAD_EIM_RW; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_eim_wait_t IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_crs_dv_t IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_mdc_t IOMUXC_SW_MUX_CTL_PAD_ENET_MDC; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_mdio_t IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_ref_clk_t IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_rx_er_t IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_rxd0_t IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_rxd1_t IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_tx_en_t IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_txd0_t IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_enet_txd1_t IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_0_t IOMUXC_SW_MUX_CTL_PAD_GPIO_0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_1_t IOMUXC_SW_MUX_CTL_PAD_GPIO_1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_16_t IOMUXC_SW_MUX_CTL_PAD_GPIO_16; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_17_t IOMUXC_SW_MUX_CTL_PAD_GPIO_17; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_18_t IOMUXC_SW_MUX_CTL_PAD_GPIO_18; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_19_t IOMUXC_SW_MUX_CTL_PAD_GPIO_19; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_2_t IOMUXC_SW_MUX_CTL_PAD_GPIO_2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_3_t IOMUXC_SW_MUX_CTL_PAD_GPIO_3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_4_t IOMUXC_SW_MUX_CTL_PAD_GPIO_4; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_5_t IOMUXC_SW_MUX_CTL_PAD_GPIO_5; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_6_t IOMUXC_SW_MUX_CTL_PAD_GPIO_6; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_7_t IOMUXC_SW_MUX_CTL_PAD_GPIO_7; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_8_t IOMUXC_SW_MUX_CTL_PAD_GPIO_8; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_gpio_9_t IOMUXC_SW_MUX_CTL_PAD_GPIO_9; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col0_t IOMUXC_SW_MUX_CTL_PAD_KEY_COL0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col1_t IOMUXC_SW_MUX_CTL_PAD_KEY_COL1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col2_t IOMUXC_SW_MUX_CTL_PAD_KEY_COL2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col3_t IOMUXC_SW_MUX_CTL_PAD_KEY_COL3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_col4_t IOMUXC_SW_MUX_CTL_PAD_KEY_COL4; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row0_t IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row1_t IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row2_t IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row3_t IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_key_row4_t IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_ale_t IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cle_t IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs0_t IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs1_t IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs2_t IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_cs3_t IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d0_t IOMUXC_SW_MUX_CTL_PAD_NANDF_D0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d1_t IOMUXC_SW_MUX_CTL_PAD_NANDF_D1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d2_t IOMUXC_SW_MUX_CTL_PAD_NANDF_D2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d3_t IOMUXC_SW_MUX_CTL_PAD_NANDF_D3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d4_t IOMUXC_SW_MUX_CTL_PAD_NANDF_D4; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d5_t IOMUXC_SW_MUX_CTL_PAD_NANDF_D5; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d6_t IOMUXC_SW_MUX_CTL_PAD_NANDF_D6; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_d7_t IOMUXC_SW_MUX_CTL_PAD_NANDF_D7; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_rb0_t IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_nandf_wp_b_t IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd0_t IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd1_t IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd2_t IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rd3_t IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rx_ctl_t IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_rxc_t IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td0_t IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td1_t IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td2_t IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_td3_t IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_tx_ctl_t IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_rgmii_txc_t IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_clk_t IOMUXC_SW_MUX_CTL_PAD_SD1_CLK; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_cmd_t IOMUXC_SW_MUX_CTL_PAD_SD1_CMD; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat0_t IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat1_t IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat2_t IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd1_dat3_t IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_clk_t IOMUXC_SW_MUX_CTL_PAD_SD2_CLK; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_cmd_t IOMUXC_SW_MUX_CTL_PAD_SD2_CMD; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat0_t IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat1_t IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat2_t IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd2_dat3_t IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_clk_t IOMUXC_SW_MUX_CTL_PAD_SD3_CLK; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_cmd_t IOMUXC_SW_MUX_CTL_PAD_SD3_CMD; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat0_t IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat1_t IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat2_t IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat3_t IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat4_t IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat5_t IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat6_t IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_dat7_t IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd3_rst_t IOMUXC_SW_MUX_CTL_PAD_SD3_RST; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_clk_t IOMUXC_SW_MUX_CTL_PAD_SD4_CLK; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_cmd_t IOMUXC_SW_MUX_CTL_PAD_SD4_CMD; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat0_t IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat1_t IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat2_t IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat3_t IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat4_t IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat5_t IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat6_t IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_mux_ctl_pad_sd4_dat7_t IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7; //!< SW_MUX_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat10_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat11_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat12_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat13_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat14_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat15_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat16_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat17_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat18_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat19_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat4_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat5_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat6_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat7_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat8_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_dat9_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_data_en_t IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_mclk_t IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_pixclk_t IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_csi0_vsync_t IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_disp_clk_t IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin15_t IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin2_t IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin3_t IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_di0_pin4_t IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat0_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat1_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat10_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat11_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat12_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat13_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat14_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat15_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat16_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat17_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat18_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat19_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat2_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat20_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat21_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat22_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat23_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat3_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat4_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat5_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat6_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat7_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat8_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_disp0_dat9_t IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a0_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a1_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a10_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A10; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a11_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A11; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a12_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A12; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a13_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A13; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a14_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A14; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a15_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A15; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a2_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a3_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a4_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a5_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A5; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a6_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A6; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a7_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A7; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a8_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A8; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_a9_t IOMUXC_SW_PAD_CTL_PAD_DRAM_A9; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_cas_t IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_cs0_t IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_cs1_t IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm0_t IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm1_t IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm2_t IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm3_t IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm4_t IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm5_t IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm6_t IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_dqm7_t IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_ras_t IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_reset_t IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdba0_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdba1_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdba2_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdcke0_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdcke1_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdclk_0_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdclk_1_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdodt0_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdodt1_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs0_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs1_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs2_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs3_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs4_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs5_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs6_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdqs7_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_dram_sdwe_t IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a16_t IOMUXC_SW_PAD_CTL_PAD_EIM_A16; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a17_t IOMUXC_SW_PAD_CTL_PAD_EIM_A17; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a18_t IOMUXC_SW_PAD_CTL_PAD_EIM_A18; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a19_t IOMUXC_SW_PAD_CTL_PAD_EIM_A19; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a20_t IOMUXC_SW_PAD_CTL_PAD_EIM_A20; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a21_t IOMUXC_SW_PAD_CTL_PAD_EIM_A21; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a22_t IOMUXC_SW_PAD_CTL_PAD_EIM_A22; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a23_t IOMUXC_SW_PAD_CTL_PAD_EIM_A23; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a24_t IOMUXC_SW_PAD_CTL_PAD_EIM_A24; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_a25_t IOMUXC_SW_PAD_CTL_PAD_EIM_A25; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_bclk_t IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_cs0_t IOMUXC_SW_PAD_CTL_PAD_EIM_CS0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_cs1_t IOMUXC_SW_PAD_CTL_PAD_EIM_CS1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d16_t IOMUXC_SW_PAD_CTL_PAD_EIM_D16; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d17_t IOMUXC_SW_PAD_CTL_PAD_EIM_D17; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d18_t IOMUXC_SW_PAD_CTL_PAD_EIM_D18; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d19_t IOMUXC_SW_PAD_CTL_PAD_EIM_D19; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d20_t IOMUXC_SW_PAD_CTL_PAD_EIM_D20; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d21_t IOMUXC_SW_PAD_CTL_PAD_EIM_D21; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d22_t IOMUXC_SW_PAD_CTL_PAD_EIM_D22; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d23_t IOMUXC_SW_PAD_CTL_PAD_EIM_D23; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d24_t IOMUXC_SW_PAD_CTL_PAD_EIM_D24; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d25_t IOMUXC_SW_PAD_CTL_PAD_EIM_D25; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d26_t IOMUXC_SW_PAD_CTL_PAD_EIM_D26; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d27_t IOMUXC_SW_PAD_CTL_PAD_EIM_D27; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d28_t IOMUXC_SW_PAD_CTL_PAD_EIM_D28; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d29_t IOMUXC_SW_PAD_CTL_PAD_EIM_D29; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d30_t IOMUXC_SW_PAD_CTL_PAD_EIM_D30; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_d31_t IOMUXC_SW_PAD_CTL_PAD_EIM_D31; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da0_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da1_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da10_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA10; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da11_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA11; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da12_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA12; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da13_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA13; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da14_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA14; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da15_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA15; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da2_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da3_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da4_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da5_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA5; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da6_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA6; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da7_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA7; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da8_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA8; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_da9_t IOMUXC_SW_PAD_CTL_PAD_EIM_DA9; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb0_t IOMUXC_SW_PAD_CTL_PAD_EIM_EB0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb1_t IOMUXC_SW_PAD_CTL_PAD_EIM_EB1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb2_t IOMUXC_SW_PAD_CTL_PAD_EIM_EB2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_eb3_t IOMUXC_SW_PAD_CTL_PAD_EIM_EB3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_lba_t IOMUXC_SW_PAD_CTL_PAD_EIM_LBA; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_oe_t IOMUXC_SW_PAD_CTL_PAD_EIM_OE; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_rw_t IOMUXC_SW_PAD_CTL_PAD_EIM_RW; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_eim_wait_t IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_crs_dv_t IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_mdc_t IOMUXC_SW_PAD_CTL_PAD_ENET_MDC; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_mdio_t IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_ref_clk_t IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_rx_er_t IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_rxd0_t IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_rxd1_t IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_tx_en_t IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_txd0_t IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_enet_txd1_t IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_0_t IOMUXC_SW_PAD_CTL_PAD_GPIO_0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_1_t IOMUXC_SW_PAD_CTL_PAD_GPIO_1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_16_t IOMUXC_SW_PAD_CTL_PAD_GPIO_16; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_17_t IOMUXC_SW_PAD_CTL_PAD_GPIO_17; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_18_t IOMUXC_SW_PAD_CTL_PAD_GPIO_18; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_19_t IOMUXC_SW_PAD_CTL_PAD_GPIO_19; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_2_t IOMUXC_SW_PAD_CTL_PAD_GPIO_2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_3_t IOMUXC_SW_PAD_CTL_PAD_GPIO_3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_4_t IOMUXC_SW_PAD_CTL_PAD_GPIO_4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_5_t IOMUXC_SW_PAD_CTL_PAD_GPIO_5; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_6_t IOMUXC_SW_PAD_CTL_PAD_GPIO_6; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_7_t IOMUXC_SW_PAD_CTL_PAD_GPIO_7; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_8_t IOMUXC_SW_PAD_CTL_PAD_GPIO_8; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_gpio_9_t IOMUXC_SW_PAD_CTL_PAD_GPIO_9; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_mod_t IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tck_t IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tdi_t IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tdo_t IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_tms_t IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_jtag_trstb_t IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col0_t IOMUXC_SW_PAD_CTL_PAD_KEY_COL0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col1_t IOMUXC_SW_PAD_CTL_PAD_KEY_COL1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col2_t IOMUXC_SW_PAD_CTL_PAD_KEY_COL2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col3_t IOMUXC_SW_PAD_CTL_PAD_KEY_COL3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_col4_t IOMUXC_SW_PAD_CTL_PAD_KEY_COL4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row0_t IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row1_t IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row2_t IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row3_t IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_key_row4_t IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_ale_t IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cle_t IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs0_t IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs1_t IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs2_t IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_cs3_t IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d0_t IOMUXC_SW_PAD_CTL_PAD_NANDF_D0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d1_t IOMUXC_SW_PAD_CTL_PAD_NANDF_D1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d2_t IOMUXC_SW_PAD_CTL_PAD_NANDF_D2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d3_t IOMUXC_SW_PAD_CTL_PAD_NANDF_D3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d4_t IOMUXC_SW_PAD_CTL_PAD_NANDF_D4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d5_t IOMUXC_SW_PAD_CTL_PAD_NANDF_D5; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d6_t IOMUXC_SW_PAD_CTL_PAD_NANDF_D6; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_d7_t IOMUXC_SW_PAD_CTL_PAD_NANDF_D7; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_rb0_t IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_nandf_wp_b_t IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd0_t IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd1_t IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd2_t IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rd3_t IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rx_ctl_t IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_rxc_t IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td0_t IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td1_t IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td2_t IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_td3_t IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_tx_ctl_t IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_rgmii_txc_t IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_clk_t IOMUXC_SW_PAD_CTL_PAD_SD1_CLK; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_cmd_t IOMUXC_SW_PAD_CTL_PAD_SD1_CMD; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat0_t IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat1_t IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat2_t IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd1_dat3_t IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_clk_t IOMUXC_SW_PAD_CTL_PAD_SD2_CLK; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_cmd_t IOMUXC_SW_PAD_CTL_PAD_SD2_CMD; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat0_t IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat1_t IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat2_t IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd2_dat3_t IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_clk_t IOMUXC_SW_PAD_CTL_PAD_SD3_CLK; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_cmd_t IOMUXC_SW_PAD_CTL_PAD_SD3_CMD; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat0_t IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat1_t IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat2_t IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat3_t IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat4_t IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat5_t IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat6_t IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_dat7_t IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd3_rst_t IOMUXC_SW_PAD_CTL_PAD_SD3_RST; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_clk_t IOMUXC_SW_PAD_CTL_PAD_SD4_CLK; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_cmd_t IOMUXC_SW_PAD_CTL_PAD_SD4_CMD; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat0_t IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat1_t IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat2_t IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat3_t IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat4_t IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat5_t IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat6_t IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_pad_sd4_dat7_t IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7; //!< SW_PAD_CTL
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b7ds_t IOMUXC_SW_PAD_CTL_GRP_B7DS; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_addds_t IOMUXC_SW_PAD_CTL_GRP_ADDDS; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrmode_ctl_t IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrpke_t IOMUXC_SW_PAD_CTL_GRP_DDRPKE; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrpk_t IOMUXC_SW_PAD_CTL_GRP_DDRPK; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrhys_t IOMUXC_SW_PAD_CTL_GRP_DDRHYS; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddrmode_t IOMUXC_SW_PAD_CTL_GRP_DDRMODE; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b0ds_t IOMUXC_SW_PAD_CTL_GRP_B0DS; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddr_type_rgmii_t IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ctlds_t IOMUXC_SW_PAD_CTL_GRP_CTLDS; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b1ds_t IOMUXC_SW_PAD_CTL_GRP_B1DS; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_ddr_type_t IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b2ds_t IOMUXC_SW_PAD_CTL_GRP_B2DS; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b3ds_t IOMUXC_SW_PAD_CTL_GRP_B3DS; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b4ds_t IOMUXC_SW_PAD_CTL_GRP_B4DS; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b5ds_t IOMUXC_SW_PAD_CTL_GRP_B5DS; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_rgmii_term_t IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_sw_pad_ctl_grp_b6ds_t IOMUXC_SW_PAD_CTL_GRP_B6DS; //!< SW_GRP
    volatile hw_iomuxc_iomuxc_anatop_usb_otg_id_select_input_t IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_asrc_asrck_clock_6_select_input_t IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p4_input_da_amx_select_input_t IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p4_input_db_amx_select_input_t IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p4_input_rxclk_amx_select_input_t IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p4_input_rxfs_amx_select_input_t IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p4_input_txclk_amx_select_input_t IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p4_input_txfs_amx_select_input_t IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p5_input_da_amx_select_input_t IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p5_input_db_amx_select_input_t IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p5_input_rxclk_amx_select_input_t IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p5_input_rxfs_amx_select_input_t IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p5_input_txclk_amx_select_input_t IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_audmux_p5_input_txfs_amx_select_input_t IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_can1_ipp_ind_canrx_select_input_t IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_can2_ipp_ind_canrx_select_input_t IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ccm_ipp_di1_clk_select_input_t IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ccm_pmic_vfuncional_ready_select_input_t IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi1_ipp_cspi_clk_in_select_input_t IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_miso_select_input_t IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_mosi_select_input_t IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_0_select_input_t IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_1_select_input_t IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_2_select_input_t IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi1_ipp_ind_ss_b_3_select_input_t IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi2_ipp_cspi_clk_in_select_input_t IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi2_ipp_ind_miso_select_input_t IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi2_ipp_ind_mosi_select_input_t IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi2_ipp_ind_ss_b_0_select_input_t IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi2_ipp_ind_ss_b_1_select_input_t IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ecspi4_ipp_ind_ss_b_0_select_input_t IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_enet_ipg_clk_rmii_select_input_t IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_mdio_select_input_t IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxclk_select_input_t IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_0_select_input_t IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_1_select_input_t IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_2_select_input_t IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxdata_3_select_input_t IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_enet_ipp_ind_mac0_rxen_select_input_t IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_fsr_select_input_t IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_fst_select_input_t IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_hckr_select_input_t IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_hckt_select_input_t IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_sckr_select_input_t IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_sckt_select_input_t IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo0_select_input_t IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo1_select_input_t IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo2_sdi3_select_input_t IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo3_sdi2_select_input_t IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo4_sdi1_select_input_t IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_esai_ipp_ind_sdo5_sdi0_select_input_t IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_hdmi_tx_icecin_select_input_t IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_hdmi_tx_ii2c_msth13tddc_sclin_select_input_t IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_hdmi_tx_ii2c_msth13tddc_sdain_select_input_t IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_i2c1_ipp_scl_in_select_input_t IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_i2c1_ipp_sda_in_select_input_t IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_i2c2_ipp_scl_in_select_input_t IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_i2c2_ipp_sda_in_select_input_t IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_i2c3_ipp_scl_in_select_input_t IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_i2c3_ipp_sda_in_select_input_t IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_i2c4_ipp_scl_in_select_input_t IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_i2c4_ipp_sda_in_select_input_t IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_10_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_11_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_12_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_13_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_14_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_15_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_16_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_17_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_18_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_19_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_data_en_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_hsync_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_pix_clk_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_ipu1_ipp_ind_sens1_vsync_select_input_t IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_kpp_ipp_ind_col_5_select_input_t IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_kpp_ipp_ind_col_6_select_input_t IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_kpp_ipp_ind_col_7_select_input_t IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_kpp_ipp_ind_row_5_select_input_t IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_kpp_ipp_ind_row_6_select_input_t IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_kpp_ipp_ind_row_7_select_input_t IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_lcdif_lcdif_busy_select_input_t IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_mlb_mlb_clk_in_select_input_t IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_mlb_mlb_data_in_select_input_t IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_mlb_mlb_sig_in_select_input_t IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_sdma_events_14_select_input_t IOMUXC_SDMA_EVENTS_14_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_sdma_events_15_select_input_t IOMUXC_SDMA_EVENTS_15_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_spdif_spdif_in1_select_input_t IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_spdif_tx_clk2_select_input_t IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_uart1_ipp_uart_rts_b_select_input_t IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_uart1_ipp_uart_rxd_mux_select_input_t IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_uart2_ipp_uart_rts_b_select_input_t IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_uart2_ipp_uart_rxd_mux_select_input_t IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_uart3_ipp_uart_rts_b_select_input_t IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_uart3_ipp_uart_rxd_mux_select_input_t IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_uart4_ipp_uart_rts_b_select_input_t IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_uart4_ipp_uart_rxd_mux_select_input_t IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_uart5_ipp_uart_rts_b_select_input_t IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_uart5_ipp_uart_rxd_mux_select_input_t IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_usboh3_ipp_ind_otg_oc_select_input_t IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_usboh3_ipp_ind_uh1_oc_select_input_t IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_usdhc1_ipp_card_clk_in_select_input_t IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_usdhc1_ipp_wp_on_select_input_t IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_usdhc2_ipp_card_clk_in_select_input_t IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_usdhc3_ipp_card_clk_in_select_input_t IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT; //!< DAISY
    volatile hw_iomuxc_iomuxc_usdhc4_ipp_card_clk_in_select_input_t IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT; //!< DAISY
} hw_iomuxc_t;
#endif

//! @brief Macro to access all IOMUXC registers.
//! @return Reference (not a pointer) to the registers struct. To get a pointer to the struct,
//!     use the '&' operator, like <code>&HW_IOMUXC(0)</code>.
#define HW_IOMUXC     (*(volatile hw_iomuxc_t *) REGS_IOMUXC_BASE)


#endif // _IOMUXC_H
