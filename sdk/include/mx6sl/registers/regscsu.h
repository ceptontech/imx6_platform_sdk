/*
 * Copyright (c) 2012, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL FREESCALE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */
/*
 * WARNING! DO NOT EDIT THIS FILE DIRECTLY!
 *
 * This file was generated automatically and any changes may be lost.
 */
#ifndef __HW_CSU_REGISTERS_H__
#define __HW_CSU_REGISTERS_H__

#include "regs.h"

/*
 * i.MX6SL CSU
 *

 *
 * Registers defined in this header file:
 * - HW_CSU_CSL0 - Config security level register
 * - HW_CSU_CSL1 - Config security level register
 * - HW_CSU_CSL2 - Config security level register
 * - HW_CSU_CSL3 - Config security level register
 * - HW_CSU_CSL4 - Config security level register
 * - HW_CSU_CSL5 - Config security level register
 * - HW_CSU_CSL6 - Config security level register
 * - HW_CSU_CSL7 - Config security level register
 * - HW_CSU_CSL8 - Config security level register
 * - HW_CSU_CSL9 - Config security level register
 * - HW_CSU_CSL10 - Config security level register
 * - HW_CSU_CSL11 - Config security level register
 * - HW_CSU_CSL12 - Config security level register
 * - HW_CSU_CSL13 - Config security level register
 * - HW_CSU_CSL14 - Config security level register
 * - HW_CSU_CSL15 - Config security level register
 * - HW_CSU_CSL16 - Config security level register
 * - HW_CSU_CSL17 - Config security level register
 * - HW_CSU_CSL18 - Config security level register
 * - HW_CSU_CSL19 - Config security level register
 * - HW_CSU_CSL20 - Config security level register
 * - HW_CSU_CSL21 - Config security level register
 * - HW_CSU_CSL22 - Config security level register
 * - HW_CSU_CSL23 - Config security level register
 * - HW_CSU_CSL24 - Config security level register
 * - HW_CSU_CSL25 - Config security level register
 * - HW_CSU_CSL26 - Config security level register
 * - HW_CSU_CSL27 - Config security level register
 * - HW_CSU_CSL28 - Config security level register
 * - HW_CSU_CSL29 - Config security level register
 * - HW_CSU_CSL30 - Config security level register
 * - HW_CSU_CSL31 - Config security level register
 * - HW_CSU_CSL32 - Config security level register
 * - HW_CSU_CSL33 - Config security level register
 * - HW_CSU_CSL34 - Config security level register
 * - HW_CSU_CSL35 - Config security level register
 * - HW_CSU_CSL36 - Config security level register
 * - HW_CSU_CSL37 - Config security level register
 * - HW_CSU_CSL38 - Config security level register
 * - HW_CSU_CSL39 - Config security level register
 * - HW_CSU_HP0 - HP register
 * - HW_CSU_HP1 - HP register
 * - HW_CSU_SA - Secure access register
 *
 * - hw_csu_t - Struct containing all module registers.
 */

//! @name Module base addresses
//@{
#ifndef REGS_CSU_BASE
#define HW_CSU_INSTANCE_COUNT (1) //!< Number of instances of the CSU module.
#define REGS_CSU_BASE (0x021c0000) //!< Base address for CSU.
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL0 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL0 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl0
{
    reg32_t U;
    struct _hw_csu_csl0_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl0_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL0 register
 */
//@{
#define HW_CSU_CSL0_ADDR      (REGS_CSU_BASE + 0x0)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL0           (*(volatile hw_csu_csl0_t *) HW_CSU_CSL0_ADDR)
#define HW_CSU_CSL0_RD()      (HW_CSU_CSL0.U)
#define HW_CSU_CSL0_WR(v)     (HW_CSU_CSL0.U = (v))
#define HW_CSU_CSL0_SET(v)    (HW_CSU_CSL0_WR(HW_CSU_CSL0_RD() |  (v)))
#define HW_CSU_CSL0_CLR(v)    (HW_CSU_CSL0_WR(HW_CSU_CSL0_RD() & ~(v)))
#define HW_CSU_CSL0_TOG(v)    (HW_CSU_CSL0_WR(HW_CSU_CSL0_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL0 bitfields
 */

/*! @name Register CSU_CSL0, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL0_SUR_S2      (0)      //!< Bit position for CSU_CSL0_SUR_S2.
#define BM_CSU_CSL0_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL0_SUR_S2.

//! @brief Get value of CSU_CSL0_SUR_S2 from a register value.
#define BG_CSU_CSL0_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_SUR_S2) >> BP_CSU_CSL0_SUR_S2)

//! @brief Format value for bitfield CSU_CSL0_SUR_S2.
#define BF_CSU_CSL0_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_SUR_S2) & BM_CSU_CSL0_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL0_SUR_S2(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_SUR_S2) | BF_CSU_CSL0_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL0_SSR_S2      (1)      //!< Bit position for CSU_CSL0_SSR_S2.
#define BM_CSU_CSL0_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL0_SSR_S2.

//! @brief Get value of CSU_CSL0_SSR_S2 from a register value.
#define BG_CSU_CSL0_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_SSR_S2) >> BP_CSU_CSL0_SSR_S2)

//! @brief Format value for bitfield CSU_CSL0_SSR_S2.
#define BF_CSU_CSL0_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_SSR_S2) & BM_CSU_CSL0_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL0_SSR_S2(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_SSR_S2) | BF_CSU_CSL0_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL0_NUR_S2      (2)      //!< Bit position for CSU_CSL0_NUR_S2.
#define BM_CSU_CSL0_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL0_NUR_S2.

//! @brief Get value of CSU_CSL0_NUR_S2 from a register value.
#define BG_CSU_CSL0_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_NUR_S2) >> BP_CSU_CSL0_NUR_S2)

//! @brief Format value for bitfield CSU_CSL0_NUR_S2.
#define BF_CSU_CSL0_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_NUR_S2) & BM_CSU_CSL0_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL0_NUR_S2(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_NUR_S2) | BF_CSU_CSL0_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL0_NSR_S2      (3)      //!< Bit position for CSU_CSL0_NSR_S2.
#define BM_CSU_CSL0_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL0_NSR_S2.

//! @brief Get value of CSU_CSL0_NSR_S2 from a register value.
#define BG_CSU_CSL0_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_NSR_S2) >> BP_CSU_CSL0_NSR_S2)

//! @brief Format value for bitfield CSU_CSL0_NSR_S2.
#define BF_CSU_CSL0_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_NSR_S2) & BM_CSU_CSL0_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL0_NSR_S2(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_NSR_S2) | BF_CSU_CSL0_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL0_SUW_S2      (4)      //!< Bit position for CSU_CSL0_SUW_S2.
#define BM_CSU_CSL0_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL0_SUW_S2.

//! @brief Get value of CSU_CSL0_SUW_S2 from a register value.
#define BG_CSU_CSL0_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_SUW_S2) >> BP_CSU_CSL0_SUW_S2)

//! @brief Format value for bitfield CSU_CSL0_SUW_S2.
#define BF_CSU_CSL0_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_SUW_S2) & BM_CSU_CSL0_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL0_SUW_S2(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_SUW_S2) | BF_CSU_CSL0_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL0_SSW_S2      (5)      //!< Bit position for CSU_CSL0_SSW_S2.
#define BM_CSU_CSL0_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL0_SSW_S2.

//! @brief Get value of CSU_CSL0_SSW_S2 from a register value.
#define BG_CSU_CSL0_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_SSW_S2) >> BP_CSU_CSL0_SSW_S2)

//! @brief Format value for bitfield CSU_CSL0_SSW_S2.
#define BF_CSU_CSL0_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_SSW_S2) & BM_CSU_CSL0_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL0_SSW_S2(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_SSW_S2) | BF_CSU_CSL0_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL0_NUW_S2      (6)      //!< Bit position for CSU_CSL0_NUW_S2.
#define BM_CSU_CSL0_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL0_NUW_S2.

//! @brief Get value of CSU_CSL0_NUW_S2 from a register value.
#define BG_CSU_CSL0_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_NUW_S2) >> BP_CSU_CSL0_NUW_S2)

//! @brief Format value for bitfield CSU_CSL0_NUW_S2.
#define BF_CSU_CSL0_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_NUW_S2) & BM_CSU_CSL0_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL0_NUW_S2(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_NUW_S2) | BF_CSU_CSL0_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL0_NSW_S2      (7)      //!< Bit position for CSU_CSL0_NSW_S2.
#define BM_CSU_CSL0_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL0_NSW_S2.

//! @brief Get value of CSU_CSL0_NSW_S2 from a register value.
#define BG_CSU_CSL0_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_NSW_S2) >> BP_CSU_CSL0_NSW_S2)

//! @brief Format value for bitfield CSU_CSL0_NSW_S2.
#define BF_CSU_CSL0_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_NSW_S2) & BM_CSU_CSL0_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL0_NSW_S2(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_NSW_S2) | BF_CSU_CSL0_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL0_LOCK_S2      (8)      //!< Bit position for CSU_CSL0_LOCK_S2.
#define BM_CSU_CSL0_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL0_LOCK_S2.

//! @brief Get value of CSU_CSL0_LOCK_S2 from a register value.
#define BG_CSU_CSL0_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_LOCK_S2) >> BP_CSU_CSL0_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL0_LOCK_S2.
#define BF_CSU_CSL0_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_LOCK_S2) & BM_CSU_CSL0_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL0_LOCK_S2(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_LOCK_S2) | BF_CSU_CSL0_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL0_SUR_S1      (16)      //!< Bit position for CSU_CSL0_SUR_S1.
#define BM_CSU_CSL0_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL0_SUR_S1.

//! @brief Get value of CSU_CSL0_SUR_S1 from a register value.
#define BG_CSU_CSL0_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_SUR_S1) >> BP_CSU_CSL0_SUR_S1)

//! @brief Format value for bitfield CSU_CSL0_SUR_S1.
#define BF_CSU_CSL0_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_SUR_S1) & BM_CSU_CSL0_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL0_SUR_S1(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_SUR_S1) | BF_CSU_CSL0_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL0_SSR_S1      (17)      //!< Bit position for CSU_CSL0_SSR_S1.
#define BM_CSU_CSL0_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL0_SSR_S1.

//! @brief Get value of CSU_CSL0_SSR_S1 from a register value.
#define BG_CSU_CSL0_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_SSR_S1) >> BP_CSU_CSL0_SSR_S1)

//! @brief Format value for bitfield CSU_CSL0_SSR_S1.
#define BF_CSU_CSL0_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_SSR_S1) & BM_CSU_CSL0_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL0_SSR_S1(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_SSR_S1) | BF_CSU_CSL0_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL0_NUR_S1      (18)      //!< Bit position for CSU_CSL0_NUR_S1.
#define BM_CSU_CSL0_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL0_NUR_S1.

//! @brief Get value of CSU_CSL0_NUR_S1 from a register value.
#define BG_CSU_CSL0_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_NUR_S1) >> BP_CSU_CSL0_NUR_S1)

//! @brief Format value for bitfield CSU_CSL0_NUR_S1.
#define BF_CSU_CSL0_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_NUR_S1) & BM_CSU_CSL0_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL0_NUR_S1(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_NUR_S1) | BF_CSU_CSL0_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL0_NSR_S1      (19)      //!< Bit position for CSU_CSL0_NSR_S1.
#define BM_CSU_CSL0_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL0_NSR_S1.

//! @brief Get value of CSU_CSL0_NSR_S1 from a register value.
#define BG_CSU_CSL0_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_NSR_S1) >> BP_CSU_CSL0_NSR_S1)

//! @brief Format value for bitfield CSU_CSL0_NSR_S1.
#define BF_CSU_CSL0_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_NSR_S1) & BM_CSU_CSL0_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL0_NSR_S1(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_NSR_S1) | BF_CSU_CSL0_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL0_SUW_S1      (20)      //!< Bit position for CSU_CSL0_SUW_S1.
#define BM_CSU_CSL0_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL0_SUW_S1.

//! @brief Get value of CSU_CSL0_SUW_S1 from a register value.
#define BG_CSU_CSL0_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_SUW_S1) >> BP_CSU_CSL0_SUW_S1)

//! @brief Format value for bitfield CSU_CSL0_SUW_S1.
#define BF_CSU_CSL0_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_SUW_S1) & BM_CSU_CSL0_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL0_SUW_S1(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_SUW_S1) | BF_CSU_CSL0_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL0_SSW_S1      (21)      //!< Bit position for CSU_CSL0_SSW_S1.
#define BM_CSU_CSL0_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL0_SSW_S1.

//! @brief Get value of CSU_CSL0_SSW_S1 from a register value.
#define BG_CSU_CSL0_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_SSW_S1) >> BP_CSU_CSL0_SSW_S1)

//! @brief Format value for bitfield CSU_CSL0_SSW_S1.
#define BF_CSU_CSL0_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_SSW_S1) & BM_CSU_CSL0_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL0_SSW_S1(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_SSW_S1) | BF_CSU_CSL0_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL0_NUW_S1      (22)      //!< Bit position for CSU_CSL0_NUW_S1.
#define BM_CSU_CSL0_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL0_NUW_S1.

//! @brief Get value of CSU_CSL0_NUW_S1 from a register value.
#define BG_CSU_CSL0_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_NUW_S1) >> BP_CSU_CSL0_NUW_S1)

//! @brief Format value for bitfield CSU_CSL0_NUW_S1.
#define BF_CSU_CSL0_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_NUW_S1) & BM_CSU_CSL0_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL0_NUW_S1(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_NUW_S1) | BF_CSU_CSL0_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL0_NSW_S1      (23)      //!< Bit position for CSU_CSL0_NSW_S1.
#define BM_CSU_CSL0_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL0_NSW_S1.

//! @brief Get value of CSU_CSL0_NSW_S1 from a register value.
#define BG_CSU_CSL0_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_NSW_S1) >> BP_CSU_CSL0_NSW_S1)

//! @brief Format value for bitfield CSU_CSL0_NSW_S1.
#define BF_CSU_CSL0_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_NSW_S1) & BM_CSU_CSL0_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL0_NSW_S1(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_NSW_S1) | BF_CSU_CSL0_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL0, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL0_LOCK_S1      (24)      //!< Bit position for CSU_CSL0_LOCK_S1.
#define BM_CSU_CSL0_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL0_LOCK_S1.

//! @brief Get value of CSU_CSL0_LOCK_S1 from a register value.
#define BG_CSU_CSL0_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL0_LOCK_S1) >> BP_CSU_CSL0_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL0_LOCK_S1.
#define BF_CSU_CSL0_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL0_LOCK_S1) & BM_CSU_CSL0_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL0_LOCK_S1(v)   (HW_CSU_CSL0_WR((HW_CSU_CSL0_RD() & ~BM_CSU_CSL0_LOCK_S1) | BF_CSU_CSL0_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL1 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL1 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl1
{
    reg32_t U;
    struct _hw_csu_csl1_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl1_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL1 register
 */
//@{
#define HW_CSU_CSL1_ADDR      (REGS_CSU_BASE + 0x4)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL1           (*(volatile hw_csu_csl1_t *) HW_CSU_CSL1_ADDR)
#define HW_CSU_CSL1_RD()      (HW_CSU_CSL1.U)
#define HW_CSU_CSL1_WR(v)     (HW_CSU_CSL1.U = (v))
#define HW_CSU_CSL1_SET(v)    (HW_CSU_CSL1_WR(HW_CSU_CSL1_RD() |  (v)))
#define HW_CSU_CSL1_CLR(v)    (HW_CSU_CSL1_WR(HW_CSU_CSL1_RD() & ~(v)))
#define HW_CSU_CSL1_TOG(v)    (HW_CSU_CSL1_WR(HW_CSU_CSL1_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL1 bitfields
 */

/*! @name Register CSU_CSL1, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL1_SUR_S2      (0)      //!< Bit position for CSU_CSL1_SUR_S2.
#define BM_CSU_CSL1_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL1_SUR_S2.

//! @brief Get value of CSU_CSL1_SUR_S2 from a register value.
#define BG_CSU_CSL1_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_SUR_S2) >> BP_CSU_CSL1_SUR_S2)

//! @brief Format value for bitfield CSU_CSL1_SUR_S2.
#define BF_CSU_CSL1_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_SUR_S2) & BM_CSU_CSL1_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL1_SUR_S2(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_SUR_S2) | BF_CSU_CSL1_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL1_SSR_S2      (1)      //!< Bit position for CSU_CSL1_SSR_S2.
#define BM_CSU_CSL1_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL1_SSR_S2.

//! @brief Get value of CSU_CSL1_SSR_S2 from a register value.
#define BG_CSU_CSL1_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_SSR_S2) >> BP_CSU_CSL1_SSR_S2)

//! @brief Format value for bitfield CSU_CSL1_SSR_S2.
#define BF_CSU_CSL1_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_SSR_S2) & BM_CSU_CSL1_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL1_SSR_S2(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_SSR_S2) | BF_CSU_CSL1_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL1_NUR_S2      (2)      //!< Bit position for CSU_CSL1_NUR_S2.
#define BM_CSU_CSL1_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL1_NUR_S2.

//! @brief Get value of CSU_CSL1_NUR_S2 from a register value.
#define BG_CSU_CSL1_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_NUR_S2) >> BP_CSU_CSL1_NUR_S2)

//! @brief Format value for bitfield CSU_CSL1_NUR_S2.
#define BF_CSU_CSL1_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_NUR_S2) & BM_CSU_CSL1_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL1_NUR_S2(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_NUR_S2) | BF_CSU_CSL1_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL1_NSR_S2      (3)      //!< Bit position for CSU_CSL1_NSR_S2.
#define BM_CSU_CSL1_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL1_NSR_S2.

//! @brief Get value of CSU_CSL1_NSR_S2 from a register value.
#define BG_CSU_CSL1_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_NSR_S2) >> BP_CSU_CSL1_NSR_S2)

//! @brief Format value for bitfield CSU_CSL1_NSR_S2.
#define BF_CSU_CSL1_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_NSR_S2) & BM_CSU_CSL1_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL1_NSR_S2(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_NSR_S2) | BF_CSU_CSL1_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL1_SUW_S2      (4)      //!< Bit position for CSU_CSL1_SUW_S2.
#define BM_CSU_CSL1_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL1_SUW_S2.

//! @brief Get value of CSU_CSL1_SUW_S2 from a register value.
#define BG_CSU_CSL1_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_SUW_S2) >> BP_CSU_CSL1_SUW_S2)

//! @brief Format value for bitfield CSU_CSL1_SUW_S2.
#define BF_CSU_CSL1_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_SUW_S2) & BM_CSU_CSL1_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL1_SUW_S2(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_SUW_S2) | BF_CSU_CSL1_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL1_SSW_S2      (5)      //!< Bit position for CSU_CSL1_SSW_S2.
#define BM_CSU_CSL1_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL1_SSW_S2.

//! @brief Get value of CSU_CSL1_SSW_S2 from a register value.
#define BG_CSU_CSL1_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_SSW_S2) >> BP_CSU_CSL1_SSW_S2)

//! @brief Format value for bitfield CSU_CSL1_SSW_S2.
#define BF_CSU_CSL1_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_SSW_S2) & BM_CSU_CSL1_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL1_SSW_S2(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_SSW_S2) | BF_CSU_CSL1_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL1_NUW_S2      (6)      //!< Bit position for CSU_CSL1_NUW_S2.
#define BM_CSU_CSL1_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL1_NUW_S2.

//! @brief Get value of CSU_CSL1_NUW_S2 from a register value.
#define BG_CSU_CSL1_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_NUW_S2) >> BP_CSU_CSL1_NUW_S2)

//! @brief Format value for bitfield CSU_CSL1_NUW_S2.
#define BF_CSU_CSL1_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_NUW_S2) & BM_CSU_CSL1_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL1_NUW_S2(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_NUW_S2) | BF_CSU_CSL1_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL1_NSW_S2      (7)      //!< Bit position for CSU_CSL1_NSW_S2.
#define BM_CSU_CSL1_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL1_NSW_S2.

//! @brief Get value of CSU_CSL1_NSW_S2 from a register value.
#define BG_CSU_CSL1_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_NSW_S2) >> BP_CSU_CSL1_NSW_S2)

//! @brief Format value for bitfield CSU_CSL1_NSW_S2.
#define BF_CSU_CSL1_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_NSW_S2) & BM_CSU_CSL1_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL1_NSW_S2(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_NSW_S2) | BF_CSU_CSL1_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL1_LOCK_S2      (8)      //!< Bit position for CSU_CSL1_LOCK_S2.
#define BM_CSU_CSL1_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL1_LOCK_S2.

//! @brief Get value of CSU_CSL1_LOCK_S2 from a register value.
#define BG_CSU_CSL1_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_LOCK_S2) >> BP_CSU_CSL1_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL1_LOCK_S2.
#define BF_CSU_CSL1_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_LOCK_S2) & BM_CSU_CSL1_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL1_LOCK_S2(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_LOCK_S2) | BF_CSU_CSL1_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL1_SUR_S1      (16)      //!< Bit position for CSU_CSL1_SUR_S1.
#define BM_CSU_CSL1_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL1_SUR_S1.

//! @brief Get value of CSU_CSL1_SUR_S1 from a register value.
#define BG_CSU_CSL1_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_SUR_S1) >> BP_CSU_CSL1_SUR_S1)

//! @brief Format value for bitfield CSU_CSL1_SUR_S1.
#define BF_CSU_CSL1_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_SUR_S1) & BM_CSU_CSL1_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL1_SUR_S1(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_SUR_S1) | BF_CSU_CSL1_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL1_SSR_S1      (17)      //!< Bit position for CSU_CSL1_SSR_S1.
#define BM_CSU_CSL1_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL1_SSR_S1.

//! @brief Get value of CSU_CSL1_SSR_S1 from a register value.
#define BG_CSU_CSL1_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_SSR_S1) >> BP_CSU_CSL1_SSR_S1)

//! @brief Format value for bitfield CSU_CSL1_SSR_S1.
#define BF_CSU_CSL1_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_SSR_S1) & BM_CSU_CSL1_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL1_SSR_S1(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_SSR_S1) | BF_CSU_CSL1_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL1_NUR_S1      (18)      //!< Bit position for CSU_CSL1_NUR_S1.
#define BM_CSU_CSL1_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL1_NUR_S1.

//! @brief Get value of CSU_CSL1_NUR_S1 from a register value.
#define BG_CSU_CSL1_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_NUR_S1) >> BP_CSU_CSL1_NUR_S1)

//! @brief Format value for bitfield CSU_CSL1_NUR_S1.
#define BF_CSU_CSL1_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_NUR_S1) & BM_CSU_CSL1_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL1_NUR_S1(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_NUR_S1) | BF_CSU_CSL1_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL1_NSR_S1      (19)      //!< Bit position for CSU_CSL1_NSR_S1.
#define BM_CSU_CSL1_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL1_NSR_S1.

//! @brief Get value of CSU_CSL1_NSR_S1 from a register value.
#define BG_CSU_CSL1_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_NSR_S1) >> BP_CSU_CSL1_NSR_S1)

//! @brief Format value for bitfield CSU_CSL1_NSR_S1.
#define BF_CSU_CSL1_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_NSR_S1) & BM_CSU_CSL1_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL1_NSR_S1(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_NSR_S1) | BF_CSU_CSL1_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL1_SUW_S1      (20)      //!< Bit position for CSU_CSL1_SUW_S1.
#define BM_CSU_CSL1_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL1_SUW_S1.

//! @brief Get value of CSU_CSL1_SUW_S1 from a register value.
#define BG_CSU_CSL1_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_SUW_S1) >> BP_CSU_CSL1_SUW_S1)

//! @brief Format value for bitfield CSU_CSL1_SUW_S1.
#define BF_CSU_CSL1_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_SUW_S1) & BM_CSU_CSL1_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL1_SUW_S1(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_SUW_S1) | BF_CSU_CSL1_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL1_SSW_S1      (21)      //!< Bit position for CSU_CSL1_SSW_S1.
#define BM_CSU_CSL1_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL1_SSW_S1.

//! @brief Get value of CSU_CSL1_SSW_S1 from a register value.
#define BG_CSU_CSL1_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_SSW_S1) >> BP_CSU_CSL1_SSW_S1)

//! @brief Format value for bitfield CSU_CSL1_SSW_S1.
#define BF_CSU_CSL1_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_SSW_S1) & BM_CSU_CSL1_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL1_SSW_S1(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_SSW_S1) | BF_CSU_CSL1_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL1_NUW_S1      (22)      //!< Bit position for CSU_CSL1_NUW_S1.
#define BM_CSU_CSL1_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL1_NUW_S1.

//! @brief Get value of CSU_CSL1_NUW_S1 from a register value.
#define BG_CSU_CSL1_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_NUW_S1) >> BP_CSU_CSL1_NUW_S1)

//! @brief Format value for bitfield CSU_CSL1_NUW_S1.
#define BF_CSU_CSL1_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_NUW_S1) & BM_CSU_CSL1_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL1_NUW_S1(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_NUW_S1) | BF_CSU_CSL1_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL1_NSW_S1      (23)      //!< Bit position for CSU_CSL1_NSW_S1.
#define BM_CSU_CSL1_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL1_NSW_S1.

//! @brief Get value of CSU_CSL1_NSW_S1 from a register value.
#define BG_CSU_CSL1_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_NSW_S1) >> BP_CSU_CSL1_NSW_S1)

//! @brief Format value for bitfield CSU_CSL1_NSW_S1.
#define BF_CSU_CSL1_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_NSW_S1) & BM_CSU_CSL1_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL1_NSW_S1(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_NSW_S1) | BF_CSU_CSL1_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL1, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL1_LOCK_S1      (24)      //!< Bit position for CSU_CSL1_LOCK_S1.
#define BM_CSU_CSL1_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL1_LOCK_S1.

//! @brief Get value of CSU_CSL1_LOCK_S1 from a register value.
#define BG_CSU_CSL1_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL1_LOCK_S1) >> BP_CSU_CSL1_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL1_LOCK_S1.
#define BF_CSU_CSL1_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL1_LOCK_S1) & BM_CSU_CSL1_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL1_LOCK_S1(v)   (HW_CSU_CSL1_WR((HW_CSU_CSL1_RD() & ~BM_CSU_CSL1_LOCK_S1) | BF_CSU_CSL1_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL2 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL2 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl2
{
    reg32_t U;
    struct _hw_csu_csl2_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl2_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL2 register
 */
//@{
#define HW_CSU_CSL2_ADDR      (REGS_CSU_BASE + 0x8)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL2           (*(volatile hw_csu_csl2_t *) HW_CSU_CSL2_ADDR)
#define HW_CSU_CSL2_RD()      (HW_CSU_CSL2.U)
#define HW_CSU_CSL2_WR(v)     (HW_CSU_CSL2.U = (v))
#define HW_CSU_CSL2_SET(v)    (HW_CSU_CSL2_WR(HW_CSU_CSL2_RD() |  (v)))
#define HW_CSU_CSL2_CLR(v)    (HW_CSU_CSL2_WR(HW_CSU_CSL2_RD() & ~(v)))
#define HW_CSU_CSL2_TOG(v)    (HW_CSU_CSL2_WR(HW_CSU_CSL2_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL2 bitfields
 */

/*! @name Register CSU_CSL2, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL2_SUR_S2      (0)      //!< Bit position for CSU_CSL2_SUR_S2.
#define BM_CSU_CSL2_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL2_SUR_S2.

//! @brief Get value of CSU_CSL2_SUR_S2 from a register value.
#define BG_CSU_CSL2_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_SUR_S2) >> BP_CSU_CSL2_SUR_S2)

//! @brief Format value for bitfield CSU_CSL2_SUR_S2.
#define BF_CSU_CSL2_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_SUR_S2) & BM_CSU_CSL2_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL2_SUR_S2(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_SUR_S2) | BF_CSU_CSL2_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL2_SSR_S2      (1)      //!< Bit position for CSU_CSL2_SSR_S2.
#define BM_CSU_CSL2_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL2_SSR_S2.

//! @brief Get value of CSU_CSL2_SSR_S2 from a register value.
#define BG_CSU_CSL2_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_SSR_S2) >> BP_CSU_CSL2_SSR_S2)

//! @brief Format value for bitfield CSU_CSL2_SSR_S2.
#define BF_CSU_CSL2_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_SSR_S2) & BM_CSU_CSL2_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL2_SSR_S2(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_SSR_S2) | BF_CSU_CSL2_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL2_NUR_S2      (2)      //!< Bit position for CSU_CSL2_NUR_S2.
#define BM_CSU_CSL2_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL2_NUR_S2.

//! @brief Get value of CSU_CSL2_NUR_S2 from a register value.
#define BG_CSU_CSL2_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_NUR_S2) >> BP_CSU_CSL2_NUR_S2)

//! @brief Format value for bitfield CSU_CSL2_NUR_S2.
#define BF_CSU_CSL2_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_NUR_S2) & BM_CSU_CSL2_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL2_NUR_S2(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_NUR_S2) | BF_CSU_CSL2_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL2_NSR_S2      (3)      //!< Bit position for CSU_CSL2_NSR_S2.
#define BM_CSU_CSL2_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL2_NSR_S2.

//! @brief Get value of CSU_CSL2_NSR_S2 from a register value.
#define BG_CSU_CSL2_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_NSR_S2) >> BP_CSU_CSL2_NSR_S2)

//! @brief Format value for bitfield CSU_CSL2_NSR_S2.
#define BF_CSU_CSL2_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_NSR_S2) & BM_CSU_CSL2_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL2_NSR_S2(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_NSR_S2) | BF_CSU_CSL2_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL2_SUW_S2      (4)      //!< Bit position for CSU_CSL2_SUW_S2.
#define BM_CSU_CSL2_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL2_SUW_S2.

//! @brief Get value of CSU_CSL2_SUW_S2 from a register value.
#define BG_CSU_CSL2_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_SUW_S2) >> BP_CSU_CSL2_SUW_S2)

//! @brief Format value for bitfield CSU_CSL2_SUW_S2.
#define BF_CSU_CSL2_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_SUW_S2) & BM_CSU_CSL2_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL2_SUW_S2(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_SUW_S2) | BF_CSU_CSL2_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL2_SSW_S2      (5)      //!< Bit position for CSU_CSL2_SSW_S2.
#define BM_CSU_CSL2_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL2_SSW_S2.

//! @brief Get value of CSU_CSL2_SSW_S2 from a register value.
#define BG_CSU_CSL2_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_SSW_S2) >> BP_CSU_CSL2_SSW_S2)

//! @brief Format value for bitfield CSU_CSL2_SSW_S2.
#define BF_CSU_CSL2_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_SSW_S2) & BM_CSU_CSL2_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL2_SSW_S2(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_SSW_S2) | BF_CSU_CSL2_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL2_NUW_S2      (6)      //!< Bit position for CSU_CSL2_NUW_S2.
#define BM_CSU_CSL2_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL2_NUW_S2.

//! @brief Get value of CSU_CSL2_NUW_S2 from a register value.
#define BG_CSU_CSL2_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_NUW_S2) >> BP_CSU_CSL2_NUW_S2)

//! @brief Format value for bitfield CSU_CSL2_NUW_S2.
#define BF_CSU_CSL2_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_NUW_S2) & BM_CSU_CSL2_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL2_NUW_S2(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_NUW_S2) | BF_CSU_CSL2_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL2_NSW_S2      (7)      //!< Bit position for CSU_CSL2_NSW_S2.
#define BM_CSU_CSL2_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL2_NSW_S2.

//! @brief Get value of CSU_CSL2_NSW_S2 from a register value.
#define BG_CSU_CSL2_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_NSW_S2) >> BP_CSU_CSL2_NSW_S2)

//! @brief Format value for bitfield CSU_CSL2_NSW_S2.
#define BF_CSU_CSL2_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_NSW_S2) & BM_CSU_CSL2_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL2_NSW_S2(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_NSW_S2) | BF_CSU_CSL2_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL2_LOCK_S2      (8)      //!< Bit position for CSU_CSL2_LOCK_S2.
#define BM_CSU_CSL2_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL2_LOCK_S2.

//! @brief Get value of CSU_CSL2_LOCK_S2 from a register value.
#define BG_CSU_CSL2_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_LOCK_S2) >> BP_CSU_CSL2_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL2_LOCK_S2.
#define BF_CSU_CSL2_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_LOCK_S2) & BM_CSU_CSL2_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL2_LOCK_S2(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_LOCK_S2) | BF_CSU_CSL2_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL2_SUR_S1      (16)      //!< Bit position for CSU_CSL2_SUR_S1.
#define BM_CSU_CSL2_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL2_SUR_S1.

//! @brief Get value of CSU_CSL2_SUR_S1 from a register value.
#define BG_CSU_CSL2_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_SUR_S1) >> BP_CSU_CSL2_SUR_S1)

//! @brief Format value for bitfield CSU_CSL2_SUR_S1.
#define BF_CSU_CSL2_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_SUR_S1) & BM_CSU_CSL2_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL2_SUR_S1(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_SUR_S1) | BF_CSU_CSL2_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL2_SSR_S1      (17)      //!< Bit position for CSU_CSL2_SSR_S1.
#define BM_CSU_CSL2_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL2_SSR_S1.

//! @brief Get value of CSU_CSL2_SSR_S1 from a register value.
#define BG_CSU_CSL2_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_SSR_S1) >> BP_CSU_CSL2_SSR_S1)

//! @brief Format value for bitfield CSU_CSL2_SSR_S1.
#define BF_CSU_CSL2_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_SSR_S1) & BM_CSU_CSL2_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL2_SSR_S1(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_SSR_S1) | BF_CSU_CSL2_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL2_NUR_S1      (18)      //!< Bit position for CSU_CSL2_NUR_S1.
#define BM_CSU_CSL2_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL2_NUR_S1.

//! @brief Get value of CSU_CSL2_NUR_S1 from a register value.
#define BG_CSU_CSL2_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_NUR_S1) >> BP_CSU_CSL2_NUR_S1)

//! @brief Format value for bitfield CSU_CSL2_NUR_S1.
#define BF_CSU_CSL2_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_NUR_S1) & BM_CSU_CSL2_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL2_NUR_S1(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_NUR_S1) | BF_CSU_CSL2_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL2_NSR_S1      (19)      //!< Bit position for CSU_CSL2_NSR_S1.
#define BM_CSU_CSL2_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL2_NSR_S1.

//! @brief Get value of CSU_CSL2_NSR_S1 from a register value.
#define BG_CSU_CSL2_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_NSR_S1) >> BP_CSU_CSL2_NSR_S1)

//! @brief Format value for bitfield CSU_CSL2_NSR_S1.
#define BF_CSU_CSL2_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_NSR_S1) & BM_CSU_CSL2_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL2_NSR_S1(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_NSR_S1) | BF_CSU_CSL2_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL2_SUW_S1      (20)      //!< Bit position for CSU_CSL2_SUW_S1.
#define BM_CSU_CSL2_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL2_SUW_S1.

//! @brief Get value of CSU_CSL2_SUW_S1 from a register value.
#define BG_CSU_CSL2_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_SUW_S1) >> BP_CSU_CSL2_SUW_S1)

//! @brief Format value for bitfield CSU_CSL2_SUW_S1.
#define BF_CSU_CSL2_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_SUW_S1) & BM_CSU_CSL2_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL2_SUW_S1(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_SUW_S1) | BF_CSU_CSL2_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL2_SSW_S1      (21)      //!< Bit position for CSU_CSL2_SSW_S1.
#define BM_CSU_CSL2_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL2_SSW_S1.

//! @brief Get value of CSU_CSL2_SSW_S1 from a register value.
#define BG_CSU_CSL2_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_SSW_S1) >> BP_CSU_CSL2_SSW_S1)

//! @brief Format value for bitfield CSU_CSL2_SSW_S1.
#define BF_CSU_CSL2_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_SSW_S1) & BM_CSU_CSL2_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL2_SSW_S1(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_SSW_S1) | BF_CSU_CSL2_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL2_NUW_S1      (22)      //!< Bit position for CSU_CSL2_NUW_S1.
#define BM_CSU_CSL2_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL2_NUW_S1.

//! @brief Get value of CSU_CSL2_NUW_S1 from a register value.
#define BG_CSU_CSL2_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_NUW_S1) >> BP_CSU_CSL2_NUW_S1)

//! @brief Format value for bitfield CSU_CSL2_NUW_S1.
#define BF_CSU_CSL2_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_NUW_S1) & BM_CSU_CSL2_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL2_NUW_S1(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_NUW_S1) | BF_CSU_CSL2_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL2_NSW_S1      (23)      //!< Bit position for CSU_CSL2_NSW_S1.
#define BM_CSU_CSL2_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL2_NSW_S1.

//! @brief Get value of CSU_CSL2_NSW_S1 from a register value.
#define BG_CSU_CSL2_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_NSW_S1) >> BP_CSU_CSL2_NSW_S1)

//! @brief Format value for bitfield CSU_CSL2_NSW_S1.
#define BF_CSU_CSL2_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_NSW_S1) & BM_CSU_CSL2_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL2_NSW_S1(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_NSW_S1) | BF_CSU_CSL2_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL2, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL2_LOCK_S1      (24)      //!< Bit position for CSU_CSL2_LOCK_S1.
#define BM_CSU_CSL2_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL2_LOCK_S1.

//! @brief Get value of CSU_CSL2_LOCK_S1 from a register value.
#define BG_CSU_CSL2_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL2_LOCK_S1) >> BP_CSU_CSL2_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL2_LOCK_S1.
#define BF_CSU_CSL2_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL2_LOCK_S1) & BM_CSU_CSL2_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL2_LOCK_S1(v)   (HW_CSU_CSL2_WR((HW_CSU_CSL2_RD() & ~BM_CSU_CSL2_LOCK_S1) | BF_CSU_CSL2_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL3 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL3 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl3
{
    reg32_t U;
    struct _hw_csu_csl3_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl3_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL3 register
 */
//@{
#define HW_CSU_CSL3_ADDR      (REGS_CSU_BASE + 0xc)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL3           (*(volatile hw_csu_csl3_t *) HW_CSU_CSL3_ADDR)
#define HW_CSU_CSL3_RD()      (HW_CSU_CSL3.U)
#define HW_CSU_CSL3_WR(v)     (HW_CSU_CSL3.U = (v))
#define HW_CSU_CSL3_SET(v)    (HW_CSU_CSL3_WR(HW_CSU_CSL3_RD() |  (v)))
#define HW_CSU_CSL3_CLR(v)    (HW_CSU_CSL3_WR(HW_CSU_CSL3_RD() & ~(v)))
#define HW_CSU_CSL3_TOG(v)    (HW_CSU_CSL3_WR(HW_CSU_CSL3_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL3 bitfields
 */

/*! @name Register CSU_CSL3, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL3_SUR_S2      (0)      //!< Bit position for CSU_CSL3_SUR_S2.
#define BM_CSU_CSL3_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL3_SUR_S2.

//! @brief Get value of CSU_CSL3_SUR_S2 from a register value.
#define BG_CSU_CSL3_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_SUR_S2) >> BP_CSU_CSL3_SUR_S2)

//! @brief Format value for bitfield CSU_CSL3_SUR_S2.
#define BF_CSU_CSL3_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_SUR_S2) & BM_CSU_CSL3_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL3_SUR_S2(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_SUR_S2) | BF_CSU_CSL3_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL3_SSR_S2      (1)      //!< Bit position for CSU_CSL3_SSR_S2.
#define BM_CSU_CSL3_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL3_SSR_S2.

//! @brief Get value of CSU_CSL3_SSR_S2 from a register value.
#define BG_CSU_CSL3_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_SSR_S2) >> BP_CSU_CSL3_SSR_S2)

//! @brief Format value for bitfield CSU_CSL3_SSR_S2.
#define BF_CSU_CSL3_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_SSR_S2) & BM_CSU_CSL3_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL3_SSR_S2(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_SSR_S2) | BF_CSU_CSL3_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL3_NUR_S2      (2)      //!< Bit position for CSU_CSL3_NUR_S2.
#define BM_CSU_CSL3_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL3_NUR_S2.

//! @brief Get value of CSU_CSL3_NUR_S2 from a register value.
#define BG_CSU_CSL3_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_NUR_S2) >> BP_CSU_CSL3_NUR_S2)

//! @brief Format value for bitfield CSU_CSL3_NUR_S2.
#define BF_CSU_CSL3_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_NUR_S2) & BM_CSU_CSL3_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL3_NUR_S2(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_NUR_S2) | BF_CSU_CSL3_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL3_NSR_S2      (3)      //!< Bit position for CSU_CSL3_NSR_S2.
#define BM_CSU_CSL3_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL3_NSR_S2.

//! @brief Get value of CSU_CSL3_NSR_S2 from a register value.
#define BG_CSU_CSL3_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_NSR_S2) >> BP_CSU_CSL3_NSR_S2)

//! @brief Format value for bitfield CSU_CSL3_NSR_S2.
#define BF_CSU_CSL3_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_NSR_S2) & BM_CSU_CSL3_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL3_NSR_S2(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_NSR_S2) | BF_CSU_CSL3_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL3_SUW_S2      (4)      //!< Bit position for CSU_CSL3_SUW_S2.
#define BM_CSU_CSL3_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL3_SUW_S2.

//! @brief Get value of CSU_CSL3_SUW_S2 from a register value.
#define BG_CSU_CSL3_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_SUW_S2) >> BP_CSU_CSL3_SUW_S2)

//! @brief Format value for bitfield CSU_CSL3_SUW_S2.
#define BF_CSU_CSL3_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_SUW_S2) & BM_CSU_CSL3_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL3_SUW_S2(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_SUW_S2) | BF_CSU_CSL3_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL3_SSW_S2      (5)      //!< Bit position for CSU_CSL3_SSW_S2.
#define BM_CSU_CSL3_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL3_SSW_S2.

//! @brief Get value of CSU_CSL3_SSW_S2 from a register value.
#define BG_CSU_CSL3_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_SSW_S2) >> BP_CSU_CSL3_SSW_S2)

//! @brief Format value for bitfield CSU_CSL3_SSW_S2.
#define BF_CSU_CSL3_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_SSW_S2) & BM_CSU_CSL3_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL3_SSW_S2(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_SSW_S2) | BF_CSU_CSL3_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL3_NUW_S2      (6)      //!< Bit position for CSU_CSL3_NUW_S2.
#define BM_CSU_CSL3_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL3_NUW_S2.

//! @brief Get value of CSU_CSL3_NUW_S2 from a register value.
#define BG_CSU_CSL3_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_NUW_S2) >> BP_CSU_CSL3_NUW_S2)

//! @brief Format value for bitfield CSU_CSL3_NUW_S2.
#define BF_CSU_CSL3_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_NUW_S2) & BM_CSU_CSL3_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL3_NUW_S2(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_NUW_S2) | BF_CSU_CSL3_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL3_NSW_S2      (7)      //!< Bit position for CSU_CSL3_NSW_S2.
#define BM_CSU_CSL3_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL3_NSW_S2.

//! @brief Get value of CSU_CSL3_NSW_S2 from a register value.
#define BG_CSU_CSL3_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_NSW_S2) >> BP_CSU_CSL3_NSW_S2)

//! @brief Format value for bitfield CSU_CSL3_NSW_S2.
#define BF_CSU_CSL3_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_NSW_S2) & BM_CSU_CSL3_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL3_NSW_S2(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_NSW_S2) | BF_CSU_CSL3_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL3_LOCK_S2      (8)      //!< Bit position for CSU_CSL3_LOCK_S2.
#define BM_CSU_CSL3_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL3_LOCK_S2.

//! @brief Get value of CSU_CSL3_LOCK_S2 from a register value.
#define BG_CSU_CSL3_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_LOCK_S2) >> BP_CSU_CSL3_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL3_LOCK_S2.
#define BF_CSU_CSL3_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_LOCK_S2) & BM_CSU_CSL3_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL3_LOCK_S2(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_LOCK_S2) | BF_CSU_CSL3_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL3_SUR_S1      (16)      //!< Bit position for CSU_CSL3_SUR_S1.
#define BM_CSU_CSL3_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL3_SUR_S1.

//! @brief Get value of CSU_CSL3_SUR_S1 from a register value.
#define BG_CSU_CSL3_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_SUR_S1) >> BP_CSU_CSL3_SUR_S1)

//! @brief Format value for bitfield CSU_CSL3_SUR_S1.
#define BF_CSU_CSL3_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_SUR_S1) & BM_CSU_CSL3_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL3_SUR_S1(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_SUR_S1) | BF_CSU_CSL3_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL3_SSR_S1      (17)      //!< Bit position for CSU_CSL3_SSR_S1.
#define BM_CSU_CSL3_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL3_SSR_S1.

//! @brief Get value of CSU_CSL3_SSR_S1 from a register value.
#define BG_CSU_CSL3_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_SSR_S1) >> BP_CSU_CSL3_SSR_S1)

//! @brief Format value for bitfield CSU_CSL3_SSR_S1.
#define BF_CSU_CSL3_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_SSR_S1) & BM_CSU_CSL3_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL3_SSR_S1(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_SSR_S1) | BF_CSU_CSL3_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL3_NUR_S1      (18)      //!< Bit position for CSU_CSL3_NUR_S1.
#define BM_CSU_CSL3_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL3_NUR_S1.

//! @brief Get value of CSU_CSL3_NUR_S1 from a register value.
#define BG_CSU_CSL3_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_NUR_S1) >> BP_CSU_CSL3_NUR_S1)

//! @brief Format value for bitfield CSU_CSL3_NUR_S1.
#define BF_CSU_CSL3_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_NUR_S1) & BM_CSU_CSL3_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL3_NUR_S1(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_NUR_S1) | BF_CSU_CSL3_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL3_NSR_S1      (19)      //!< Bit position for CSU_CSL3_NSR_S1.
#define BM_CSU_CSL3_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL3_NSR_S1.

//! @brief Get value of CSU_CSL3_NSR_S1 from a register value.
#define BG_CSU_CSL3_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_NSR_S1) >> BP_CSU_CSL3_NSR_S1)

//! @brief Format value for bitfield CSU_CSL3_NSR_S1.
#define BF_CSU_CSL3_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_NSR_S1) & BM_CSU_CSL3_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL3_NSR_S1(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_NSR_S1) | BF_CSU_CSL3_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL3_SUW_S1      (20)      //!< Bit position for CSU_CSL3_SUW_S1.
#define BM_CSU_CSL3_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL3_SUW_S1.

//! @brief Get value of CSU_CSL3_SUW_S1 from a register value.
#define BG_CSU_CSL3_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_SUW_S1) >> BP_CSU_CSL3_SUW_S1)

//! @brief Format value for bitfield CSU_CSL3_SUW_S1.
#define BF_CSU_CSL3_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_SUW_S1) & BM_CSU_CSL3_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL3_SUW_S1(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_SUW_S1) | BF_CSU_CSL3_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL3_SSW_S1      (21)      //!< Bit position for CSU_CSL3_SSW_S1.
#define BM_CSU_CSL3_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL3_SSW_S1.

//! @brief Get value of CSU_CSL3_SSW_S1 from a register value.
#define BG_CSU_CSL3_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_SSW_S1) >> BP_CSU_CSL3_SSW_S1)

//! @brief Format value for bitfield CSU_CSL3_SSW_S1.
#define BF_CSU_CSL3_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_SSW_S1) & BM_CSU_CSL3_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL3_SSW_S1(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_SSW_S1) | BF_CSU_CSL3_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL3_NUW_S1      (22)      //!< Bit position for CSU_CSL3_NUW_S1.
#define BM_CSU_CSL3_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL3_NUW_S1.

//! @brief Get value of CSU_CSL3_NUW_S1 from a register value.
#define BG_CSU_CSL3_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_NUW_S1) >> BP_CSU_CSL3_NUW_S1)

//! @brief Format value for bitfield CSU_CSL3_NUW_S1.
#define BF_CSU_CSL3_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_NUW_S1) & BM_CSU_CSL3_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL3_NUW_S1(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_NUW_S1) | BF_CSU_CSL3_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL3_NSW_S1      (23)      //!< Bit position for CSU_CSL3_NSW_S1.
#define BM_CSU_CSL3_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL3_NSW_S1.

//! @brief Get value of CSU_CSL3_NSW_S1 from a register value.
#define BG_CSU_CSL3_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_NSW_S1) >> BP_CSU_CSL3_NSW_S1)

//! @brief Format value for bitfield CSU_CSL3_NSW_S1.
#define BF_CSU_CSL3_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_NSW_S1) & BM_CSU_CSL3_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL3_NSW_S1(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_NSW_S1) | BF_CSU_CSL3_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL3, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL3_LOCK_S1      (24)      //!< Bit position for CSU_CSL3_LOCK_S1.
#define BM_CSU_CSL3_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL3_LOCK_S1.

//! @brief Get value of CSU_CSL3_LOCK_S1 from a register value.
#define BG_CSU_CSL3_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL3_LOCK_S1) >> BP_CSU_CSL3_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL3_LOCK_S1.
#define BF_CSU_CSL3_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL3_LOCK_S1) & BM_CSU_CSL3_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL3_LOCK_S1(v)   (HW_CSU_CSL3_WR((HW_CSU_CSL3_RD() & ~BM_CSU_CSL3_LOCK_S1) | BF_CSU_CSL3_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL4 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL4 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl4
{
    reg32_t U;
    struct _hw_csu_csl4_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl4_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL4 register
 */
//@{
#define HW_CSU_CSL4_ADDR      (REGS_CSU_BASE + 0x10)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL4           (*(volatile hw_csu_csl4_t *) HW_CSU_CSL4_ADDR)
#define HW_CSU_CSL4_RD()      (HW_CSU_CSL4.U)
#define HW_CSU_CSL4_WR(v)     (HW_CSU_CSL4.U = (v))
#define HW_CSU_CSL4_SET(v)    (HW_CSU_CSL4_WR(HW_CSU_CSL4_RD() |  (v)))
#define HW_CSU_CSL4_CLR(v)    (HW_CSU_CSL4_WR(HW_CSU_CSL4_RD() & ~(v)))
#define HW_CSU_CSL4_TOG(v)    (HW_CSU_CSL4_WR(HW_CSU_CSL4_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL4 bitfields
 */

/*! @name Register CSU_CSL4, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL4_SUR_S2      (0)      //!< Bit position for CSU_CSL4_SUR_S2.
#define BM_CSU_CSL4_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL4_SUR_S2.

//! @brief Get value of CSU_CSL4_SUR_S2 from a register value.
#define BG_CSU_CSL4_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_SUR_S2) >> BP_CSU_CSL4_SUR_S2)

//! @brief Format value for bitfield CSU_CSL4_SUR_S2.
#define BF_CSU_CSL4_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_SUR_S2) & BM_CSU_CSL4_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL4_SUR_S2(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_SUR_S2) | BF_CSU_CSL4_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL4_SSR_S2      (1)      //!< Bit position for CSU_CSL4_SSR_S2.
#define BM_CSU_CSL4_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL4_SSR_S2.

//! @brief Get value of CSU_CSL4_SSR_S2 from a register value.
#define BG_CSU_CSL4_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_SSR_S2) >> BP_CSU_CSL4_SSR_S2)

//! @brief Format value for bitfield CSU_CSL4_SSR_S2.
#define BF_CSU_CSL4_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_SSR_S2) & BM_CSU_CSL4_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL4_SSR_S2(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_SSR_S2) | BF_CSU_CSL4_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL4_NUR_S2      (2)      //!< Bit position for CSU_CSL4_NUR_S2.
#define BM_CSU_CSL4_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL4_NUR_S2.

//! @brief Get value of CSU_CSL4_NUR_S2 from a register value.
#define BG_CSU_CSL4_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_NUR_S2) >> BP_CSU_CSL4_NUR_S2)

//! @brief Format value for bitfield CSU_CSL4_NUR_S2.
#define BF_CSU_CSL4_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_NUR_S2) & BM_CSU_CSL4_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL4_NUR_S2(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_NUR_S2) | BF_CSU_CSL4_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL4_NSR_S2      (3)      //!< Bit position for CSU_CSL4_NSR_S2.
#define BM_CSU_CSL4_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL4_NSR_S2.

//! @brief Get value of CSU_CSL4_NSR_S2 from a register value.
#define BG_CSU_CSL4_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_NSR_S2) >> BP_CSU_CSL4_NSR_S2)

//! @brief Format value for bitfield CSU_CSL4_NSR_S2.
#define BF_CSU_CSL4_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_NSR_S2) & BM_CSU_CSL4_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL4_NSR_S2(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_NSR_S2) | BF_CSU_CSL4_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL4_SUW_S2      (4)      //!< Bit position for CSU_CSL4_SUW_S2.
#define BM_CSU_CSL4_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL4_SUW_S2.

//! @brief Get value of CSU_CSL4_SUW_S2 from a register value.
#define BG_CSU_CSL4_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_SUW_S2) >> BP_CSU_CSL4_SUW_S2)

//! @brief Format value for bitfield CSU_CSL4_SUW_S2.
#define BF_CSU_CSL4_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_SUW_S2) & BM_CSU_CSL4_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL4_SUW_S2(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_SUW_S2) | BF_CSU_CSL4_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL4_SSW_S2      (5)      //!< Bit position for CSU_CSL4_SSW_S2.
#define BM_CSU_CSL4_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL4_SSW_S2.

//! @brief Get value of CSU_CSL4_SSW_S2 from a register value.
#define BG_CSU_CSL4_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_SSW_S2) >> BP_CSU_CSL4_SSW_S2)

//! @brief Format value for bitfield CSU_CSL4_SSW_S2.
#define BF_CSU_CSL4_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_SSW_S2) & BM_CSU_CSL4_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL4_SSW_S2(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_SSW_S2) | BF_CSU_CSL4_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL4_NUW_S2      (6)      //!< Bit position for CSU_CSL4_NUW_S2.
#define BM_CSU_CSL4_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL4_NUW_S2.

//! @brief Get value of CSU_CSL4_NUW_S2 from a register value.
#define BG_CSU_CSL4_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_NUW_S2) >> BP_CSU_CSL4_NUW_S2)

//! @brief Format value for bitfield CSU_CSL4_NUW_S2.
#define BF_CSU_CSL4_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_NUW_S2) & BM_CSU_CSL4_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL4_NUW_S2(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_NUW_S2) | BF_CSU_CSL4_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL4_NSW_S2      (7)      //!< Bit position for CSU_CSL4_NSW_S2.
#define BM_CSU_CSL4_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL4_NSW_S2.

//! @brief Get value of CSU_CSL4_NSW_S2 from a register value.
#define BG_CSU_CSL4_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_NSW_S2) >> BP_CSU_CSL4_NSW_S2)

//! @brief Format value for bitfield CSU_CSL4_NSW_S2.
#define BF_CSU_CSL4_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_NSW_S2) & BM_CSU_CSL4_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL4_NSW_S2(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_NSW_S2) | BF_CSU_CSL4_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL4_LOCK_S2      (8)      //!< Bit position for CSU_CSL4_LOCK_S2.
#define BM_CSU_CSL4_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL4_LOCK_S2.

//! @brief Get value of CSU_CSL4_LOCK_S2 from a register value.
#define BG_CSU_CSL4_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_LOCK_S2) >> BP_CSU_CSL4_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL4_LOCK_S2.
#define BF_CSU_CSL4_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_LOCK_S2) & BM_CSU_CSL4_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL4_LOCK_S2(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_LOCK_S2) | BF_CSU_CSL4_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL4_SUR_S1      (16)      //!< Bit position for CSU_CSL4_SUR_S1.
#define BM_CSU_CSL4_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL4_SUR_S1.

//! @brief Get value of CSU_CSL4_SUR_S1 from a register value.
#define BG_CSU_CSL4_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_SUR_S1) >> BP_CSU_CSL4_SUR_S1)

//! @brief Format value for bitfield CSU_CSL4_SUR_S1.
#define BF_CSU_CSL4_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_SUR_S1) & BM_CSU_CSL4_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL4_SUR_S1(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_SUR_S1) | BF_CSU_CSL4_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL4_SSR_S1      (17)      //!< Bit position for CSU_CSL4_SSR_S1.
#define BM_CSU_CSL4_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL4_SSR_S1.

//! @brief Get value of CSU_CSL4_SSR_S1 from a register value.
#define BG_CSU_CSL4_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_SSR_S1) >> BP_CSU_CSL4_SSR_S1)

//! @brief Format value for bitfield CSU_CSL4_SSR_S1.
#define BF_CSU_CSL4_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_SSR_S1) & BM_CSU_CSL4_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL4_SSR_S1(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_SSR_S1) | BF_CSU_CSL4_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL4_NUR_S1      (18)      //!< Bit position for CSU_CSL4_NUR_S1.
#define BM_CSU_CSL4_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL4_NUR_S1.

//! @brief Get value of CSU_CSL4_NUR_S1 from a register value.
#define BG_CSU_CSL4_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_NUR_S1) >> BP_CSU_CSL4_NUR_S1)

//! @brief Format value for bitfield CSU_CSL4_NUR_S1.
#define BF_CSU_CSL4_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_NUR_S1) & BM_CSU_CSL4_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL4_NUR_S1(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_NUR_S1) | BF_CSU_CSL4_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL4_NSR_S1      (19)      //!< Bit position for CSU_CSL4_NSR_S1.
#define BM_CSU_CSL4_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL4_NSR_S1.

//! @brief Get value of CSU_CSL4_NSR_S1 from a register value.
#define BG_CSU_CSL4_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_NSR_S1) >> BP_CSU_CSL4_NSR_S1)

//! @brief Format value for bitfield CSU_CSL4_NSR_S1.
#define BF_CSU_CSL4_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_NSR_S1) & BM_CSU_CSL4_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL4_NSR_S1(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_NSR_S1) | BF_CSU_CSL4_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL4_SUW_S1      (20)      //!< Bit position for CSU_CSL4_SUW_S1.
#define BM_CSU_CSL4_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL4_SUW_S1.

//! @brief Get value of CSU_CSL4_SUW_S1 from a register value.
#define BG_CSU_CSL4_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_SUW_S1) >> BP_CSU_CSL4_SUW_S1)

//! @brief Format value for bitfield CSU_CSL4_SUW_S1.
#define BF_CSU_CSL4_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_SUW_S1) & BM_CSU_CSL4_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL4_SUW_S1(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_SUW_S1) | BF_CSU_CSL4_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL4_SSW_S1      (21)      //!< Bit position for CSU_CSL4_SSW_S1.
#define BM_CSU_CSL4_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL4_SSW_S1.

//! @brief Get value of CSU_CSL4_SSW_S1 from a register value.
#define BG_CSU_CSL4_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_SSW_S1) >> BP_CSU_CSL4_SSW_S1)

//! @brief Format value for bitfield CSU_CSL4_SSW_S1.
#define BF_CSU_CSL4_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_SSW_S1) & BM_CSU_CSL4_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL4_SSW_S1(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_SSW_S1) | BF_CSU_CSL4_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL4_NUW_S1      (22)      //!< Bit position for CSU_CSL4_NUW_S1.
#define BM_CSU_CSL4_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL4_NUW_S1.

//! @brief Get value of CSU_CSL4_NUW_S1 from a register value.
#define BG_CSU_CSL4_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_NUW_S1) >> BP_CSU_CSL4_NUW_S1)

//! @brief Format value for bitfield CSU_CSL4_NUW_S1.
#define BF_CSU_CSL4_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_NUW_S1) & BM_CSU_CSL4_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL4_NUW_S1(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_NUW_S1) | BF_CSU_CSL4_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL4_NSW_S1      (23)      //!< Bit position for CSU_CSL4_NSW_S1.
#define BM_CSU_CSL4_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL4_NSW_S1.

//! @brief Get value of CSU_CSL4_NSW_S1 from a register value.
#define BG_CSU_CSL4_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_NSW_S1) >> BP_CSU_CSL4_NSW_S1)

//! @brief Format value for bitfield CSU_CSL4_NSW_S1.
#define BF_CSU_CSL4_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_NSW_S1) & BM_CSU_CSL4_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL4_NSW_S1(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_NSW_S1) | BF_CSU_CSL4_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL4, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL4_LOCK_S1      (24)      //!< Bit position for CSU_CSL4_LOCK_S1.
#define BM_CSU_CSL4_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL4_LOCK_S1.

//! @brief Get value of CSU_CSL4_LOCK_S1 from a register value.
#define BG_CSU_CSL4_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL4_LOCK_S1) >> BP_CSU_CSL4_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL4_LOCK_S1.
#define BF_CSU_CSL4_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL4_LOCK_S1) & BM_CSU_CSL4_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL4_LOCK_S1(v)   (HW_CSU_CSL4_WR((HW_CSU_CSL4_RD() & ~BM_CSU_CSL4_LOCK_S1) | BF_CSU_CSL4_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL5 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL5 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl5
{
    reg32_t U;
    struct _hw_csu_csl5_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl5_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL5 register
 */
//@{
#define HW_CSU_CSL5_ADDR      (REGS_CSU_BASE + 0x14)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL5           (*(volatile hw_csu_csl5_t *) HW_CSU_CSL5_ADDR)
#define HW_CSU_CSL5_RD()      (HW_CSU_CSL5.U)
#define HW_CSU_CSL5_WR(v)     (HW_CSU_CSL5.U = (v))
#define HW_CSU_CSL5_SET(v)    (HW_CSU_CSL5_WR(HW_CSU_CSL5_RD() |  (v)))
#define HW_CSU_CSL5_CLR(v)    (HW_CSU_CSL5_WR(HW_CSU_CSL5_RD() & ~(v)))
#define HW_CSU_CSL5_TOG(v)    (HW_CSU_CSL5_WR(HW_CSU_CSL5_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL5 bitfields
 */

/*! @name Register CSU_CSL5, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL5_SUR_S2      (0)      //!< Bit position for CSU_CSL5_SUR_S2.
#define BM_CSU_CSL5_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL5_SUR_S2.

//! @brief Get value of CSU_CSL5_SUR_S2 from a register value.
#define BG_CSU_CSL5_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_SUR_S2) >> BP_CSU_CSL5_SUR_S2)

//! @brief Format value for bitfield CSU_CSL5_SUR_S2.
#define BF_CSU_CSL5_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_SUR_S2) & BM_CSU_CSL5_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL5_SUR_S2(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_SUR_S2) | BF_CSU_CSL5_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL5_SSR_S2      (1)      //!< Bit position for CSU_CSL5_SSR_S2.
#define BM_CSU_CSL5_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL5_SSR_S2.

//! @brief Get value of CSU_CSL5_SSR_S2 from a register value.
#define BG_CSU_CSL5_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_SSR_S2) >> BP_CSU_CSL5_SSR_S2)

//! @brief Format value for bitfield CSU_CSL5_SSR_S2.
#define BF_CSU_CSL5_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_SSR_S2) & BM_CSU_CSL5_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL5_SSR_S2(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_SSR_S2) | BF_CSU_CSL5_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL5_NUR_S2      (2)      //!< Bit position for CSU_CSL5_NUR_S2.
#define BM_CSU_CSL5_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL5_NUR_S2.

//! @brief Get value of CSU_CSL5_NUR_S2 from a register value.
#define BG_CSU_CSL5_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_NUR_S2) >> BP_CSU_CSL5_NUR_S2)

//! @brief Format value for bitfield CSU_CSL5_NUR_S2.
#define BF_CSU_CSL5_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_NUR_S2) & BM_CSU_CSL5_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL5_NUR_S2(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_NUR_S2) | BF_CSU_CSL5_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL5_NSR_S2      (3)      //!< Bit position for CSU_CSL5_NSR_S2.
#define BM_CSU_CSL5_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL5_NSR_S2.

//! @brief Get value of CSU_CSL5_NSR_S2 from a register value.
#define BG_CSU_CSL5_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_NSR_S2) >> BP_CSU_CSL5_NSR_S2)

//! @brief Format value for bitfield CSU_CSL5_NSR_S2.
#define BF_CSU_CSL5_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_NSR_S2) & BM_CSU_CSL5_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL5_NSR_S2(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_NSR_S2) | BF_CSU_CSL5_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL5_SUW_S2      (4)      //!< Bit position for CSU_CSL5_SUW_S2.
#define BM_CSU_CSL5_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL5_SUW_S2.

//! @brief Get value of CSU_CSL5_SUW_S2 from a register value.
#define BG_CSU_CSL5_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_SUW_S2) >> BP_CSU_CSL5_SUW_S2)

//! @brief Format value for bitfield CSU_CSL5_SUW_S2.
#define BF_CSU_CSL5_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_SUW_S2) & BM_CSU_CSL5_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL5_SUW_S2(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_SUW_S2) | BF_CSU_CSL5_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL5_SSW_S2      (5)      //!< Bit position for CSU_CSL5_SSW_S2.
#define BM_CSU_CSL5_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL5_SSW_S2.

//! @brief Get value of CSU_CSL5_SSW_S2 from a register value.
#define BG_CSU_CSL5_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_SSW_S2) >> BP_CSU_CSL5_SSW_S2)

//! @brief Format value for bitfield CSU_CSL5_SSW_S2.
#define BF_CSU_CSL5_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_SSW_S2) & BM_CSU_CSL5_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL5_SSW_S2(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_SSW_S2) | BF_CSU_CSL5_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL5_NUW_S2      (6)      //!< Bit position for CSU_CSL5_NUW_S2.
#define BM_CSU_CSL5_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL5_NUW_S2.

//! @brief Get value of CSU_CSL5_NUW_S2 from a register value.
#define BG_CSU_CSL5_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_NUW_S2) >> BP_CSU_CSL5_NUW_S2)

//! @brief Format value for bitfield CSU_CSL5_NUW_S2.
#define BF_CSU_CSL5_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_NUW_S2) & BM_CSU_CSL5_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL5_NUW_S2(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_NUW_S2) | BF_CSU_CSL5_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL5_NSW_S2      (7)      //!< Bit position for CSU_CSL5_NSW_S2.
#define BM_CSU_CSL5_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL5_NSW_S2.

//! @brief Get value of CSU_CSL5_NSW_S2 from a register value.
#define BG_CSU_CSL5_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_NSW_S2) >> BP_CSU_CSL5_NSW_S2)

//! @brief Format value for bitfield CSU_CSL5_NSW_S2.
#define BF_CSU_CSL5_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_NSW_S2) & BM_CSU_CSL5_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL5_NSW_S2(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_NSW_S2) | BF_CSU_CSL5_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL5_LOCK_S2      (8)      //!< Bit position for CSU_CSL5_LOCK_S2.
#define BM_CSU_CSL5_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL5_LOCK_S2.

//! @brief Get value of CSU_CSL5_LOCK_S2 from a register value.
#define BG_CSU_CSL5_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_LOCK_S2) >> BP_CSU_CSL5_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL5_LOCK_S2.
#define BF_CSU_CSL5_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_LOCK_S2) & BM_CSU_CSL5_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL5_LOCK_S2(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_LOCK_S2) | BF_CSU_CSL5_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL5_SUR_S1      (16)      //!< Bit position for CSU_CSL5_SUR_S1.
#define BM_CSU_CSL5_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL5_SUR_S1.

//! @brief Get value of CSU_CSL5_SUR_S1 from a register value.
#define BG_CSU_CSL5_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_SUR_S1) >> BP_CSU_CSL5_SUR_S1)

//! @brief Format value for bitfield CSU_CSL5_SUR_S1.
#define BF_CSU_CSL5_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_SUR_S1) & BM_CSU_CSL5_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL5_SUR_S1(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_SUR_S1) | BF_CSU_CSL5_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL5_SSR_S1      (17)      //!< Bit position for CSU_CSL5_SSR_S1.
#define BM_CSU_CSL5_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL5_SSR_S1.

//! @brief Get value of CSU_CSL5_SSR_S1 from a register value.
#define BG_CSU_CSL5_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_SSR_S1) >> BP_CSU_CSL5_SSR_S1)

//! @brief Format value for bitfield CSU_CSL5_SSR_S1.
#define BF_CSU_CSL5_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_SSR_S1) & BM_CSU_CSL5_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL5_SSR_S1(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_SSR_S1) | BF_CSU_CSL5_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL5_NUR_S1      (18)      //!< Bit position for CSU_CSL5_NUR_S1.
#define BM_CSU_CSL5_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL5_NUR_S1.

//! @brief Get value of CSU_CSL5_NUR_S1 from a register value.
#define BG_CSU_CSL5_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_NUR_S1) >> BP_CSU_CSL5_NUR_S1)

//! @brief Format value for bitfield CSU_CSL5_NUR_S1.
#define BF_CSU_CSL5_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_NUR_S1) & BM_CSU_CSL5_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL5_NUR_S1(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_NUR_S1) | BF_CSU_CSL5_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL5_NSR_S1      (19)      //!< Bit position for CSU_CSL5_NSR_S1.
#define BM_CSU_CSL5_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL5_NSR_S1.

//! @brief Get value of CSU_CSL5_NSR_S1 from a register value.
#define BG_CSU_CSL5_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_NSR_S1) >> BP_CSU_CSL5_NSR_S1)

//! @brief Format value for bitfield CSU_CSL5_NSR_S1.
#define BF_CSU_CSL5_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_NSR_S1) & BM_CSU_CSL5_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL5_NSR_S1(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_NSR_S1) | BF_CSU_CSL5_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL5_SUW_S1      (20)      //!< Bit position for CSU_CSL5_SUW_S1.
#define BM_CSU_CSL5_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL5_SUW_S1.

//! @brief Get value of CSU_CSL5_SUW_S1 from a register value.
#define BG_CSU_CSL5_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_SUW_S1) >> BP_CSU_CSL5_SUW_S1)

//! @brief Format value for bitfield CSU_CSL5_SUW_S1.
#define BF_CSU_CSL5_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_SUW_S1) & BM_CSU_CSL5_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL5_SUW_S1(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_SUW_S1) | BF_CSU_CSL5_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL5_SSW_S1      (21)      //!< Bit position for CSU_CSL5_SSW_S1.
#define BM_CSU_CSL5_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL5_SSW_S1.

//! @brief Get value of CSU_CSL5_SSW_S1 from a register value.
#define BG_CSU_CSL5_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_SSW_S1) >> BP_CSU_CSL5_SSW_S1)

//! @brief Format value for bitfield CSU_CSL5_SSW_S1.
#define BF_CSU_CSL5_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_SSW_S1) & BM_CSU_CSL5_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL5_SSW_S1(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_SSW_S1) | BF_CSU_CSL5_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL5_NUW_S1      (22)      //!< Bit position for CSU_CSL5_NUW_S1.
#define BM_CSU_CSL5_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL5_NUW_S1.

//! @brief Get value of CSU_CSL5_NUW_S1 from a register value.
#define BG_CSU_CSL5_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_NUW_S1) >> BP_CSU_CSL5_NUW_S1)

//! @brief Format value for bitfield CSU_CSL5_NUW_S1.
#define BF_CSU_CSL5_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_NUW_S1) & BM_CSU_CSL5_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL5_NUW_S1(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_NUW_S1) | BF_CSU_CSL5_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL5_NSW_S1      (23)      //!< Bit position for CSU_CSL5_NSW_S1.
#define BM_CSU_CSL5_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL5_NSW_S1.

//! @brief Get value of CSU_CSL5_NSW_S1 from a register value.
#define BG_CSU_CSL5_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_NSW_S1) >> BP_CSU_CSL5_NSW_S1)

//! @brief Format value for bitfield CSU_CSL5_NSW_S1.
#define BF_CSU_CSL5_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_NSW_S1) & BM_CSU_CSL5_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL5_NSW_S1(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_NSW_S1) | BF_CSU_CSL5_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL5, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL5_LOCK_S1      (24)      //!< Bit position for CSU_CSL5_LOCK_S1.
#define BM_CSU_CSL5_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL5_LOCK_S1.

//! @brief Get value of CSU_CSL5_LOCK_S1 from a register value.
#define BG_CSU_CSL5_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL5_LOCK_S1) >> BP_CSU_CSL5_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL5_LOCK_S1.
#define BF_CSU_CSL5_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL5_LOCK_S1) & BM_CSU_CSL5_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL5_LOCK_S1(v)   (HW_CSU_CSL5_WR((HW_CSU_CSL5_RD() & ~BM_CSU_CSL5_LOCK_S1) | BF_CSU_CSL5_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL6 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL6 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl6
{
    reg32_t U;
    struct _hw_csu_csl6_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl6_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL6 register
 */
//@{
#define HW_CSU_CSL6_ADDR      (REGS_CSU_BASE + 0x18)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL6           (*(volatile hw_csu_csl6_t *) HW_CSU_CSL6_ADDR)
#define HW_CSU_CSL6_RD()      (HW_CSU_CSL6.U)
#define HW_CSU_CSL6_WR(v)     (HW_CSU_CSL6.U = (v))
#define HW_CSU_CSL6_SET(v)    (HW_CSU_CSL6_WR(HW_CSU_CSL6_RD() |  (v)))
#define HW_CSU_CSL6_CLR(v)    (HW_CSU_CSL6_WR(HW_CSU_CSL6_RD() & ~(v)))
#define HW_CSU_CSL6_TOG(v)    (HW_CSU_CSL6_WR(HW_CSU_CSL6_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL6 bitfields
 */

/*! @name Register CSU_CSL6, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL6_SUR_S2      (0)      //!< Bit position for CSU_CSL6_SUR_S2.
#define BM_CSU_CSL6_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL6_SUR_S2.

//! @brief Get value of CSU_CSL6_SUR_S2 from a register value.
#define BG_CSU_CSL6_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_SUR_S2) >> BP_CSU_CSL6_SUR_S2)

//! @brief Format value for bitfield CSU_CSL6_SUR_S2.
#define BF_CSU_CSL6_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_SUR_S2) & BM_CSU_CSL6_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL6_SUR_S2(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_SUR_S2) | BF_CSU_CSL6_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL6_SSR_S2      (1)      //!< Bit position for CSU_CSL6_SSR_S2.
#define BM_CSU_CSL6_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL6_SSR_S2.

//! @brief Get value of CSU_CSL6_SSR_S2 from a register value.
#define BG_CSU_CSL6_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_SSR_S2) >> BP_CSU_CSL6_SSR_S2)

//! @brief Format value for bitfield CSU_CSL6_SSR_S2.
#define BF_CSU_CSL6_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_SSR_S2) & BM_CSU_CSL6_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL6_SSR_S2(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_SSR_S2) | BF_CSU_CSL6_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL6_NUR_S2      (2)      //!< Bit position for CSU_CSL6_NUR_S2.
#define BM_CSU_CSL6_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL6_NUR_S2.

//! @brief Get value of CSU_CSL6_NUR_S2 from a register value.
#define BG_CSU_CSL6_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_NUR_S2) >> BP_CSU_CSL6_NUR_S2)

//! @brief Format value for bitfield CSU_CSL6_NUR_S2.
#define BF_CSU_CSL6_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_NUR_S2) & BM_CSU_CSL6_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL6_NUR_S2(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_NUR_S2) | BF_CSU_CSL6_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL6_NSR_S2      (3)      //!< Bit position for CSU_CSL6_NSR_S2.
#define BM_CSU_CSL6_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL6_NSR_S2.

//! @brief Get value of CSU_CSL6_NSR_S2 from a register value.
#define BG_CSU_CSL6_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_NSR_S2) >> BP_CSU_CSL6_NSR_S2)

//! @brief Format value for bitfield CSU_CSL6_NSR_S2.
#define BF_CSU_CSL6_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_NSR_S2) & BM_CSU_CSL6_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL6_NSR_S2(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_NSR_S2) | BF_CSU_CSL6_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL6_SUW_S2      (4)      //!< Bit position for CSU_CSL6_SUW_S2.
#define BM_CSU_CSL6_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL6_SUW_S2.

//! @brief Get value of CSU_CSL6_SUW_S2 from a register value.
#define BG_CSU_CSL6_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_SUW_S2) >> BP_CSU_CSL6_SUW_S2)

//! @brief Format value for bitfield CSU_CSL6_SUW_S2.
#define BF_CSU_CSL6_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_SUW_S2) & BM_CSU_CSL6_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL6_SUW_S2(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_SUW_S2) | BF_CSU_CSL6_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL6_SSW_S2      (5)      //!< Bit position for CSU_CSL6_SSW_S2.
#define BM_CSU_CSL6_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL6_SSW_S2.

//! @brief Get value of CSU_CSL6_SSW_S2 from a register value.
#define BG_CSU_CSL6_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_SSW_S2) >> BP_CSU_CSL6_SSW_S2)

//! @brief Format value for bitfield CSU_CSL6_SSW_S2.
#define BF_CSU_CSL6_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_SSW_S2) & BM_CSU_CSL6_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL6_SSW_S2(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_SSW_S2) | BF_CSU_CSL6_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL6_NUW_S2      (6)      //!< Bit position for CSU_CSL6_NUW_S2.
#define BM_CSU_CSL6_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL6_NUW_S2.

//! @brief Get value of CSU_CSL6_NUW_S2 from a register value.
#define BG_CSU_CSL6_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_NUW_S2) >> BP_CSU_CSL6_NUW_S2)

//! @brief Format value for bitfield CSU_CSL6_NUW_S2.
#define BF_CSU_CSL6_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_NUW_S2) & BM_CSU_CSL6_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL6_NUW_S2(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_NUW_S2) | BF_CSU_CSL6_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL6_NSW_S2      (7)      //!< Bit position for CSU_CSL6_NSW_S2.
#define BM_CSU_CSL6_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL6_NSW_S2.

//! @brief Get value of CSU_CSL6_NSW_S2 from a register value.
#define BG_CSU_CSL6_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_NSW_S2) >> BP_CSU_CSL6_NSW_S2)

//! @brief Format value for bitfield CSU_CSL6_NSW_S2.
#define BF_CSU_CSL6_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_NSW_S2) & BM_CSU_CSL6_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL6_NSW_S2(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_NSW_S2) | BF_CSU_CSL6_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL6_LOCK_S2      (8)      //!< Bit position for CSU_CSL6_LOCK_S2.
#define BM_CSU_CSL6_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL6_LOCK_S2.

//! @brief Get value of CSU_CSL6_LOCK_S2 from a register value.
#define BG_CSU_CSL6_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_LOCK_S2) >> BP_CSU_CSL6_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL6_LOCK_S2.
#define BF_CSU_CSL6_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_LOCK_S2) & BM_CSU_CSL6_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL6_LOCK_S2(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_LOCK_S2) | BF_CSU_CSL6_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL6_SUR_S1      (16)      //!< Bit position for CSU_CSL6_SUR_S1.
#define BM_CSU_CSL6_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL6_SUR_S1.

//! @brief Get value of CSU_CSL6_SUR_S1 from a register value.
#define BG_CSU_CSL6_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_SUR_S1) >> BP_CSU_CSL6_SUR_S1)

//! @brief Format value for bitfield CSU_CSL6_SUR_S1.
#define BF_CSU_CSL6_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_SUR_S1) & BM_CSU_CSL6_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL6_SUR_S1(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_SUR_S1) | BF_CSU_CSL6_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL6_SSR_S1      (17)      //!< Bit position for CSU_CSL6_SSR_S1.
#define BM_CSU_CSL6_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL6_SSR_S1.

//! @brief Get value of CSU_CSL6_SSR_S1 from a register value.
#define BG_CSU_CSL6_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_SSR_S1) >> BP_CSU_CSL6_SSR_S1)

//! @brief Format value for bitfield CSU_CSL6_SSR_S1.
#define BF_CSU_CSL6_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_SSR_S1) & BM_CSU_CSL6_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL6_SSR_S1(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_SSR_S1) | BF_CSU_CSL6_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL6_NUR_S1      (18)      //!< Bit position for CSU_CSL6_NUR_S1.
#define BM_CSU_CSL6_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL6_NUR_S1.

//! @brief Get value of CSU_CSL6_NUR_S1 from a register value.
#define BG_CSU_CSL6_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_NUR_S1) >> BP_CSU_CSL6_NUR_S1)

//! @brief Format value for bitfield CSU_CSL6_NUR_S1.
#define BF_CSU_CSL6_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_NUR_S1) & BM_CSU_CSL6_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL6_NUR_S1(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_NUR_S1) | BF_CSU_CSL6_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL6_NSR_S1      (19)      //!< Bit position for CSU_CSL6_NSR_S1.
#define BM_CSU_CSL6_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL6_NSR_S1.

//! @brief Get value of CSU_CSL6_NSR_S1 from a register value.
#define BG_CSU_CSL6_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_NSR_S1) >> BP_CSU_CSL6_NSR_S1)

//! @brief Format value for bitfield CSU_CSL6_NSR_S1.
#define BF_CSU_CSL6_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_NSR_S1) & BM_CSU_CSL6_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL6_NSR_S1(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_NSR_S1) | BF_CSU_CSL6_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL6_SUW_S1      (20)      //!< Bit position for CSU_CSL6_SUW_S1.
#define BM_CSU_CSL6_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL6_SUW_S1.

//! @brief Get value of CSU_CSL6_SUW_S1 from a register value.
#define BG_CSU_CSL6_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_SUW_S1) >> BP_CSU_CSL6_SUW_S1)

//! @brief Format value for bitfield CSU_CSL6_SUW_S1.
#define BF_CSU_CSL6_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_SUW_S1) & BM_CSU_CSL6_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL6_SUW_S1(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_SUW_S1) | BF_CSU_CSL6_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL6_SSW_S1      (21)      //!< Bit position for CSU_CSL6_SSW_S1.
#define BM_CSU_CSL6_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL6_SSW_S1.

//! @brief Get value of CSU_CSL6_SSW_S1 from a register value.
#define BG_CSU_CSL6_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_SSW_S1) >> BP_CSU_CSL6_SSW_S1)

//! @brief Format value for bitfield CSU_CSL6_SSW_S1.
#define BF_CSU_CSL6_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_SSW_S1) & BM_CSU_CSL6_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL6_SSW_S1(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_SSW_S1) | BF_CSU_CSL6_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL6_NUW_S1      (22)      //!< Bit position for CSU_CSL6_NUW_S1.
#define BM_CSU_CSL6_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL6_NUW_S1.

//! @brief Get value of CSU_CSL6_NUW_S1 from a register value.
#define BG_CSU_CSL6_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_NUW_S1) >> BP_CSU_CSL6_NUW_S1)

//! @brief Format value for bitfield CSU_CSL6_NUW_S1.
#define BF_CSU_CSL6_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_NUW_S1) & BM_CSU_CSL6_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL6_NUW_S1(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_NUW_S1) | BF_CSU_CSL6_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL6_NSW_S1      (23)      //!< Bit position for CSU_CSL6_NSW_S1.
#define BM_CSU_CSL6_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL6_NSW_S1.

//! @brief Get value of CSU_CSL6_NSW_S1 from a register value.
#define BG_CSU_CSL6_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_NSW_S1) >> BP_CSU_CSL6_NSW_S1)

//! @brief Format value for bitfield CSU_CSL6_NSW_S1.
#define BF_CSU_CSL6_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_NSW_S1) & BM_CSU_CSL6_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL6_NSW_S1(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_NSW_S1) | BF_CSU_CSL6_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL6, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL6_LOCK_S1      (24)      //!< Bit position for CSU_CSL6_LOCK_S1.
#define BM_CSU_CSL6_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL6_LOCK_S1.

//! @brief Get value of CSU_CSL6_LOCK_S1 from a register value.
#define BG_CSU_CSL6_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL6_LOCK_S1) >> BP_CSU_CSL6_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL6_LOCK_S1.
#define BF_CSU_CSL6_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL6_LOCK_S1) & BM_CSU_CSL6_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL6_LOCK_S1(v)   (HW_CSU_CSL6_WR((HW_CSU_CSL6_RD() & ~BM_CSU_CSL6_LOCK_S1) | BF_CSU_CSL6_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL7 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL7 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl7
{
    reg32_t U;
    struct _hw_csu_csl7_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl7_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL7 register
 */
//@{
#define HW_CSU_CSL7_ADDR      (REGS_CSU_BASE + 0x1c)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL7           (*(volatile hw_csu_csl7_t *) HW_CSU_CSL7_ADDR)
#define HW_CSU_CSL7_RD()      (HW_CSU_CSL7.U)
#define HW_CSU_CSL7_WR(v)     (HW_CSU_CSL7.U = (v))
#define HW_CSU_CSL7_SET(v)    (HW_CSU_CSL7_WR(HW_CSU_CSL7_RD() |  (v)))
#define HW_CSU_CSL7_CLR(v)    (HW_CSU_CSL7_WR(HW_CSU_CSL7_RD() & ~(v)))
#define HW_CSU_CSL7_TOG(v)    (HW_CSU_CSL7_WR(HW_CSU_CSL7_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL7 bitfields
 */

/*! @name Register CSU_CSL7, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL7_SUR_S2      (0)      //!< Bit position for CSU_CSL7_SUR_S2.
#define BM_CSU_CSL7_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL7_SUR_S2.

//! @brief Get value of CSU_CSL7_SUR_S2 from a register value.
#define BG_CSU_CSL7_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_SUR_S2) >> BP_CSU_CSL7_SUR_S2)

//! @brief Format value for bitfield CSU_CSL7_SUR_S2.
#define BF_CSU_CSL7_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_SUR_S2) & BM_CSU_CSL7_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL7_SUR_S2(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_SUR_S2) | BF_CSU_CSL7_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL7_SSR_S2      (1)      //!< Bit position for CSU_CSL7_SSR_S2.
#define BM_CSU_CSL7_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL7_SSR_S2.

//! @brief Get value of CSU_CSL7_SSR_S2 from a register value.
#define BG_CSU_CSL7_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_SSR_S2) >> BP_CSU_CSL7_SSR_S2)

//! @brief Format value for bitfield CSU_CSL7_SSR_S2.
#define BF_CSU_CSL7_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_SSR_S2) & BM_CSU_CSL7_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL7_SSR_S2(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_SSR_S2) | BF_CSU_CSL7_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL7_NUR_S2      (2)      //!< Bit position for CSU_CSL7_NUR_S2.
#define BM_CSU_CSL7_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL7_NUR_S2.

//! @brief Get value of CSU_CSL7_NUR_S2 from a register value.
#define BG_CSU_CSL7_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_NUR_S2) >> BP_CSU_CSL7_NUR_S2)

//! @brief Format value for bitfield CSU_CSL7_NUR_S2.
#define BF_CSU_CSL7_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_NUR_S2) & BM_CSU_CSL7_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL7_NUR_S2(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_NUR_S2) | BF_CSU_CSL7_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL7_NSR_S2      (3)      //!< Bit position for CSU_CSL7_NSR_S2.
#define BM_CSU_CSL7_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL7_NSR_S2.

//! @brief Get value of CSU_CSL7_NSR_S2 from a register value.
#define BG_CSU_CSL7_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_NSR_S2) >> BP_CSU_CSL7_NSR_S2)

//! @brief Format value for bitfield CSU_CSL7_NSR_S2.
#define BF_CSU_CSL7_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_NSR_S2) & BM_CSU_CSL7_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL7_NSR_S2(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_NSR_S2) | BF_CSU_CSL7_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL7_SUW_S2      (4)      //!< Bit position for CSU_CSL7_SUW_S2.
#define BM_CSU_CSL7_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL7_SUW_S2.

//! @brief Get value of CSU_CSL7_SUW_S2 from a register value.
#define BG_CSU_CSL7_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_SUW_S2) >> BP_CSU_CSL7_SUW_S2)

//! @brief Format value for bitfield CSU_CSL7_SUW_S2.
#define BF_CSU_CSL7_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_SUW_S2) & BM_CSU_CSL7_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL7_SUW_S2(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_SUW_S2) | BF_CSU_CSL7_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL7_SSW_S2      (5)      //!< Bit position for CSU_CSL7_SSW_S2.
#define BM_CSU_CSL7_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL7_SSW_S2.

//! @brief Get value of CSU_CSL7_SSW_S2 from a register value.
#define BG_CSU_CSL7_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_SSW_S2) >> BP_CSU_CSL7_SSW_S2)

//! @brief Format value for bitfield CSU_CSL7_SSW_S2.
#define BF_CSU_CSL7_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_SSW_S2) & BM_CSU_CSL7_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL7_SSW_S2(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_SSW_S2) | BF_CSU_CSL7_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL7_NUW_S2      (6)      //!< Bit position for CSU_CSL7_NUW_S2.
#define BM_CSU_CSL7_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL7_NUW_S2.

//! @brief Get value of CSU_CSL7_NUW_S2 from a register value.
#define BG_CSU_CSL7_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_NUW_S2) >> BP_CSU_CSL7_NUW_S2)

//! @brief Format value for bitfield CSU_CSL7_NUW_S2.
#define BF_CSU_CSL7_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_NUW_S2) & BM_CSU_CSL7_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL7_NUW_S2(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_NUW_S2) | BF_CSU_CSL7_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL7_NSW_S2      (7)      //!< Bit position for CSU_CSL7_NSW_S2.
#define BM_CSU_CSL7_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL7_NSW_S2.

//! @brief Get value of CSU_CSL7_NSW_S2 from a register value.
#define BG_CSU_CSL7_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_NSW_S2) >> BP_CSU_CSL7_NSW_S2)

//! @brief Format value for bitfield CSU_CSL7_NSW_S2.
#define BF_CSU_CSL7_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_NSW_S2) & BM_CSU_CSL7_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL7_NSW_S2(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_NSW_S2) | BF_CSU_CSL7_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL7_LOCK_S2      (8)      //!< Bit position for CSU_CSL7_LOCK_S2.
#define BM_CSU_CSL7_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL7_LOCK_S2.

//! @brief Get value of CSU_CSL7_LOCK_S2 from a register value.
#define BG_CSU_CSL7_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_LOCK_S2) >> BP_CSU_CSL7_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL7_LOCK_S2.
#define BF_CSU_CSL7_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_LOCK_S2) & BM_CSU_CSL7_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL7_LOCK_S2(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_LOCK_S2) | BF_CSU_CSL7_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL7_SUR_S1      (16)      //!< Bit position for CSU_CSL7_SUR_S1.
#define BM_CSU_CSL7_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL7_SUR_S1.

//! @brief Get value of CSU_CSL7_SUR_S1 from a register value.
#define BG_CSU_CSL7_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_SUR_S1) >> BP_CSU_CSL7_SUR_S1)

//! @brief Format value for bitfield CSU_CSL7_SUR_S1.
#define BF_CSU_CSL7_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_SUR_S1) & BM_CSU_CSL7_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL7_SUR_S1(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_SUR_S1) | BF_CSU_CSL7_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL7_SSR_S1      (17)      //!< Bit position for CSU_CSL7_SSR_S1.
#define BM_CSU_CSL7_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL7_SSR_S1.

//! @brief Get value of CSU_CSL7_SSR_S1 from a register value.
#define BG_CSU_CSL7_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_SSR_S1) >> BP_CSU_CSL7_SSR_S1)

//! @brief Format value for bitfield CSU_CSL7_SSR_S1.
#define BF_CSU_CSL7_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_SSR_S1) & BM_CSU_CSL7_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL7_SSR_S1(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_SSR_S1) | BF_CSU_CSL7_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL7_NUR_S1      (18)      //!< Bit position for CSU_CSL7_NUR_S1.
#define BM_CSU_CSL7_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL7_NUR_S1.

//! @brief Get value of CSU_CSL7_NUR_S1 from a register value.
#define BG_CSU_CSL7_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_NUR_S1) >> BP_CSU_CSL7_NUR_S1)

//! @brief Format value for bitfield CSU_CSL7_NUR_S1.
#define BF_CSU_CSL7_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_NUR_S1) & BM_CSU_CSL7_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL7_NUR_S1(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_NUR_S1) | BF_CSU_CSL7_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL7_NSR_S1      (19)      //!< Bit position for CSU_CSL7_NSR_S1.
#define BM_CSU_CSL7_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL7_NSR_S1.

//! @brief Get value of CSU_CSL7_NSR_S1 from a register value.
#define BG_CSU_CSL7_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_NSR_S1) >> BP_CSU_CSL7_NSR_S1)

//! @brief Format value for bitfield CSU_CSL7_NSR_S1.
#define BF_CSU_CSL7_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_NSR_S1) & BM_CSU_CSL7_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL7_NSR_S1(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_NSR_S1) | BF_CSU_CSL7_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL7_SUW_S1      (20)      //!< Bit position for CSU_CSL7_SUW_S1.
#define BM_CSU_CSL7_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL7_SUW_S1.

//! @brief Get value of CSU_CSL7_SUW_S1 from a register value.
#define BG_CSU_CSL7_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_SUW_S1) >> BP_CSU_CSL7_SUW_S1)

//! @brief Format value for bitfield CSU_CSL7_SUW_S1.
#define BF_CSU_CSL7_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_SUW_S1) & BM_CSU_CSL7_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL7_SUW_S1(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_SUW_S1) | BF_CSU_CSL7_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL7_SSW_S1      (21)      //!< Bit position for CSU_CSL7_SSW_S1.
#define BM_CSU_CSL7_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL7_SSW_S1.

//! @brief Get value of CSU_CSL7_SSW_S1 from a register value.
#define BG_CSU_CSL7_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_SSW_S1) >> BP_CSU_CSL7_SSW_S1)

//! @brief Format value for bitfield CSU_CSL7_SSW_S1.
#define BF_CSU_CSL7_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_SSW_S1) & BM_CSU_CSL7_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL7_SSW_S1(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_SSW_S1) | BF_CSU_CSL7_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL7_NUW_S1      (22)      //!< Bit position for CSU_CSL7_NUW_S1.
#define BM_CSU_CSL7_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL7_NUW_S1.

//! @brief Get value of CSU_CSL7_NUW_S1 from a register value.
#define BG_CSU_CSL7_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_NUW_S1) >> BP_CSU_CSL7_NUW_S1)

//! @brief Format value for bitfield CSU_CSL7_NUW_S1.
#define BF_CSU_CSL7_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_NUW_S1) & BM_CSU_CSL7_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL7_NUW_S1(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_NUW_S1) | BF_CSU_CSL7_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL7_NSW_S1      (23)      //!< Bit position for CSU_CSL7_NSW_S1.
#define BM_CSU_CSL7_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL7_NSW_S1.

//! @brief Get value of CSU_CSL7_NSW_S1 from a register value.
#define BG_CSU_CSL7_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_NSW_S1) >> BP_CSU_CSL7_NSW_S1)

//! @brief Format value for bitfield CSU_CSL7_NSW_S1.
#define BF_CSU_CSL7_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_NSW_S1) & BM_CSU_CSL7_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL7_NSW_S1(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_NSW_S1) | BF_CSU_CSL7_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL7, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL7_LOCK_S1      (24)      //!< Bit position for CSU_CSL7_LOCK_S1.
#define BM_CSU_CSL7_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL7_LOCK_S1.

//! @brief Get value of CSU_CSL7_LOCK_S1 from a register value.
#define BG_CSU_CSL7_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL7_LOCK_S1) >> BP_CSU_CSL7_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL7_LOCK_S1.
#define BF_CSU_CSL7_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL7_LOCK_S1) & BM_CSU_CSL7_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL7_LOCK_S1(v)   (HW_CSU_CSL7_WR((HW_CSU_CSL7_RD() & ~BM_CSU_CSL7_LOCK_S1) | BF_CSU_CSL7_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL8 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL8 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl8
{
    reg32_t U;
    struct _hw_csu_csl8_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl8_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL8 register
 */
//@{
#define HW_CSU_CSL8_ADDR      (REGS_CSU_BASE + 0x20)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL8           (*(volatile hw_csu_csl8_t *) HW_CSU_CSL8_ADDR)
#define HW_CSU_CSL8_RD()      (HW_CSU_CSL8.U)
#define HW_CSU_CSL8_WR(v)     (HW_CSU_CSL8.U = (v))
#define HW_CSU_CSL8_SET(v)    (HW_CSU_CSL8_WR(HW_CSU_CSL8_RD() |  (v)))
#define HW_CSU_CSL8_CLR(v)    (HW_CSU_CSL8_WR(HW_CSU_CSL8_RD() & ~(v)))
#define HW_CSU_CSL8_TOG(v)    (HW_CSU_CSL8_WR(HW_CSU_CSL8_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL8 bitfields
 */

/*! @name Register CSU_CSL8, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL8_SUR_S2      (0)      //!< Bit position for CSU_CSL8_SUR_S2.
#define BM_CSU_CSL8_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL8_SUR_S2.

//! @brief Get value of CSU_CSL8_SUR_S2 from a register value.
#define BG_CSU_CSL8_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_SUR_S2) >> BP_CSU_CSL8_SUR_S2)

//! @brief Format value for bitfield CSU_CSL8_SUR_S2.
#define BF_CSU_CSL8_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_SUR_S2) & BM_CSU_CSL8_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL8_SUR_S2(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_SUR_S2) | BF_CSU_CSL8_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL8_SSR_S2      (1)      //!< Bit position for CSU_CSL8_SSR_S2.
#define BM_CSU_CSL8_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL8_SSR_S2.

//! @brief Get value of CSU_CSL8_SSR_S2 from a register value.
#define BG_CSU_CSL8_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_SSR_S2) >> BP_CSU_CSL8_SSR_S2)

//! @brief Format value for bitfield CSU_CSL8_SSR_S2.
#define BF_CSU_CSL8_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_SSR_S2) & BM_CSU_CSL8_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL8_SSR_S2(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_SSR_S2) | BF_CSU_CSL8_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL8_NUR_S2      (2)      //!< Bit position for CSU_CSL8_NUR_S2.
#define BM_CSU_CSL8_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL8_NUR_S2.

//! @brief Get value of CSU_CSL8_NUR_S2 from a register value.
#define BG_CSU_CSL8_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_NUR_S2) >> BP_CSU_CSL8_NUR_S2)

//! @brief Format value for bitfield CSU_CSL8_NUR_S2.
#define BF_CSU_CSL8_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_NUR_S2) & BM_CSU_CSL8_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL8_NUR_S2(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_NUR_S2) | BF_CSU_CSL8_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL8_NSR_S2      (3)      //!< Bit position for CSU_CSL8_NSR_S2.
#define BM_CSU_CSL8_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL8_NSR_S2.

//! @brief Get value of CSU_CSL8_NSR_S2 from a register value.
#define BG_CSU_CSL8_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_NSR_S2) >> BP_CSU_CSL8_NSR_S2)

//! @brief Format value for bitfield CSU_CSL8_NSR_S2.
#define BF_CSU_CSL8_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_NSR_S2) & BM_CSU_CSL8_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL8_NSR_S2(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_NSR_S2) | BF_CSU_CSL8_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL8_SUW_S2      (4)      //!< Bit position for CSU_CSL8_SUW_S2.
#define BM_CSU_CSL8_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL8_SUW_S2.

//! @brief Get value of CSU_CSL8_SUW_S2 from a register value.
#define BG_CSU_CSL8_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_SUW_S2) >> BP_CSU_CSL8_SUW_S2)

//! @brief Format value for bitfield CSU_CSL8_SUW_S2.
#define BF_CSU_CSL8_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_SUW_S2) & BM_CSU_CSL8_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL8_SUW_S2(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_SUW_S2) | BF_CSU_CSL8_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL8_SSW_S2      (5)      //!< Bit position for CSU_CSL8_SSW_S2.
#define BM_CSU_CSL8_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL8_SSW_S2.

//! @brief Get value of CSU_CSL8_SSW_S2 from a register value.
#define BG_CSU_CSL8_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_SSW_S2) >> BP_CSU_CSL8_SSW_S2)

//! @brief Format value for bitfield CSU_CSL8_SSW_S2.
#define BF_CSU_CSL8_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_SSW_S2) & BM_CSU_CSL8_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL8_SSW_S2(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_SSW_S2) | BF_CSU_CSL8_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL8_NUW_S2      (6)      //!< Bit position for CSU_CSL8_NUW_S2.
#define BM_CSU_CSL8_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL8_NUW_S2.

//! @brief Get value of CSU_CSL8_NUW_S2 from a register value.
#define BG_CSU_CSL8_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_NUW_S2) >> BP_CSU_CSL8_NUW_S2)

//! @brief Format value for bitfield CSU_CSL8_NUW_S2.
#define BF_CSU_CSL8_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_NUW_S2) & BM_CSU_CSL8_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL8_NUW_S2(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_NUW_S2) | BF_CSU_CSL8_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL8_NSW_S2      (7)      //!< Bit position for CSU_CSL8_NSW_S2.
#define BM_CSU_CSL8_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL8_NSW_S2.

//! @brief Get value of CSU_CSL8_NSW_S2 from a register value.
#define BG_CSU_CSL8_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_NSW_S2) >> BP_CSU_CSL8_NSW_S2)

//! @brief Format value for bitfield CSU_CSL8_NSW_S2.
#define BF_CSU_CSL8_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_NSW_S2) & BM_CSU_CSL8_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL8_NSW_S2(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_NSW_S2) | BF_CSU_CSL8_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL8_LOCK_S2      (8)      //!< Bit position for CSU_CSL8_LOCK_S2.
#define BM_CSU_CSL8_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL8_LOCK_S2.

//! @brief Get value of CSU_CSL8_LOCK_S2 from a register value.
#define BG_CSU_CSL8_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_LOCK_S2) >> BP_CSU_CSL8_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL8_LOCK_S2.
#define BF_CSU_CSL8_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_LOCK_S2) & BM_CSU_CSL8_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL8_LOCK_S2(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_LOCK_S2) | BF_CSU_CSL8_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL8_SUR_S1      (16)      //!< Bit position for CSU_CSL8_SUR_S1.
#define BM_CSU_CSL8_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL8_SUR_S1.

//! @brief Get value of CSU_CSL8_SUR_S1 from a register value.
#define BG_CSU_CSL8_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_SUR_S1) >> BP_CSU_CSL8_SUR_S1)

//! @brief Format value for bitfield CSU_CSL8_SUR_S1.
#define BF_CSU_CSL8_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_SUR_S1) & BM_CSU_CSL8_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL8_SUR_S1(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_SUR_S1) | BF_CSU_CSL8_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL8_SSR_S1      (17)      //!< Bit position for CSU_CSL8_SSR_S1.
#define BM_CSU_CSL8_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL8_SSR_S1.

//! @brief Get value of CSU_CSL8_SSR_S1 from a register value.
#define BG_CSU_CSL8_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_SSR_S1) >> BP_CSU_CSL8_SSR_S1)

//! @brief Format value for bitfield CSU_CSL8_SSR_S1.
#define BF_CSU_CSL8_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_SSR_S1) & BM_CSU_CSL8_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL8_SSR_S1(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_SSR_S1) | BF_CSU_CSL8_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL8_NUR_S1      (18)      //!< Bit position for CSU_CSL8_NUR_S1.
#define BM_CSU_CSL8_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL8_NUR_S1.

//! @brief Get value of CSU_CSL8_NUR_S1 from a register value.
#define BG_CSU_CSL8_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_NUR_S1) >> BP_CSU_CSL8_NUR_S1)

//! @brief Format value for bitfield CSU_CSL8_NUR_S1.
#define BF_CSU_CSL8_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_NUR_S1) & BM_CSU_CSL8_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL8_NUR_S1(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_NUR_S1) | BF_CSU_CSL8_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL8_NSR_S1      (19)      //!< Bit position for CSU_CSL8_NSR_S1.
#define BM_CSU_CSL8_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL8_NSR_S1.

//! @brief Get value of CSU_CSL8_NSR_S1 from a register value.
#define BG_CSU_CSL8_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_NSR_S1) >> BP_CSU_CSL8_NSR_S1)

//! @brief Format value for bitfield CSU_CSL8_NSR_S1.
#define BF_CSU_CSL8_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_NSR_S1) & BM_CSU_CSL8_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL8_NSR_S1(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_NSR_S1) | BF_CSU_CSL8_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL8_SUW_S1      (20)      //!< Bit position for CSU_CSL8_SUW_S1.
#define BM_CSU_CSL8_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL8_SUW_S1.

//! @brief Get value of CSU_CSL8_SUW_S1 from a register value.
#define BG_CSU_CSL8_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_SUW_S1) >> BP_CSU_CSL8_SUW_S1)

//! @brief Format value for bitfield CSU_CSL8_SUW_S1.
#define BF_CSU_CSL8_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_SUW_S1) & BM_CSU_CSL8_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL8_SUW_S1(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_SUW_S1) | BF_CSU_CSL8_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL8_SSW_S1      (21)      //!< Bit position for CSU_CSL8_SSW_S1.
#define BM_CSU_CSL8_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL8_SSW_S1.

//! @brief Get value of CSU_CSL8_SSW_S1 from a register value.
#define BG_CSU_CSL8_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_SSW_S1) >> BP_CSU_CSL8_SSW_S1)

//! @brief Format value for bitfield CSU_CSL8_SSW_S1.
#define BF_CSU_CSL8_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_SSW_S1) & BM_CSU_CSL8_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL8_SSW_S1(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_SSW_S1) | BF_CSU_CSL8_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL8_NUW_S1      (22)      //!< Bit position for CSU_CSL8_NUW_S1.
#define BM_CSU_CSL8_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL8_NUW_S1.

//! @brief Get value of CSU_CSL8_NUW_S1 from a register value.
#define BG_CSU_CSL8_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_NUW_S1) >> BP_CSU_CSL8_NUW_S1)

//! @brief Format value for bitfield CSU_CSL8_NUW_S1.
#define BF_CSU_CSL8_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_NUW_S1) & BM_CSU_CSL8_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL8_NUW_S1(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_NUW_S1) | BF_CSU_CSL8_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL8_NSW_S1      (23)      //!< Bit position for CSU_CSL8_NSW_S1.
#define BM_CSU_CSL8_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL8_NSW_S1.

//! @brief Get value of CSU_CSL8_NSW_S1 from a register value.
#define BG_CSU_CSL8_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_NSW_S1) >> BP_CSU_CSL8_NSW_S1)

//! @brief Format value for bitfield CSU_CSL8_NSW_S1.
#define BF_CSU_CSL8_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_NSW_S1) & BM_CSU_CSL8_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL8_NSW_S1(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_NSW_S1) | BF_CSU_CSL8_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL8, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL8_LOCK_S1      (24)      //!< Bit position for CSU_CSL8_LOCK_S1.
#define BM_CSU_CSL8_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL8_LOCK_S1.

//! @brief Get value of CSU_CSL8_LOCK_S1 from a register value.
#define BG_CSU_CSL8_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL8_LOCK_S1) >> BP_CSU_CSL8_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL8_LOCK_S1.
#define BF_CSU_CSL8_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL8_LOCK_S1) & BM_CSU_CSL8_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL8_LOCK_S1(v)   (HW_CSU_CSL8_WR((HW_CSU_CSL8_RD() & ~BM_CSU_CSL8_LOCK_S1) | BF_CSU_CSL8_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL9 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL9 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl9
{
    reg32_t U;
    struct _hw_csu_csl9_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl9_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL9 register
 */
//@{
#define HW_CSU_CSL9_ADDR      (REGS_CSU_BASE + 0x24)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL9           (*(volatile hw_csu_csl9_t *) HW_CSU_CSL9_ADDR)
#define HW_CSU_CSL9_RD()      (HW_CSU_CSL9.U)
#define HW_CSU_CSL9_WR(v)     (HW_CSU_CSL9.U = (v))
#define HW_CSU_CSL9_SET(v)    (HW_CSU_CSL9_WR(HW_CSU_CSL9_RD() |  (v)))
#define HW_CSU_CSL9_CLR(v)    (HW_CSU_CSL9_WR(HW_CSU_CSL9_RD() & ~(v)))
#define HW_CSU_CSL9_TOG(v)    (HW_CSU_CSL9_WR(HW_CSU_CSL9_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL9 bitfields
 */

/*! @name Register CSU_CSL9, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL9_SUR_S2      (0)      //!< Bit position for CSU_CSL9_SUR_S2.
#define BM_CSU_CSL9_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL9_SUR_S2.

//! @brief Get value of CSU_CSL9_SUR_S2 from a register value.
#define BG_CSU_CSL9_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_SUR_S2) >> BP_CSU_CSL9_SUR_S2)

//! @brief Format value for bitfield CSU_CSL9_SUR_S2.
#define BF_CSU_CSL9_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_SUR_S2) & BM_CSU_CSL9_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL9_SUR_S2(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_SUR_S2) | BF_CSU_CSL9_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL9_SSR_S2      (1)      //!< Bit position for CSU_CSL9_SSR_S2.
#define BM_CSU_CSL9_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL9_SSR_S2.

//! @brief Get value of CSU_CSL9_SSR_S2 from a register value.
#define BG_CSU_CSL9_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_SSR_S2) >> BP_CSU_CSL9_SSR_S2)

//! @brief Format value for bitfield CSU_CSL9_SSR_S2.
#define BF_CSU_CSL9_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_SSR_S2) & BM_CSU_CSL9_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL9_SSR_S2(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_SSR_S2) | BF_CSU_CSL9_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL9_NUR_S2      (2)      //!< Bit position for CSU_CSL9_NUR_S2.
#define BM_CSU_CSL9_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL9_NUR_S2.

//! @brief Get value of CSU_CSL9_NUR_S2 from a register value.
#define BG_CSU_CSL9_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_NUR_S2) >> BP_CSU_CSL9_NUR_S2)

//! @brief Format value for bitfield CSU_CSL9_NUR_S2.
#define BF_CSU_CSL9_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_NUR_S2) & BM_CSU_CSL9_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL9_NUR_S2(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_NUR_S2) | BF_CSU_CSL9_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL9_NSR_S2      (3)      //!< Bit position for CSU_CSL9_NSR_S2.
#define BM_CSU_CSL9_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL9_NSR_S2.

//! @brief Get value of CSU_CSL9_NSR_S2 from a register value.
#define BG_CSU_CSL9_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_NSR_S2) >> BP_CSU_CSL9_NSR_S2)

//! @brief Format value for bitfield CSU_CSL9_NSR_S2.
#define BF_CSU_CSL9_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_NSR_S2) & BM_CSU_CSL9_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL9_NSR_S2(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_NSR_S2) | BF_CSU_CSL9_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL9_SUW_S2      (4)      //!< Bit position for CSU_CSL9_SUW_S2.
#define BM_CSU_CSL9_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL9_SUW_S2.

//! @brief Get value of CSU_CSL9_SUW_S2 from a register value.
#define BG_CSU_CSL9_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_SUW_S2) >> BP_CSU_CSL9_SUW_S2)

//! @brief Format value for bitfield CSU_CSL9_SUW_S2.
#define BF_CSU_CSL9_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_SUW_S2) & BM_CSU_CSL9_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL9_SUW_S2(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_SUW_S2) | BF_CSU_CSL9_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL9_SSW_S2      (5)      //!< Bit position for CSU_CSL9_SSW_S2.
#define BM_CSU_CSL9_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL9_SSW_S2.

//! @brief Get value of CSU_CSL9_SSW_S2 from a register value.
#define BG_CSU_CSL9_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_SSW_S2) >> BP_CSU_CSL9_SSW_S2)

//! @brief Format value for bitfield CSU_CSL9_SSW_S2.
#define BF_CSU_CSL9_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_SSW_S2) & BM_CSU_CSL9_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL9_SSW_S2(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_SSW_S2) | BF_CSU_CSL9_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL9_NUW_S2      (6)      //!< Bit position for CSU_CSL9_NUW_S2.
#define BM_CSU_CSL9_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL9_NUW_S2.

//! @brief Get value of CSU_CSL9_NUW_S2 from a register value.
#define BG_CSU_CSL9_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_NUW_S2) >> BP_CSU_CSL9_NUW_S2)

//! @brief Format value for bitfield CSU_CSL9_NUW_S2.
#define BF_CSU_CSL9_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_NUW_S2) & BM_CSU_CSL9_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL9_NUW_S2(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_NUW_S2) | BF_CSU_CSL9_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL9_NSW_S2      (7)      //!< Bit position for CSU_CSL9_NSW_S2.
#define BM_CSU_CSL9_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL9_NSW_S2.

//! @brief Get value of CSU_CSL9_NSW_S2 from a register value.
#define BG_CSU_CSL9_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_NSW_S2) >> BP_CSU_CSL9_NSW_S2)

//! @brief Format value for bitfield CSU_CSL9_NSW_S2.
#define BF_CSU_CSL9_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_NSW_S2) & BM_CSU_CSL9_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL9_NSW_S2(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_NSW_S2) | BF_CSU_CSL9_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL9_LOCK_S2      (8)      //!< Bit position for CSU_CSL9_LOCK_S2.
#define BM_CSU_CSL9_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL9_LOCK_S2.

//! @brief Get value of CSU_CSL9_LOCK_S2 from a register value.
#define BG_CSU_CSL9_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_LOCK_S2) >> BP_CSU_CSL9_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL9_LOCK_S2.
#define BF_CSU_CSL9_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_LOCK_S2) & BM_CSU_CSL9_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL9_LOCK_S2(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_LOCK_S2) | BF_CSU_CSL9_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL9_SUR_S1      (16)      //!< Bit position for CSU_CSL9_SUR_S1.
#define BM_CSU_CSL9_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL9_SUR_S1.

//! @brief Get value of CSU_CSL9_SUR_S1 from a register value.
#define BG_CSU_CSL9_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_SUR_S1) >> BP_CSU_CSL9_SUR_S1)

//! @brief Format value for bitfield CSU_CSL9_SUR_S1.
#define BF_CSU_CSL9_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_SUR_S1) & BM_CSU_CSL9_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL9_SUR_S1(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_SUR_S1) | BF_CSU_CSL9_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL9_SSR_S1      (17)      //!< Bit position for CSU_CSL9_SSR_S1.
#define BM_CSU_CSL9_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL9_SSR_S1.

//! @brief Get value of CSU_CSL9_SSR_S1 from a register value.
#define BG_CSU_CSL9_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_SSR_S1) >> BP_CSU_CSL9_SSR_S1)

//! @brief Format value for bitfield CSU_CSL9_SSR_S1.
#define BF_CSU_CSL9_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_SSR_S1) & BM_CSU_CSL9_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL9_SSR_S1(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_SSR_S1) | BF_CSU_CSL9_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL9_NUR_S1      (18)      //!< Bit position for CSU_CSL9_NUR_S1.
#define BM_CSU_CSL9_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL9_NUR_S1.

//! @brief Get value of CSU_CSL9_NUR_S1 from a register value.
#define BG_CSU_CSL9_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_NUR_S1) >> BP_CSU_CSL9_NUR_S1)

//! @brief Format value for bitfield CSU_CSL9_NUR_S1.
#define BF_CSU_CSL9_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_NUR_S1) & BM_CSU_CSL9_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL9_NUR_S1(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_NUR_S1) | BF_CSU_CSL9_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL9_NSR_S1      (19)      //!< Bit position for CSU_CSL9_NSR_S1.
#define BM_CSU_CSL9_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL9_NSR_S1.

//! @brief Get value of CSU_CSL9_NSR_S1 from a register value.
#define BG_CSU_CSL9_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_NSR_S1) >> BP_CSU_CSL9_NSR_S1)

//! @brief Format value for bitfield CSU_CSL9_NSR_S1.
#define BF_CSU_CSL9_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_NSR_S1) & BM_CSU_CSL9_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL9_NSR_S1(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_NSR_S1) | BF_CSU_CSL9_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL9_SUW_S1      (20)      //!< Bit position for CSU_CSL9_SUW_S1.
#define BM_CSU_CSL9_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL9_SUW_S1.

//! @brief Get value of CSU_CSL9_SUW_S1 from a register value.
#define BG_CSU_CSL9_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_SUW_S1) >> BP_CSU_CSL9_SUW_S1)

//! @brief Format value for bitfield CSU_CSL9_SUW_S1.
#define BF_CSU_CSL9_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_SUW_S1) & BM_CSU_CSL9_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL9_SUW_S1(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_SUW_S1) | BF_CSU_CSL9_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL9_SSW_S1      (21)      //!< Bit position for CSU_CSL9_SSW_S1.
#define BM_CSU_CSL9_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL9_SSW_S1.

//! @brief Get value of CSU_CSL9_SSW_S1 from a register value.
#define BG_CSU_CSL9_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_SSW_S1) >> BP_CSU_CSL9_SSW_S1)

//! @brief Format value for bitfield CSU_CSL9_SSW_S1.
#define BF_CSU_CSL9_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_SSW_S1) & BM_CSU_CSL9_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL9_SSW_S1(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_SSW_S1) | BF_CSU_CSL9_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL9_NUW_S1      (22)      //!< Bit position for CSU_CSL9_NUW_S1.
#define BM_CSU_CSL9_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL9_NUW_S1.

//! @brief Get value of CSU_CSL9_NUW_S1 from a register value.
#define BG_CSU_CSL9_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_NUW_S1) >> BP_CSU_CSL9_NUW_S1)

//! @brief Format value for bitfield CSU_CSL9_NUW_S1.
#define BF_CSU_CSL9_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_NUW_S1) & BM_CSU_CSL9_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL9_NUW_S1(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_NUW_S1) | BF_CSU_CSL9_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL9_NSW_S1      (23)      //!< Bit position for CSU_CSL9_NSW_S1.
#define BM_CSU_CSL9_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL9_NSW_S1.

//! @brief Get value of CSU_CSL9_NSW_S1 from a register value.
#define BG_CSU_CSL9_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_NSW_S1) >> BP_CSU_CSL9_NSW_S1)

//! @brief Format value for bitfield CSU_CSL9_NSW_S1.
#define BF_CSU_CSL9_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_NSW_S1) & BM_CSU_CSL9_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL9_NSW_S1(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_NSW_S1) | BF_CSU_CSL9_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL9, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL9_LOCK_S1      (24)      //!< Bit position for CSU_CSL9_LOCK_S1.
#define BM_CSU_CSL9_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL9_LOCK_S1.

//! @brief Get value of CSU_CSL9_LOCK_S1 from a register value.
#define BG_CSU_CSL9_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL9_LOCK_S1) >> BP_CSU_CSL9_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL9_LOCK_S1.
#define BF_CSU_CSL9_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL9_LOCK_S1) & BM_CSU_CSL9_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL9_LOCK_S1(v)   (HW_CSU_CSL9_WR((HW_CSU_CSL9_RD() & ~BM_CSU_CSL9_LOCK_S1) | BF_CSU_CSL9_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL10 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL10 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl10
{
    reg32_t U;
    struct _hw_csu_csl10_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl10_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL10 register
 */
//@{
#define HW_CSU_CSL10_ADDR      (REGS_CSU_BASE + 0x28)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL10           (*(volatile hw_csu_csl10_t *) HW_CSU_CSL10_ADDR)
#define HW_CSU_CSL10_RD()      (HW_CSU_CSL10.U)
#define HW_CSU_CSL10_WR(v)     (HW_CSU_CSL10.U = (v))
#define HW_CSU_CSL10_SET(v)    (HW_CSU_CSL10_WR(HW_CSU_CSL10_RD() |  (v)))
#define HW_CSU_CSL10_CLR(v)    (HW_CSU_CSL10_WR(HW_CSU_CSL10_RD() & ~(v)))
#define HW_CSU_CSL10_TOG(v)    (HW_CSU_CSL10_WR(HW_CSU_CSL10_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL10 bitfields
 */

/*! @name Register CSU_CSL10, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL10_SUR_S2      (0)      //!< Bit position for CSU_CSL10_SUR_S2.
#define BM_CSU_CSL10_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL10_SUR_S2.

//! @brief Get value of CSU_CSL10_SUR_S2 from a register value.
#define BG_CSU_CSL10_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_SUR_S2) >> BP_CSU_CSL10_SUR_S2)

//! @brief Format value for bitfield CSU_CSL10_SUR_S2.
#define BF_CSU_CSL10_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_SUR_S2) & BM_CSU_CSL10_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL10_SUR_S2(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_SUR_S2) | BF_CSU_CSL10_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL10_SSR_S2      (1)      //!< Bit position for CSU_CSL10_SSR_S2.
#define BM_CSU_CSL10_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL10_SSR_S2.

//! @brief Get value of CSU_CSL10_SSR_S2 from a register value.
#define BG_CSU_CSL10_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_SSR_S2) >> BP_CSU_CSL10_SSR_S2)

//! @brief Format value for bitfield CSU_CSL10_SSR_S2.
#define BF_CSU_CSL10_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_SSR_S2) & BM_CSU_CSL10_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL10_SSR_S2(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_SSR_S2) | BF_CSU_CSL10_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL10_NUR_S2      (2)      //!< Bit position for CSU_CSL10_NUR_S2.
#define BM_CSU_CSL10_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL10_NUR_S2.

//! @brief Get value of CSU_CSL10_NUR_S2 from a register value.
#define BG_CSU_CSL10_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_NUR_S2) >> BP_CSU_CSL10_NUR_S2)

//! @brief Format value for bitfield CSU_CSL10_NUR_S2.
#define BF_CSU_CSL10_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_NUR_S2) & BM_CSU_CSL10_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL10_NUR_S2(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_NUR_S2) | BF_CSU_CSL10_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL10_NSR_S2      (3)      //!< Bit position for CSU_CSL10_NSR_S2.
#define BM_CSU_CSL10_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL10_NSR_S2.

//! @brief Get value of CSU_CSL10_NSR_S2 from a register value.
#define BG_CSU_CSL10_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_NSR_S2) >> BP_CSU_CSL10_NSR_S2)

//! @brief Format value for bitfield CSU_CSL10_NSR_S2.
#define BF_CSU_CSL10_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_NSR_S2) & BM_CSU_CSL10_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL10_NSR_S2(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_NSR_S2) | BF_CSU_CSL10_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL10_SUW_S2      (4)      //!< Bit position for CSU_CSL10_SUW_S2.
#define BM_CSU_CSL10_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL10_SUW_S2.

//! @brief Get value of CSU_CSL10_SUW_S2 from a register value.
#define BG_CSU_CSL10_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_SUW_S2) >> BP_CSU_CSL10_SUW_S2)

//! @brief Format value for bitfield CSU_CSL10_SUW_S2.
#define BF_CSU_CSL10_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_SUW_S2) & BM_CSU_CSL10_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL10_SUW_S2(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_SUW_S2) | BF_CSU_CSL10_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL10_SSW_S2      (5)      //!< Bit position for CSU_CSL10_SSW_S2.
#define BM_CSU_CSL10_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL10_SSW_S2.

//! @brief Get value of CSU_CSL10_SSW_S2 from a register value.
#define BG_CSU_CSL10_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_SSW_S2) >> BP_CSU_CSL10_SSW_S2)

//! @brief Format value for bitfield CSU_CSL10_SSW_S2.
#define BF_CSU_CSL10_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_SSW_S2) & BM_CSU_CSL10_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL10_SSW_S2(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_SSW_S2) | BF_CSU_CSL10_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL10_NUW_S2      (6)      //!< Bit position for CSU_CSL10_NUW_S2.
#define BM_CSU_CSL10_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL10_NUW_S2.

//! @brief Get value of CSU_CSL10_NUW_S2 from a register value.
#define BG_CSU_CSL10_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_NUW_S2) >> BP_CSU_CSL10_NUW_S2)

//! @brief Format value for bitfield CSU_CSL10_NUW_S2.
#define BF_CSU_CSL10_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_NUW_S2) & BM_CSU_CSL10_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL10_NUW_S2(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_NUW_S2) | BF_CSU_CSL10_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL10_NSW_S2      (7)      //!< Bit position for CSU_CSL10_NSW_S2.
#define BM_CSU_CSL10_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL10_NSW_S2.

//! @brief Get value of CSU_CSL10_NSW_S2 from a register value.
#define BG_CSU_CSL10_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_NSW_S2) >> BP_CSU_CSL10_NSW_S2)

//! @brief Format value for bitfield CSU_CSL10_NSW_S2.
#define BF_CSU_CSL10_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_NSW_S2) & BM_CSU_CSL10_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL10_NSW_S2(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_NSW_S2) | BF_CSU_CSL10_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL10_LOCK_S2      (8)      //!< Bit position for CSU_CSL10_LOCK_S2.
#define BM_CSU_CSL10_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL10_LOCK_S2.

//! @brief Get value of CSU_CSL10_LOCK_S2 from a register value.
#define BG_CSU_CSL10_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_LOCK_S2) >> BP_CSU_CSL10_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL10_LOCK_S2.
#define BF_CSU_CSL10_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_LOCK_S2) & BM_CSU_CSL10_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL10_LOCK_S2(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_LOCK_S2) | BF_CSU_CSL10_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL10_SUR_S1      (16)      //!< Bit position for CSU_CSL10_SUR_S1.
#define BM_CSU_CSL10_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL10_SUR_S1.

//! @brief Get value of CSU_CSL10_SUR_S1 from a register value.
#define BG_CSU_CSL10_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_SUR_S1) >> BP_CSU_CSL10_SUR_S1)

//! @brief Format value for bitfield CSU_CSL10_SUR_S1.
#define BF_CSU_CSL10_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_SUR_S1) & BM_CSU_CSL10_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL10_SUR_S1(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_SUR_S1) | BF_CSU_CSL10_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL10_SSR_S1      (17)      //!< Bit position for CSU_CSL10_SSR_S1.
#define BM_CSU_CSL10_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL10_SSR_S1.

//! @brief Get value of CSU_CSL10_SSR_S1 from a register value.
#define BG_CSU_CSL10_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_SSR_S1) >> BP_CSU_CSL10_SSR_S1)

//! @brief Format value for bitfield CSU_CSL10_SSR_S1.
#define BF_CSU_CSL10_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_SSR_S1) & BM_CSU_CSL10_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL10_SSR_S1(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_SSR_S1) | BF_CSU_CSL10_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL10_NUR_S1      (18)      //!< Bit position for CSU_CSL10_NUR_S1.
#define BM_CSU_CSL10_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL10_NUR_S1.

//! @brief Get value of CSU_CSL10_NUR_S1 from a register value.
#define BG_CSU_CSL10_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_NUR_S1) >> BP_CSU_CSL10_NUR_S1)

//! @brief Format value for bitfield CSU_CSL10_NUR_S1.
#define BF_CSU_CSL10_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_NUR_S1) & BM_CSU_CSL10_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL10_NUR_S1(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_NUR_S1) | BF_CSU_CSL10_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL10_NSR_S1      (19)      //!< Bit position for CSU_CSL10_NSR_S1.
#define BM_CSU_CSL10_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL10_NSR_S1.

//! @brief Get value of CSU_CSL10_NSR_S1 from a register value.
#define BG_CSU_CSL10_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_NSR_S1) >> BP_CSU_CSL10_NSR_S1)

//! @brief Format value for bitfield CSU_CSL10_NSR_S1.
#define BF_CSU_CSL10_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_NSR_S1) & BM_CSU_CSL10_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL10_NSR_S1(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_NSR_S1) | BF_CSU_CSL10_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL10_SUW_S1      (20)      //!< Bit position for CSU_CSL10_SUW_S1.
#define BM_CSU_CSL10_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL10_SUW_S1.

//! @brief Get value of CSU_CSL10_SUW_S1 from a register value.
#define BG_CSU_CSL10_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_SUW_S1) >> BP_CSU_CSL10_SUW_S1)

//! @brief Format value for bitfield CSU_CSL10_SUW_S1.
#define BF_CSU_CSL10_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_SUW_S1) & BM_CSU_CSL10_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL10_SUW_S1(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_SUW_S1) | BF_CSU_CSL10_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL10_SSW_S1      (21)      //!< Bit position for CSU_CSL10_SSW_S1.
#define BM_CSU_CSL10_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL10_SSW_S1.

//! @brief Get value of CSU_CSL10_SSW_S1 from a register value.
#define BG_CSU_CSL10_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_SSW_S1) >> BP_CSU_CSL10_SSW_S1)

//! @brief Format value for bitfield CSU_CSL10_SSW_S1.
#define BF_CSU_CSL10_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_SSW_S1) & BM_CSU_CSL10_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL10_SSW_S1(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_SSW_S1) | BF_CSU_CSL10_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL10_NUW_S1      (22)      //!< Bit position for CSU_CSL10_NUW_S1.
#define BM_CSU_CSL10_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL10_NUW_S1.

//! @brief Get value of CSU_CSL10_NUW_S1 from a register value.
#define BG_CSU_CSL10_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_NUW_S1) >> BP_CSU_CSL10_NUW_S1)

//! @brief Format value for bitfield CSU_CSL10_NUW_S1.
#define BF_CSU_CSL10_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_NUW_S1) & BM_CSU_CSL10_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL10_NUW_S1(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_NUW_S1) | BF_CSU_CSL10_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL10_NSW_S1      (23)      //!< Bit position for CSU_CSL10_NSW_S1.
#define BM_CSU_CSL10_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL10_NSW_S1.

//! @brief Get value of CSU_CSL10_NSW_S1 from a register value.
#define BG_CSU_CSL10_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_NSW_S1) >> BP_CSU_CSL10_NSW_S1)

//! @brief Format value for bitfield CSU_CSL10_NSW_S1.
#define BF_CSU_CSL10_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_NSW_S1) & BM_CSU_CSL10_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL10_NSW_S1(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_NSW_S1) | BF_CSU_CSL10_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL10, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL10_LOCK_S1      (24)      //!< Bit position for CSU_CSL10_LOCK_S1.
#define BM_CSU_CSL10_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL10_LOCK_S1.

//! @brief Get value of CSU_CSL10_LOCK_S1 from a register value.
#define BG_CSU_CSL10_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL10_LOCK_S1) >> BP_CSU_CSL10_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL10_LOCK_S1.
#define BF_CSU_CSL10_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL10_LOCK_S1) & BM_CSU_CSL10_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL10_LOCK_S1(v)   (HW_CSU_CSL10_WR((HW_CSU_CSL10_RD() & ~BM_CSU_CSL10_LOCK_S1) | BF_CSU_CSL10_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL11 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL11 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl11
{
    reg32_t U;
    struct _hw_csu_csl11_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl11_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL11 register
 */
//@{
#define HW_CSU_CSL11_ADDR      (REGS_CSU_BASE + 0x2c)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL11           (*(volatile hw_csu_csl11_t *) HW_CSU_CSL11_ADDR)
#define HW_CSU_CSL11_RD()      (HW_CSU_CSL11.U)
#define HW_CSU_CSL11_WR(v)     (HW_CSU_CSL11.U = (v))
#define HW_CSU_CSL11_SET(v)    (HW_CSU_CSL11_WR(HW_CSU_CSL11_RD() |  (v)))
#define HW_CSU_CSL11_CLR(v)    (HW_CSU_CSL11_WR(HW_CSU_CSL11_RD() & ~(v)))
#define HW_CSU_CSL11_TOG(v)    (HW_CSU_CSL11_WR(HW_CSU_CSL11_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL11 bitfields
 */

/*! @name Register CSU_CSL11, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL11_SUR_S2      (0)      //!< Bit position for CSU_CSL11_SUR_S2.
#define BM_CSU_CSL11_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL11_SUR_S2.

//! @brief Get value of CSU_CSL11_SUR_S2 from a register value.
#define BG_CSU_CSL11_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_SUR_S2) >> BP_CSU_CSL11_SUR_S2)

//! @brief Format value for bitfield CSU_CSL11_SUR_S2.
#define BF_CSU_CSL11_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_SUR_S2) & BM_CSU_CSL11_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL11_SUR_S2(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_SUR_S2) | BF_CSU_CSL11_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL11_SSR_S2      (1)      //!< Bit position for CSU_CSL11_SSR_S2.
#define BM_CSU_CSL11_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL11_SSR_S2.

//! @brief Get value of CSU_CSL11_SSR_S2 from a register value.
#define BG_CSU_CSL11_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_SSR_S2) >> BP_CSU_CSL11_SSR_S2)

//! @brief Format value for bitfield CSU_CSL11_SSR_S2.
#define BF_CSU_CSL11_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_SSR_S2) & BM_CSU_CSL11_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL11_SSR_S2(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_SSR_S2) | BF_CSU_CSL11_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL11_NUR_S2      (2)      //!< Bit position for CSU_CSL11_NUR_S2.
#define BM_CSU_CSL11_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL11_NUR_S2.

//! @brief Get value of CSU_CSL11_NUR_S2 from a register value.
#define BG_CSU_CSL11_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_NUR_S2) >> BP_CSU_CSL11_NUR_S2)

//! @brief Format value for bitfield CSU_CSL11_NUR_S2.
#define BF_CSU_CSL11_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_NUR_S2) & BM_CSU_CSL11_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL11_NUR_S2(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_NUR_S2) | BF_CSU_CSL11_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL11_NSR_S2      (3)      //!< Bit position for CSU_CSL11_NSR_S2.
#define BM_CSU_CSL11_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL11_NSR_S2.

//! @brief Get value of CSU_CSL11_NSR_S2 from a register value.
#define BG_CSU_CSL11_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_NSR_S2) >> BP_CSU_CSL11_NSR_S2)

//! @brief Format value for bitfield CSU_CSL11_NSR_S2.
#define BF_CSU_CSL11_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_NSR_S2) & BM_CSU_CSL11_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL11_NSR_S2(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_NSR_S2) | BF_CSU_CSL11_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL11_SUW_S2      (4)      //!< Bit position for CSU_CSL11_SUW_S2.
#define BM_CSU_CSL11_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL11_SUW_S2.

//! @brief Get value of CSU_CSL11_SUW_S2 from a register value.
#define BG_CSU_CSL11_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_SUW_S2) >> BP_CSU_CSL11_SUW_S2)

//! @brief Format value for bitfield CSU_CSL11_SUW_S2.
#define BF_CSU_CSL11_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_SUW_S2) & BM_CSU_CSL11_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL11_SUW_S2(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_SUW_S2) | BF_CSU_CSL11_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL11_SSW_S2      (5)      //!< Bit position for CSU_CSL11_SSW_S2.
#define BM_CSU_CSL11_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL11_SSW_S2.

//! @brief Get value of CSU_CSL11_SSW_S2 from a register value.
#define BG_CSU_CSL11_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_SSW_S2) >> BP_CSU_CSL11_SSW_S2)

//! @brief Format value for bitfield CSU_CSL11_SSW_S2.
#define BF_CSU_CSL11_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_SSW_S2) & BM_CSU_CSL11_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL11_SSW_S2(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_SSW_S2) | BF_CSU_CSL11_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL11_NUW_S2      (6)      //!< Bit position for CSU_CSL11_NUW_S2.
#define BM_CSU_CSL11_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL11_NUW_S2.

//! @brief Get value of CSU_CSL11_NUW_S2 from a register value.
#define BG_CSU_CSL11_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_NUW_S2) >> BP_CSU_CSL11_NUW_S2)

//! @brief Format value for bitfield CSU_CSL11_NUW_S2.
#define BF_CSU_CSL11_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_NUW_S2) & BM_CSU_CSL11_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL11_NUW_S2(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_NUW_S2) | BF_CSU_CSL11_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL11_NSW_S2      (7)      //!< Bit position for CSU_CSL11_NSW_S2.
#define BM_CSU_CSL11_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL11_NSW_S2.

//! @brief Get value of CSU_CSL11_NSW_S2 from a register value.
#define BG_CSU_CSL11_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_NSW_S2) >> BP_CSU_CSL11_NSW_S2)

//! @brief Format value for bitfield CSU_CSL11_NSW_S2.
#define BF_CSU_CSL11_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_NSW_S2) & BM_CSU_CSL11_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL11_NSW_S2(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_NSW_S2) | BF_CSU_CSL11_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL11_LOCK_S2      (8)      //!< Bit position for CSU_CSL11_LOCK_S2.
#define BM_CSU_CSL11_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL11_LOCK_S2.

//! @brief Get value of CSU_CSL11_LOCK_S2 from a register value.
#define BG_CSU_CSL11_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_LOCK_S2) >> BP_CSU_CSL11_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL11_LOCK_S2.
#define BF_CSU_CSL11_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_LOCK_S2) & BM_CSU_CSL11_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL11_LOCK_S2(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_LOCK_S2) | BF_CSU_CSL11_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL11_SUR_S1      (16)      //!< Bit position for CSU_CSL11_SUR_S1.
#define BM_CSU_CSL11_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL11_SUR_S1.

//! @brief Get value of CSU_CSL11_SUR_S1 from a register value.
#define BG_CSU_CSL11_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_SUR_S1) >> BP_CSU_CSL11_SUR_S1)

//! @brief Format value for bitfield CSU_CSL11_SUR_S1.
#define BF_CSU_CSL11_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_SUR_S1) & BM_CSU_CSL11_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL11_SUR_S1(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_SUR_S1) | BF_CSU_CSL11_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL11_SSR_S1      (17)      //!< Bit position for CSU_CSL11_SSR_S1.
#define BM_CSU_CSL11_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL11_SSR_S1.

//! @brief Get value of CSU_CSL11_SSR_S1 from a register value.
#define BG_CSU_CSL11_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_SSR_S1) >> BP_CSU_CSL11_SSR_S1)

//! @brief Format value for bitfield CSU_CSL11_SSR_S1.
#define BF_CSU_CSL11_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_SSR_S1) & BM_CSU_CSL11_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL11_SSR_S1(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_SSR_S1) | BF_CSU_CSL11_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL11_NUR_S1      (18)      //!< Bit position for CSU_CSL11_NUR_S1.
#define BM_CSU_CSL11_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL11_NUR_S1.

//! @brief Get value of CSU_CSL11_NUR_S1 from a register value.
#define BG_CSU_CSL11_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_NUR_S1) >> BP_CSU_CSL11_NUR_S1)

//! @brief Format value for bitfield CSU_CSL11_NUR_S1.
#define BF_CSU_CSL11_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_NUR_S1) & BM_CSU_CSL11_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL11_NUR_S1(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_NUR_S1) | BF_CSU_CSL11_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL11_NSR_S1      (19)      //!< Bit position for CSU_CSL11_NSR_S1.
#define BM_CSU_CSL11_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL11_NSR_S1.

//! @brief Get value of CSU_CSL11_NSR_S1 from a register value.
#define BG_CSU_CSL11_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_NSR_S1) >> BP_CSU_CSL11_NSR_S1)

//! @brief Format value for bitfield CSU_CSL11_NSR_S1.
#define BF_CSU_CSL11_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_NSR_S1) & BM_CSU_CSL11_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL11_NSR_S1(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_NSR_S1) | BF_CSU_CSL11_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL11_SUW_S1      (20)      //!< Bit position for CSU_CSL11_SUW_S1.
#define BM_CSU_CSL11_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL11_SUW_S1.

//! @brief Get value of CSU_CSL11_SUW_S1 from a register value.
#define BG_CSU_CSL11_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_SUW_S1) >> BP_CSU_CSL11_SUW_S1)

//! @brief Format value for bitfield CSU_CSL11_SUW_S1.
#define BF_CSU_CSL11_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_SUW_S1) & BM_CSU_CSL11_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL11_SUW_S1(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_SUW_S1) | BF_CSU_CSL11_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL11_SSW_S1      (21)      //!< Bit position for CSU_CSL11_SSW_S1.
#define BM_CSU_CSL11_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL11_SSW_S1.

//! @brief Get value of CSU_CSL11_SSW_S1 from a register value.
#define BG_CSU_CSL11_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_SSW_S1) >> BP_CSU_CSL11_SSW_S1)

//! @brief Format value for bitfield CSU_CSL11_SSW_S1.
#define BF_CSU_CSL11_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_SSW_S1) & BM_CSU_CSL11_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL11_SSW_S1(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_SSW_S1) | BF_CSU_CSL11_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL11_NUW_S1      (22)      //!< Bit position for CSU_CSL11_NUW_S1.
#define BM_CSU_CSL11_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL11_NUW_S1.

//! @brief Get value of CSU_CSL11_NUW_S1 from a register value.
#define BG_CSU_CSL11_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_NUW_S1) >> BP_CSU_CSL11_NUW_S1)

//! @brief Format value for bitfield CSU_CSL11_NUW_S1.
#define BF_CSU_CSL11_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_NUW_S1) & BM_CSU_CSL11_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL11_NUW_S1(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_NUW_S1) | BF_CSU_CSL11_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL11_NSW_S1      (23)      //!< Bit position for CSU_CSL11_NSW_S1.
#define BM_CSU_CSL11_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL11_NSW_S1.

//! @brief Get value of CSU_CSL11_NSW_S1 from a register value.
#define BG_CSU_CSL11_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_NSW_S1) >> BP_CSU_CSL11_NSW_S1)

//! @brief Format value for bitfield CSU_CSL11_NSW_S1.
#define BF_CSU_CSL11_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_NSW_S1) & BM_CSU_CSL11_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL11_NSW_S1(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_NSW_S1) | BF_CSU_CSL11_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL11, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL11_LOCK_S1      (24)      //!< Bit position for CSU_CSL11_LOCK_S1.
#define BM_CSU_CSL11_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL11_LOCK_S1.

//! @brief Get value of CSU_CSL11_LOCK_S1 from a register value.
#define BG_CSU_CSL11_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL11_LOCK_S1) >> BP_CSU_CSL11_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL11_LOCK_S1.
#define BF_CSU_CSL11_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL11_LOCK_S1) & BM_CSU_CSL11_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL11_LOCK_S1(v)   (HW_CSU_CSL11_WR((HW_CSU_CSL11_RD() & ~BM_CSU_CSL11_LOCK_S1) | BF_CSU_CSL11_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL12 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL12 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl12
{
    reg32_t U;
    struct _hw_csu_csl12_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl12_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL12 register
 */
//@{
#define HW_CSU_CSL12_ADDR      (REGS_CSU_BASE + 0x30)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL12           (*(volatile hw_csu_csl12_t *) HW_CSU_CSL12_ADDR)
#define HW_CSU_CSL12_RD()      (HW_CSU_CSL12.U)
#define HW_CSU_CSL12_WR(v)     (HW_CSU_CSL12.U = (v))
#define HW_CSU_CSL12_SET(v)    (HW_CSU_CSL12_WR(HW_CSU_CSL12_RD() |  (v)))
#define HW_CSU_CSL12_CLR(v)    (HW_CSU_CSL12_WR(HW_CSU_CSL12_RD() & ~(v)))
#define HW_CSU_CSL12_TOG(v)    (HW_CSU_CSL12_WR(HW_CSU_CSL12_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL12 bitfields
 */

/*! @name Register CSU_CSL12, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL12_SUR_S2      (0)      //!< Bit position for CSU_CSL12_SUR_S2.
#define BM_CSU_CSL12_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL12_SUR_S2.

//! @brief Get value of CSU_CSL12_SUR_S2 from a register value.
#define BG_CSU_CSL12_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_SUR_S2) >> BP_CSU_CSL12_SUR_S2)

//! @brief Format value for bitfield CSU_CSL12_SUR_S2.
#define BF_CSU_CSL12_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_SUR_S2) & BM_CSU_CSL12_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL12_SUR_S2(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_SUR_S2) | BF_CSU_CSL12_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL12_SSR_S2      (1)      //!< Bit position for CSU_CSL12_SSR_S2.
#define BM_CSU_CSL12_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL12_SSR_S2.

//! @brief Get value of CSU_CSL12_SSR_S2 from a register value.
#define BG_CSU_CSL12_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_SSR_S2) >> BP_CSU_CSL12_SSR_S2)

//! @brief Format value for bitfield CSU_CSL12_SSR_S2.
#define BF_CSU_CSL12_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_SSR_S2) & BM_CSU_CSL12_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL12_SSR_S2(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_SSR_S2) | BF_CSU_CSL12_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL12_NUR_S2      (2)      //!< Bit position for CSU_CSL12_NUR_S2.
#define BM_CSU_CSL12_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL12_NUR_S2.

//! @brief Get value of CSU_CSL12_NUR_S2 from a register value.
#define BG_CSU_CSL12_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_NUR_S2) >> BP_CSU_CSL12_NUR_S2)

//! @brief Format value for bitfield CSU_CSL12_NUR_S2.
#define BF_CSU_CSL12_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_NUR_S2) & BM_CSU_CSL12_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL12_NUR_S2(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_NUR_S2) | BF_CSU_CSL12_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL12_NSR_S2      (3)      //!< Bit position for CSU_CSL12_NSR_S2.
#define BM_CSU_CSL12_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL12_NSR_S2.

//! @brief Get value of CSU_CSL12_NSR_S2 from a register value.
#define BG_CSU_CSL12_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_NSR_S2) >> BP_CSU_CSL12_NSR_S2)

//! @brief Format value for bitfield CSU_CSL12_NSR_S2.
#define BF_CSU_CSL12_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_NSR_S2) & BM_CSU_CSL12_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL12_NSR_S2(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_NSR_S2) | BF_CSU_CSL12_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL12_SUW_S2      (4)      //!< Bit position for CSU_CSL12_SUW_S2.
#define BM_CSU_CSL12_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL12_SUW_S2.

//! @brief Get value of CSU_CSL12_SUW_S2 from a register value.
#define BG_CSU_CSL12_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_SUW_S2) >> BP_CSU_CSL12_SUW_S2)

//! @brief Format value for bitfield CSU_CSL12_SUW_S2.
#define BF_CSU_CSL12_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_SUW_S2) & BM_CSU_CSL12_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL12_SUW_S2(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_SUW_S2) | BF_CSU_CSL12_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL12_SSW_S2      (5)      //!< Bit position for CSU_CSL12_SSW_S2.
#define BM_CSU_CSL12_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL12_SSW_S2.

//! @brief Get value of CSU_CSL12_SSW_S2 from a register value.
#define BG_CSU_CSL12_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_SSW_S2) >> BP_CSU_CSL12_SSW_S2)

//! @brief Format value for bitfield CSU_CSL12_SSW_S2.
#define BF_CSU_CSL12_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_SSW_S2) & BM_CSU_CSL12_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL12_SSW_S2(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_SSW_S2) | BF_CSU_CSL12_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL12_NUW_S2      (6)      //!< Bit position for CSU_CSL12_NUW_S2.
#define BM_CSU_CSL12_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL12_NUW_S2.

//! @brief Get value of CSU_CSL12_NUW_S2 from a register value.
#define BG_CSU_CSL12_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_NUW_S2) >> BP_CSU_CSL12_NUW_S2)

//! @brief Format value for bitfield CSU_CSL12_NUW_S2.
#define BF_CSU_CSL12_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_NUW_S2) & BM_CSU_CSL12_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL12_NUW_S2(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_NUW_S2) | BF_CSU_CSL12_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL12_NSW_S2      (7)      //!< Bit position for CSU_CSL12_NSW_S2.
#define BM_CSU_CSL12_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL12_NSW_S2.

//! @brief Get value of CSU_CSL12_NSW_S2 from a register value.
#define BG_CSU_CSL12_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_NSW_S2) >> BP_CSU_CSL12_NSW_S2)

//! @brief Format value for bitfield CSU_CSL12_NSW_S2.
#define BF_CSU_CSL12_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_NSW_S2) & BM_CSU_CSL12_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL12_NSW_S2(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_NSW_S2) | BF_CSU_CSL12_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL12_LOCK_S2      (8)      //!< Bit position for CSU_CSL12_LOCK_S2.
#define BM_CSU_CSL12_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL12_LOCK_S2.

//! @brief Get value of CSU_CSL12_LOCK_S2 from a register value.
#define BG_CSU_CSL12_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_LOCK_S2) >> BP_CSU_CSL12_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL12_LOCK_S2.
#define BF_CSU_CSL12_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_LOCK_S2) & BM_CSU_CSL12_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL12_LOCK_S2(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_LOCK_S2) | BF_CSU_CSL12_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL12_SUR_S1      (16)      //!< Bit position for CSU_CSL12_SUR_S1.
#define BM_CSU_CSL12_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL12_SUR_S1.

//! @brief Get value of CSU_CSL12_SUR_S1 from a register value.
#define BG_CSU_CSL12_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_SUR_S1) >> BP_CSU_CSL12_SUR_S1)

//! @brief Format value for bitfield CSU_CSL12_SUR_S1.
#define BF_CSU_CSL12_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_SUR_S1) & BM_CSU_CSL12_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL12_SUR_S1(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_SUR_S1) | BF_CSU_CSL12_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL12_SSR_S1      (17)      //!< Bit position for CSU_CSL12_SSR_S1.
#define BM_CSU_CSL12_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL12_SSR_S1.

//! @brief Get value of CSU_CSL12_SSR_S1 from a register value.
#define BG_CSU_CSL12_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_SSR_S1) >> BP_CSU_CSL12_SSR_S1)

//! @brief Format value for bitfield CSU_CSL12_SSR_S1.
#define BF_CSU_CSL12_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_SSR_S1) & BM_CSU_CSL12_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL12_SSR_S1(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_SSR_S1) | BF_CSU_CSL12_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL12_NUR_S1      (18)      //!< Bit position for CSU_CSL12_NUR_S1.
#define BM_CSU_CSL12_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL12_NUR_S1.

//! @brief Get value of CSU_CSL12_NUR_S1 from a register value.
#define BG_CSU_CSL12_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_NUR_S1) >> BP_CSU_CSL12_NUR_S1)

//! @brief Format value for bitfield CSU_CSL12_NUR_S1.
#define BF_CSU_CSL12_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_NUR_S1) & BM_CSU_CSL12_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL12_NUR_S1(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_NUR_S1) | BF_CSU_CSL12_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL12_NSR_S1      (19)      //!< Bit position for CSU_CSL12_NSR_S1.
#define BM_CSU_CSL12_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL12_NSR_S1.

//! @brief Get value of CSU_CSL12_NSR_S1 from a register value.
#define BG_CSU_CSL12_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_NSR_S1) >> BP_CSU_CSL12_NSR_S1)

//! @brief Format value for bitfield CSU_CSL12_NSR_S1.
#define BF_CSU_CSL12_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_NSR_S1) & BM_CSU_CSL12_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL12_NSR_S1(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_NSR_S1) | BF_CSU_CSL12_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL12_SUW_S1      (20)      //!< Bit position for CSU_CSL12_SUW_S1.
#define BM_CSU_CSL12_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL12_SUW_S1.

//! @brief Get value of CSU_CSL12_SUW_S1 from a register value.
#define BG_CSU_CSL12_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_SUW_S1) >> BP_CSU_CSL12_SUW_S1)

//! @brief Format value for bitfield CSU_CSL12_SUW_S1.
#define BF_CSU_CSL12_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_SUW_S1) & BM_CSU_CSL12_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL12_SUW_S1(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_SUW_S1) | BF_CSU_CSL12_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL12_SSW_S1      (21)      //!< Bit position for CSU_CSL12_SSW_S1.
#define BM_CSU_CSL12_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL12_SSW_S1.

//! @brief Get value of CSU_CSL12_SSW_S1 from a register value.
#define BG_CSU_CSL12_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_SSW_S1) >> BP_CSU_CSL12_SSW_S1)

//! @brief Format value for bitfield CSU_CSL12_SSW_S1.
#define BF_CSU_CSL12_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_SSW_S1) & BM_CSU_CSL12_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL12_SSW_S1(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_SSW_S1) | BF_CSU_CSL12_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL12_NUW_S1      (22)      //!< Bit position for CSU_CSL12_NUW_S1.
#define BM_CSU_CSL12_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL12_NUW_S1.

//! @brief Get value of CSU_CSL12_NUW_S1 from a register value.
#define BG_CSU_CSL12_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_NUW_S1) >> BP_CSU_CSL12_NUW_S1)

//! @brief Format value for bitfield CSU_CSL12_NUW_S1.
#define BF_CSU_CSL12_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_NUW_S1) & BM_CSU_CSL12_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL12_NUW_S1(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_NUW_S1) | BF_CSU_CSL12_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL12_NSW_S1      (23)      //!< Bit position for CSU_CSL12_NSW_S1.
#define BM_CSU_CSL12_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL12_NSW_S1.

//! @brief Get value of CSU_CSL12_NSW_S1 from a register value.
#define BG_CSU_CSL12_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_NSW_S1) >> BP_CSU_CSL12_NSW_S1)

//! @brief Format value for bitfield CSU_CSL12_NSW_S1.
#define BF_CSU_CSL12_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_NSW_S1) & BM_CSU_CSL12_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL12_NSW_S1(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_NSW_S1) | BF_CSU_CSL12_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL12, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL12_LOCK_S1      (24)      //!< Bit position for CSU_CSL12_LOCK_S1.
#define BM_CSU_CSL12_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL12_LOCK_S1.

//! @brief Get value of CSU_CSL12_LOCK_S1 from a register value.
#define BG_CSU_CSL12_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL12_LOCK_S1) >> BP_CSU_CSL12_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL12_LOCK_S1.
#define BF_CSU_CSL12_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL12_LOCK_S1) & BM_CSU_CSL12_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL12_LOCK_S1(v)   (HW_CSU_CSL12_WR((HW_CSU_CSL12_RD() & ~BM_CSU_CSL12_LOCK_S1) | BF_CSU_CSL12_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL13 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL13 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl13
{
    reg32_t U;
    struct _hw_csu_csl13_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl13_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL13 register
 */
//@{
#define HW_CSU_CSL13_ADDR      (REGS_CSU_BASE + 0x34)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL13           (*(volatile hw_csu_csl13_t *) HW_CSU_CSL13_ADDR)
#define HW_CSU_CSL13_RD()      (HW_CSU_CSL13.U)
#define HW_CSU_CSL13_WR(v)     (HW_CSU_CSL13.U = (v))
#define HW_CSU_CSL13_SET(v)    (HW_CSU_CSL13_WR(HW_CSU_CSL13_RD() |  (v)))
#define HW_CSU_CSL13_CLR(v)    (HW_CSU_CSL13_WR(HW_CSU_CSL13_RD() & ~(v)))
#define HW_CSU_CSL13_TOG(v)    (HW_CSU_CSL13_WR(HW_CSU_CSL13_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL13 bitfields
 */

/*! @name Register CSU_CSL13, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL13_SUR_S2      (0)      //!< Bit position for CSU_CSL13_SUR_S2.
#define BM_CSU_CSL13_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL13_SUR_S2.

//! @brief Get value of CSU_CSL13_SUR_S2 from a register value.
#define BG_CSU_CSL13_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_SUR_S2) >> BP_CSU_CSL13_SUR_S2)

//! @brief Format value for bitfield CSU_CSL13_SUR_S2.
#define BF_CSU_CSL13_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_SUR_S2) & BM_CSU_CSL13_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL13_SUR_S2(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_SUR_S2) | BF_CSU_CSL13_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL13_SSR_S2      (1)      //!< Bit position for CSU_CSL13_SSR_S2.
#define BM_CSU_CSL13_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL13_SSR_S2.

//! @brief Get value of CSU_CSL13_SSR_S2 from a register value.
#define BG_CSU_CSL13_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_SSR_S2) >> BP_CSU_CSL13_SSR_S2)

//! @brief Format value for bitfield CSU_CSL13_SSR_S2.
#define BF_CSU_CSL13_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_SSR_S2) & BM_CSU_CSL13_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL13_SSR_S2(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_SSR_S2) | BF_CSU_CSL13_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL13_NUR_S2      (2)      //!< Bit position for CSU_CSL13_NUR_S2.
#define BM_CSU_CSL13_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL13_NUR_S2.

//! @brief Get value of CSU_CSL13_NUR_S2 from a register value.
#define BG_CSU_CSL13_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_NUR_S2) >> BP_CSU_CSL13_NUR_S2)

//! @brief Format value for bitfield CSU_CSL13_NUR_S2.
#define BF_CSU_CSL13_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_NUR_S2) & BM_CSU_CSL13_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL13_NUR_S2(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_NUR_S2) | BF_CSU_CSL13_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL13_NSR_S2      (3)      //!< Bit position for CSU_CSL13_NSR_S2.
#define BM_CSU_CSL13_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL13_NSR_S2.

//! @brief Get value of CSU_CSL13_NSR_S2 from a register value.
#define BG_CSU_CSL13_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_NSR_S2) >> BP_CSU_CSL13_NSR_S2)

//! @brief Format value for bitfield CSU_CSL13_NSR_S2.
#define BF_CSU_CSL13_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_NSR_S2) & BM_CSU_CSL13_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL13_NSR_S2(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_NSR_S2) | BF_CSU_CSL13_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL13_SUW_S2      (4)      //!< Bit position for CSU_CSL13_SUW_S2.
#define BM_CSU_CSL13_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL13_SUW_S2.

//! @brief Get value of CSU_CSL13_SUW_S2 from a register value.
#define BG_CSU_CSL13_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_SUW_S2) >> BP_CSU_CSL13_SUW_S2)

//! @brief Format value for bitfield CSU_CSL13_SUW_S2.
#define BF_CSU_CSL13_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_SUW_S2) & BM_CSU_CSL13_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL13_SUW_S2(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_SUW_S2) | BF_CSU_CSL13_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL13_SSW_S2      (5)      //!< Bit position for CSU_CSL13_SSW_S2.
#define BM_CSU_CSL13_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL13_SSW_S2.

//! @brief Get value of CSU_CSL13_SSW_S2 from a register value.
#define BG_CSU_CSL13_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_SSW_S2) >> BP_CSU_CSL13_SSW_S2)

//! @brief Format value for bitfield CSU_CSL13_SSW_S2.
#define BF_CSU_CSL13_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_SSW_S2) & BM_CSU_CSL13_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL13_SSW_S2(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_SSW_S2) | BF_CSU_CSL13_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL13_NUW_S2      (6)      //!< Bit position for CSU_CSL13_NUW_S2.
#define BM_CSU_CSL13_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL13_NUW_S2.

//! @brief Get value of CSU_CSL13_NUW_S2 from a register value.
#define BG_CSU_CSL13_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_NUW_S2) >> BP_CSU_CSL13_NUW_S2)

//! @brief Format value for bitfield CSU_CSL13_NUW_S2.
#define BF_CSU_CSL13_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_NUW_S2) & BM_CSU_CSL13_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL13_NUW_S2(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_NUW_S2) | BF_CSU_CSL13_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL13_NSW_S2      (7)      //!< Bit position for CSU_CSL13_NSW_S2.
#define BM_CSU_CSL13_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL13_NSW_S2.

//! @brief Get value of CSU_CSL13_NSW_S2 from a register value.
#define BG_CSU_CSL13_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_NSW_S2) >> BP_CSU_CSL13_NSW_S2)

//! @brief Format value for bitfield CSU_CSL13_NSW_S2.
#define BF_CSU_CSL13_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_NSW_S2) & BM_CSU_CSL13_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL13_NSW_S2(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_NSW_S2) | BF_CSU_CSL13_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL13_LOCK_S2      (8)      //!< Bit position for CSU_CSL13_LOCK_S2.
#define BM_CSU_CSL13_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL13_LOCK_S2.

//! @brief Get value of CSU_CSL13_LOCK_S2 from a register value.
#define BG_CSU_CSL13_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_LOCK_S2) >> BP_CSU_CSL13_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL13_LOCK_S2.
#define BF_CSU_CSL13_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_LOCK_S2) & BM_CSU_CSL13_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL13_LOCK_S2(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_LOCK_S2) | BF_CSU_CSL13_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL13_SUR_S1      (16)      //!< Bit position for CSU_CSL13_SUR_S1.
#define BM_CSU_CSL13_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL13_SUR_S1.

//! @brief Get value of CSU_CSL13_SUR_S1 from a register value.
#define BG_CSU_CSL13_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_SUR_S1) >> BP_CSU_CSL13_SUR_S1)

//! @brief Format value for bitfield CSU_CSL13_SUR_S1.
#define BF_CSU_CSL13_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_SUR_S1) & BM_CSU_CSL13_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL13_SUR_S1(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_SUR_S1) | BF_CSU_CSL13_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL13_SSR_S1      (17)      //!< Bit position for CSU_CSL13_SSR_S1.
#define BM_CSU_CSL13_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL13_SSR_S1.

//! @brief Get value of CSU_CSL13_SSR_S1 from a register value.
#define BG_CSU_CSL13_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_SSR_S1) >> BP_CSU_CSL13_SSR_S1)

//! @brief Format value for bitfield CSU_CSL13_SSR_S1.
#define BF_CSU_CSL13_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_SSR_S1) & BM_CSU_CSL13_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL13_SSR_S1(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_SSR_S1) | BF_CSU_CSL13_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL13_NUR_S1      (18)      //!< Bit position for CSU_CSL13_NUR_S1.
#define BM_CSU_CSL13_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL13_NUR_S1.

//! @brief Get value of CSU_CSL13_NUR_S1 from a register value.
#define BG_CSU_CSL13_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_NUR_S1) >> BP_CSU_CSL13_NUR_S1)

//! @brief Format value for bitfield CSU_CSL13_NUR_S1.
#define BF_CSU_CSL13_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_NUR_S1) & BM_CSU_CSL13_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL13_NUR_S1(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_NUR_S1) | BF_CSU_CSL13_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL13_NSR_S1      (19)      //!< Bit position for CSU_CSL13_NSR_S1.
#define BM_CSU_CSL13_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL13_NSR_S1.

//! @brief Get value of CSU_CSL13_NSR_S1 from a register value.
#define BG_CSU_CSL13_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_NSR_S1) >> BP_CSU_CSL13_NSR_S1)

//! @brief Format value for bitfield CSU_CSL13_NSR_S1.
#define BF_CSU_CSL13_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_NSR_S1) & BM_CSU_CSL13_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL13_NSR_S1(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_NSR_S1) | BF_CSU_CSL13_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL13_SUW_S1      (20)      //!< Bit position for CSU_CSL13_SUW_S1.
#define BM_CSU_CSL13_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL13_SUW_S1.

//! @brief Get value of CSU_CSL13_SUW_S1 from a register value.
#define BG_CSU_CSL13_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_SUW_S1) >> BP_CSU_CSL13_SUW_S1)

//! @brief Format value for bitfield CSU_CSL13_SUW_S1.
#define BF_CSU_CSL13_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_SUW_S1) & BM_CSU_CSL13_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL13_SUW_S1(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_SUW_S1) | BF_CSU_CSL13_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL13_SSW_S1      (21)      //!< Bit position for CSU_CSL13_SSW_S1.
#define BM_CSU_CSL13_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL13_SSW_S1.

//! @brief Get value of CSU_CSL13_SSW_S1 from a register value.
#define BG_CSU_CSL13_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_SSW_S1) >> BP_CSU_CSL13_SSW_S1)

//! @brief Format value for bitfield CSU_CSL13_SSW_S1.
#define BF_CSU_CSL13_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_SSW_S1) & BM_CSU_CSL13_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL13_SSW_S1(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_SSW_S1) | BF_CSU_CSL13_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL13_NUW_S1      (22)      //!< Bit position for CSU_CSL13_NUW_S1.
#define BM_CSU_CSL13_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL13_NUW_S1.

//! @brief Get value of CSU_CSL13_NUW_S1 from a register value.
#define BG_CSU_CSL13_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_NUW_S1) >> BP_CSU_CSL13_NUW_S1)

//! @brief Format value for bitfield CSU_CSL13_NUW_S1.
#define BF_CSU_CSL13_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_NUW_S1) & BM_CSU_CSL13_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL13_NUW_S1(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_NUW_S1) | BF_CSU_CSL13_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL13_NSW_S1      (23)      //!< Bit position for CSU_CSL13_NSW_S1.
#define BM_CSU_CSL13_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL13_NSW_S1.

//! @brief Get value of CSU_CSL13_NSW_S1 from a register value.
#define BG_CSU_CSL13_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_NSW_S1) >> BP_CSU_CSL13_NSW_S1)

//! @brief Format value for bitfield CSU_CSL13_NSW_S1.
#define BF_CSU_CSL13_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_NSW_S1) & BM_CSU_CSL13_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL13_NSW_S1(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_NSW_S1) | BF_CSU_CSL13_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL13, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL13_LOCK_S1      (24)      //!< Bit position for CSU_CSL13_LOCK_S1.
#define BM_CSU_CSL13_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL13_LOCK_S1.

//! @brief Get value of CSU_CSL13_LOCK_S1 from a register value.
#define BG_CSU_CSL13_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL13_LOCK_S1) >> BP_CSU_CSL13_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL13_LOCK_S1.
#define BF_CSU_CSL13_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL13_LOCK_S1) & BM_CSU_CSL13_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL13_LOCK_S1(v)   (HW_CSU_CSL13_WR((HW_CSU_CSL13_RD() & ~BM_CSU_CSL13_LOCK_S1) | BF_CSU_CSL13_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL14 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL14 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl14
{
    reg32_t U;
    struct _hw_csu_csl14_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl14_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL14 register
 */
//@{
#define HW_CSU_CSL14_ADDR      (REGS_CSU_BASE + 0x38)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL14           (*(volatile hw_csu_csl14_t *) HW_CSU_CSL14_ADDR)
#define HW_CSU_CSL14_RD()      (HW_CSU_CSL14.U)
#define HW_CSU_CSL14_WR(v)     (HW_CSU_CSL14.U = (v))
#define HW_CSU_CSL14_SET(v)    (HW_CSU_CSL14_WR(HW_CSU_CSL14_RD() |  (v)))
#define HW_CSU_CSL14_CLR(v)    (HW_CSU_CSL14_WR(HW_CSU_CSL14_RD() & ~(v)))
#define HW_CSU_CSL14_TOG(v)    (HW_CSU_CSL14_WR(HW_CSU_CSL14_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL14 bitfields
 */

/*! @name Register CSU_CSL14, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL14_SUR_S2      (0)      //!< Bit position for CSU_CSL14_SUR_S2.
#define BM_CSU_CSL14_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL14_SUR_S2.

//! @brief Get value of CSU_CSL14_SUR_S2 from a register value.
#define BG_CSU_CSL14_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_SUR_S2) >> BP_CSU_CSL14_SUR_S2)

//! @brief Format value for bitfield CSU_CSL14_SUR_S2.
#define BF_CSU_CSL14_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_SUR_S2) & BM_CSU_CSL14_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL14_SUR_S2(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_SUR_S2) | BF_CSU_CSL14_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL14_SSR_S2      (1)      //!< Bit position for CSU_CSL14_SSR_S2.
#define BM_CSU_CSL14_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL14_SSR_S2.

//! @brief Get value of CSU_CSL14_SSR_S2 from a register value.
#define BG_CSU_CSL14_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_SSR_S2) >> BP_CSU_CSL14_SSR_S2)

//! @brief Format value for bitfield CSU_CSL14_SSR_S2.
#define BF_CSU_CSL14_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_SSR_S2) & BM_CSU_CSL14_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL14_SSR_S2(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_SSR_S2) | BF_CSU_CSL14_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL14_NUR_S2      (2)      //!< Bit position for CSU_CSL14_NUR_S2.
#define BM_CSU_CSL14_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL14_NUR_S2.

//! @brief Get value of CSU_CSL14_NUR_S2 from a register value.
#define BG_CSU_CSL14_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_NUR_S2) >> BP_CSU_CSL14_NUR_S2)

//! @brief Format value for bitfield CSU_CSL14_NUR_S2.
#define BF_CSU_CSL14_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_NUR_S2) & BM_CSU_CSL14_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL14_NUR_S2(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_NUR_S2) | BF_CSU_CSL14_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL14_NSR_S2      (3)      //!< Bit position for CSU_CSL14_NSR_S2.
#define BM_CSU_CSL14_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL14_NSR_S2.

//! @brief Get value of CSU_CSL14_NSR_S2 from a register value.
#define BG_CSU_CSL14_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_NSR_S2) >> BP_CSU_CSL14_NSR_S2)

//! @brief Format value for bitfield CSU_CSL14_NSR_S2.
#define BF_CSU_CSL14_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_NSR_S2) & BM_CSU_CSL14_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL14_NSR_S2(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_NSR_S2) | BF_CSU_CSL14_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL14_SUW_S2      (4)      //!< Bit position for CSU_CSL14_SUW_S2.
#define BM_CSU_CSL14_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL14_SUW_S2.

//! @brief Get value of CSU_CSL14_SUW_S2 from a register value.
#define BG_CSU_CSL14_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_SUW_S2) >> BP_CSU_CSL14_SUW_S2)

//! @brief Format value for bitfield CSU_CSL14_SUW_S2.
#define BF_CSU_CSL14_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_SUW_S2) & BM_CSU_CSL14_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL14_SUW_S2(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_SUW_S2) | BF_CSU_CSL14_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL14_SSW_S2      (5)      //!< Bit position for CSU_CSL14_SSW_S2.
#define BM_CSU_CSL14_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL14_SSW_S2.

//! @brief Get value of CSU_CSL14_SSW_S2 from a register value.
#define BG_CSU_CSL14_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_SSW_S2) >> BP_CSU_CSL14_SSW_S2)

//! @brief Format value for bitfield CSU_CSL14_SSW_S2.
#define BF_CSU_CSL14_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_SSW_S2) & BM_CSU_CSL14_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL14_SSW_S2(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_SSW_S2) | BF_CSU_CSL14_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL14_NUW_S2      (6)      //!< Bit position for CSU_CSL14_NUW_S2.
#define BM_CSU_CSL14_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL14_NUW_S2.

//! @brief Get value of CSU_CSL14_NUW_S2 from a register value.
#define BG_CSU_CSL14_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_NUW_S2) >> BP_CSU_CSL14_NUW_S2)

//! @brief Format value for bitfield CSU_CSL14_NUW_S2.
#define BF_CSU_CSL14_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_NUW_S2) & BM_CSU_CSL14_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL14_NUW_S2(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_NUW_S2) | BF_CSU_CSL14_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL14_NSW_S2      (7)      //!< Bit position for CSU_CSL14_NSW_S2.
#define BM_CSU_CSL14_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL14_NSW_S2.

//! @brief Get value of CSU_CSL14_NSW_S2 from a register value.
#define BG_CSU_CSL14_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_NSW_S2) >> BP_CSU_CSL14_NSW_S2)

//! @brief Format value for bitfield CSU_CSL14_NSW_S2.
#define BF_CSU_CSL14_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_NSW_S2) & BM_CSU_CSL14_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL14_NSW_S2(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_NSW_S2) | BF_CSU_CSL14_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL14_LOCK_S2      (8)      //!< Bit position for CSU_CSL14_LOCK_S2.
#define BM_CSU_CSL14_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL14_LOCK_S2.

//! @brief Get value of CSU_CSL14_LOCK_S2 from a register value.
#define BG_CSU_CSL14_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_LOCK_S2) >> BP_CSU_CSL14_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL14_LOCK_S2.
#define BF_CSU_CSL14_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_LOCK_S2) & BM_CSU_CSL14_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL14_LOCK_S2(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_LOCK_S2) | BF_CSU_CSL14_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL14_SUR_S1      (16)      //!< Bit position for CSU_CSL14_SUR_S1.
#define BM_CSU_CSL14_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL14_SUR_S1.

//! @brief Get value of CSU_CSL14_SUR_S1 from a register value.
#define BG_CSU_CSL14_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_SUR_S1) >> BP_CSU_CSL14_SUR_S1)

//! @brief Format value for bitfield CSU_CSL14_SUR_S1.
#define BF_CSU_CSL14_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_SUR_S1) & BM_CSU_CSL14_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL14_SUR_S1(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_SUR_S1) | BF_CSU_CSL14_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL14_SSR_S1      (17)      //!< Bit position for CSU_CSL14_SSR_S1.
#define BM_CSU_CSL14_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL14_SSR_S1.

//! @brief Get value of CSU_CSL14_SSR_S1 from a register value.
#define BG_CSU_CSL14_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_SSR_S1) >> BP_CSU_CSL14_SSR_S1)

//! @brief Format value for bitfield CSU_CSL14_SSR_S1.
#define BF_CSU_CSL14_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_SSR_S1) & BM_CSU_CSL14_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL14_SSR_S1(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_SSR_S1) | BF_CSU_CSL14_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL14_NUR_S1      (18)      //!< Bit position for CSU_CSL14_NUR_S1.
#define BM_CSU_CSL14_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL14_NUR_S1.

//! @brief Get value of CSU_CSL14_NUR_S1 from a register value.
#define BG_CSU_CSL14_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_NUR_S1) >> BP_CSU_CSL14_NUR_S1)

//! @brief Format value for bitfield CSU_CSL14_NUR_S1.
#define BF_CSU_CSL14_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_NUR_S1) & BM_CSU_CSL14_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL14_NUR_S1(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_NUR_S1) | BF_CSU_CSL14_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL14_NSR_S1      (19)      //!< Bit position for CSU_CSL14_NSR_S1.
#define BM_CSU_CSL14_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL14_NSR_S1.

//! @brief Get value of CSU_CSL14_NSR_S1 from a register value.
#define BG_CSU_CSL14_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_NSR_S1) >> BP_CSU_CSL14_NSR_S1)

//! @brief Format value for bitfield CSU_CSL14_NSR_S1.
#define BF_CSU_CSL14_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_NSR_S1) & BM_CSU_CSL14_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL14_NSR_S1(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_NSR_S1) | BF_CSU_CSL14_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL14_SUW_S1      (20)      //!< Bit position for CSU_CSL14_SUW_S1.
#define BM_CSU_CSL14_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL14_SUW_S1.

//! @brief Get value of CSU_CSL14_SUW_S1 from a register value.
#define BG_CSU_CSL14_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_SUW_S1) >> BP_CSU_CSL14_SUW_S1)

//! @brief Format value for bitfield CSU_CSL14_SUW_S1.
#define BF_CSU_CSL14_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_SUW_S1) & BM_CSU_CSL14_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL14_SUW_S1(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_SUW_S1) | BF_CSU_CSL14_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL14_SSW_S1      (21)      //!< Bit position for CSU_CSL14_SSW_S1.
#define BM_CSU_CSL14_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL14_SSW_S1.

//! @brief Get value of CSU_CSL14_SSW_S1 from a register value.
#define BG_CSU_CSL14_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_SSW_S1) >> BP_CSU_CSL14_SSW_S1)

//! @brief Format value for bitfield CSU_CSL14_SSW_S1.
#define BF_CSU_CSL14_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_SSW_S1) & BM_CSU_CSL14_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL14_SSW_S1(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_SSW_S1) | BF_CSU_CSL14_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL14_NUW_S1      (22)      //!< Bit position for CSU_CSL14_NUW_S1.
#define BM_CSU_CSL14_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL14_NUW_S1.

//! @brief Get value of CSU_CSL14_NUW_S1 from a register value.
#define BG_CSU_CSL14_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_NUW_S1) >> BP_CSU_CSL14_NUW_S1)

//! @brief Format value for bitfield CSU_CSL14_NUW_S1.
#define BF_CSU_CSL14_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_NUW_S1) & BM_CSU_CSL14_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL14_NUW_S1(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_NUW_S1) | BF_CSU_CSL14_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL14_NSW_S1      (23)      //!< Bit position for CSU_CSL14_NSW_S1.
#define BM_CSU_CSL14_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL14_NSW_S1.

//! @brief Get value of CSU_CSL14_NSW_S1 from a register value.
#define BG_CSU_CSL14_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_NSW_S1) >> BP_CSU_CSL14_NSW_S1)

//! @brief Format value for bitfield CSU_CSL14_NSW_S1.
#define BF_CSU_CSL14_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_NSW_S1) & BM_CSU_CSL14_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL14_NSW_S1(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_NSW_S1) | BF_CSU_CSL14_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL14, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL14_LOCK_S1      (24)      //!< Bit position for CSU_CSL14_LOCK_S1.
#define BM_CSU_CSL14_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL14_LOCK_S1.

//! @brief Get value of CSU_CSL14_LOCK_S1 from a register value.
#define BG_CSU_CSL14_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL14_LOCK_S1) >> BP_CSU_CSL14_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL14_LOCK_S1.
#define BF_CSU_CSL14_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL14_LOCK_S1) & BM_CSU_CSL14_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL14_LOCK_S1(v)   (HW_CSU_CSL14_WR((HW_CSU_CSL14_RD() & ~BM_CSU_CSL14_LOCK_S1) | BF_CSU_CSL14_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL15 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL15 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl15
{
    reg32_t U;
    struct _hw_csu_csl15_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl15_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL15 register
 */
//@{
#define HW_CSU_CSL15_ADDR      (REGS_CSU_BASE + 0x3c)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL15           (*(volatile hw_csu_csl15_t *) HW_CSU_CSL15_ADDR)
#define HW_CSU_CSL15_RD()      (HW_CSU_CSL15.U)
#define HW_CSU_CSL15_WR(v)     (HW_CSU_CSL15.U = (v))
#define HW_CSU_CSL15_SET(v)    (HW_CSU_CSL15_WR(HW_CSU_CSL15_RD() |  (v)))
#define HW_CSU_CSL15_CLR(v)    (HW_CSU_CSL15_WR(HW_CSU_CSL15_RD() & ~(v)))
#define HW_CSU_CSL15_TOG(v)    (HW_CSU_CSL15_WR(HW_CSU_CSL15_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL15 bitfields
 */

/*! @name Register CSU_CSL15, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL15_SUR_S2      (0)      //!< Bit position for CSU_CSL15_SUR_S2.
#define BM_CSU_CSL15_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL15_SUR_S2.

//! @brief Get value of CSU_CSL15_SUR_S2 from a register value.
#define BG_CSU_CSL15_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_SUR_S2) >> BP_CSU_CSL15_SUR_S2)

//! @brief Format value for bitfield CSU_CSL15_SUR_S2.
#define BF_CSU_CSL15_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_SUR_S2) & BM_CSU_CSL15_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL15_SUR_S2(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_SUR_S2) | BF_CSU_CSL15_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL15_SSR_S2      (1)      //!< Bit position for CSU_CSL15_SSR_S2.
#define BM_CSU_CSL15_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL15_SSR_S2.

//! @brief Get value of CSU_CSL15_SSR_S2 from a register value.
#define BG_CSU_CSL15_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_SSR_S2) >> BP_CSU_CSL15_SSR_S2)

//! @brief Format value for bitfield CSU_CSL15_SSR_S2.
#define BF_CSU_CSL15_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_SSR_S2) & BM_CSU_CSL15_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL15_SSR_S2(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_SSR_S2) | BF_CSU_CSL15_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL15_NUR_S2      (2)      //!< Bit position for CSU_CSL15_NUR_S2.
#define BM_CSU_CSL15_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL15_NUR_S2.

//! @brief Get value of CSU_CSL15_NUR_S2 from a register value.
#define BG_CSU_CSL15_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_NUR_S2) >> BP_CSU_CSL15_NUR_S2)

//! @brief Format value for bitfield CSU_CSL15_NUR_S2.
#define BF_CSU_CSL15_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_NUR_S2) & BM_CSU_CSL15_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL15_NUR_S2(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_NUR_S2) | BF_CSU_CSL15_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL15_NSR_S2      (3)      //!< Bit position for CSU_CSL15_NSR_S2.
#define BM_CSU_CSL15_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL15_NSR_S2.

//! @brief Get value of CSU_CSL15_NSR_S2 from a register value.
#define BG_CSU_CSL15_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_NSR_S2) >> BP_CSU_CSL15_NSR_S2)

//! @brief Format value for bitfield CSU_CSL15_NSR_S2.
#define BF_CSU_CSL15_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_NSR_S2) & BM_CSU_CSL15_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL15_NSR_S2(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_NSR_S2) | BF_CSU_CSL15_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL15_SUW_S2      (4)      //!< Bit position for CSU_CSL15_SUW_S2.
#define BM_CSU_CSL15_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL15_SUW_S2.

//! @brief Get value of CSU_CSL15_SUW_S2 from a register value.
#define BG_CSU_CSL15_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_SUW_S2) >> BP_CSU_CSL15_SUW_S2)

//! @brief Format value for bitfield CSU_CSL15_SUW_S2.
#define BF_CSU_CSL15_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_SUW_S2) & BM_CSU_CSL15_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL15_SUW_S2(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_SUW_S2) | BF_CSU_CSL15_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL15_SSW_S2      (5)      //!< Bit position for CSU_CSL15_SSW_S2.
#define BM_CSU_CSL15_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL15_SSW_S2.

//! @brief Get value of CSU_CSL15_SSW_S2 from a register value.
#define BG_CSU_CSL15_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_SSW_S2) >> BP_CSU_CSL15_SSW_S2)

//! @brief Format value for bitfield CSU_CSL15_SSW_S2.
#define BF_CSU_CSL15_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_SSW_S2) & BM_CSU_CSL15_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL15_SSW_S2(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_SSW_S2) | BF_CSU_CSL15_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL15_NUW_S2      (6)      //!< Bit position for CSU_CSL15_NUW_S2.
#define BM_CSU_CSL15_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL15_NUW_S2.

//! @brief Get value of CSU_CSL15_NUW_S2 from a register value.
#define BG_CSU_CSL15_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_NUW_S2) >> BP_CSU_CSL15_NUW_S2)

//! @brief Format value for bitfield CSU_CSL15_NUW_S2.
#define BF_CSU_CSL15_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_NUW_S2) & BM_CSU_CSL15_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL15_NUW_S2(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_NUW_S2) | BF_CSU_CSL15_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL15_NSW_S2      (7)      //!< Bit position for CSU_CSL15_NSW_S2.
#define BM_CSU_CSL15_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL15_NSW_S2.

//! @brief Get value of CSU_CSL15_NSW_S2 from a register value.
#define BG_CSU_CSL15_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_NSW_S2) >> BP_CSU_CSL15_NSW_S2)

//! @brief Format value for bitfield CSU_CSL15_NSW_S2.
#define BF_CSU_CSL15_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_NSW_S2) & BM_CSU_CSL15_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL15_NSW_S2(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_NSW_S2) | BF_CSU_CSL15_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL15_LOCK_S2      (8)      //!< Bit position for CSU_CSL15_LOCK_S2.
#define BM_CSU_CSL15_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL15_LOCK_S2.

//! @brief Get value of CSU_CSL15_LOCK_S2 from a register value.
#define BG_CSU_CSL15_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_LOCK_S2) >> BP_CSU_CSL15_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL15_LOCK_S2.
#define BF_CSU_CSL15_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_LOCK_S2) & BM_CSU_CSL15_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL15_LOCK_S2(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_LOCK_S2) | BF_CSU_CSL15_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL15_SUR_S1      (16)      //!< Bit position for CSU_CSL15_SUR_S1.
#define BM_CSU_CSL15_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL15_SUR_S1.

//! @brief Get value of CSU_CSL15_SUR_S1 from a register value.
#define BG_CSU_CSL15_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_SUR_S1) >> BP_CSU_CSL15_SUR_S1)

//! @brief Format value for bitfield CSU_CSL15_SUR_S1.
#define BF_CSU_CSL15_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_SUR_S1) & BM_CSU_CSL15_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL15_SUR_S1(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_SUR_S1) | BF_CSU_CSL15_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL15_SSR_S1      (17)      //!< Bit position for CSU_CSL15_SSR_S1.
#define BM_CSU_CSL15_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL15_SSR_S1.

//! @brief Get value of CSU_CSL15_SSR_S1 from a register value.
#define BG_CSU_CSL15_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_SSR_S1) >> BP_CSU_CSL15_SSR_S1)

//! @brief Format value for bitfield CSU_CSL15_SSR_S1.
#define BF_CSU_CSL15_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_SSR_S1) & BM_CSU_CSL15_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL15_SSR_S1(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_SSR_S1) | BF_CSU_CSL15_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL15_NUR_S1      (18)      //!< Bit position for CSU_CSL15_NUR_S1.
#define BM_CSU_CSL15_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL15_NUR_S1.

//! @brief Get value of CSU_CSL15_NUR_S1 from a register value.
#define BG_CSU_CSL15_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_NUR_S1) >> BP_CSU_CSL15_NUR_S1)

//! @brief Format value for bitfield CSU_CSL15_NUR_S1.
#define BF_CSU_CSL15_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_NUR_S1) & BM_CSU_CSL15_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL15_NUR_S1(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_NUR_S1) | BF_CSU_CSL15_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL15_NSR_S1      (19)      //!< Bit position for CSU_CSL15_NSR_S1.
#define BM_CSU_CSL15_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL15_NSR_S1.

//! @brief Get value of CSU_CSL15_NSR_S1 from a register value.
#define BG_CSU_CSL15_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_NSR_S1) >> BP_CSU_CSL15_NSR_S1)

//! @brief Format value for bitfield CSU_CSL15_NSR_S1.
#define BF_CSU_CSL15_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_NSR_S1) & BM_CSU_CSL15_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL15_NSR_S1(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_NSR_S1) | BF_CSU_CSL15_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL15_SUW_S1      (20)      //!< Bit position for CSU_CSL15_SUW_S1.
#define BM_CSU_CSL15_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL15_SUW_S1.

//! @brief Get value of CSU_CSL15_SUW_S1 from a register value.
#define BG_CSU_CSL15_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_SUW_S1) >> BP_CSU_CSL15_SUW_S1)

//! @brief Format value for bitfield CSU_CSL15_SUW_S1.
#define BF_CSU_CSL15_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_SUW_S1) & BM_CSU_CSL15_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL15_SUW_S1(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_SUW_S1) | BF_CSU_CSL15_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL15_SSW_S1      (21)      //!< Bit position for CSU_CSL15_SSW_S1.
#define BM_CSU_CSL15_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL15_SSW_S1.

//! @brief Get value of CSU_CSL15_SSW_S1 from a register value.
#define BG_CSU_CSL15_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_SSW_S1) >> BP_CSU_CSL15_SSW_S1)

//! @brief Format value for bitfield CSU_CSL15_SSW_S1.
#define BF_CSU_CSL15_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_SSW_S1) & BM_CSU_CSL15_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL15_SSW_S1(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_SSW_S1) | BF_CSU_CSL15_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL15_NUW_S1      (22)      //!< Bit position for CSU_CSL15_NUW_S1.
#define BM_CSU_CSL15_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL15_NUW_S1.

//! @brief Get value of CSU_CSL15_NUW_S1 from a register value.
#define BG_CSU_CSL15_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_NUW_S1) >> BP_CSU_CSL15_NUW_S1)

//! @brief Format value for bitfield CSU_CSL15_NUW_S1.
#define BF_CSU_CSL15_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_NUW_S1) & BM_CSU_CSL15_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL15_NUW_S1(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_NUW_S1) | BF_CSU_CSL15_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL15_NSW_S1      (23)      //!< Bit position for CSU_CSL15_NSW_S1.
#define BM_CSU_CSL15_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL15_NSW_S1.

//! @brief Get value of CSU_CSL15_NSW_S1 from a register value.
#define BG_CSU_CSL15_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_NSW_S1) >> BP_CSU_CSL15_NSW_S1)

//! @brief Format value for bitfield CSU_CSL15_NSW_S1.
#define BF_CSU_CSL15_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_NSW_S1) & BM_CSU_CSL15_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL15_NSW_S1(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_NSW_S1) | BF_CSU_CSL15_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL15, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL15_LOCK_S1      (24)      //!< Bit position for CSU_CSL15_LOCK_S1.
#define BM_CSU_CSL15_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL15_LOCK_S1.

//! @brief Get value of CSU_CSL15_LOCK_S1 from a register value.
#define BG_CSU_CSL15_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL15_LOCK_S1) >> BP_CSU_CSL15_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL15_LOCK_S1.
#define BF_CSU_CSL15_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL15_LOCK_S1) & BM_CSU_CSL15_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL15_LOCK_S1(v)   (HW_CSU_CSL15_WR((HW_CSU_CSL15_RD() & ~BM_CSU_CSL15_LOCK_S1) | BF_CSU_CSL15_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL16 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL16 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl16
{
    reg32_t U;
    struct _hw_csu_csl16_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl16_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL16 register
 */
//@{
#define HW_CSU_CSL16_ADDR      (REGS_CSU_BASE + 0x40)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL16           (*(volatile hw_csu_csl16_t *) HW_CSU_CSL16_ADDR)
#define HW_CSU_CSL16_RD()      (HW_CSU_CSL16.U)
#define HW_CSU_CSL16_WR(v)     (HW_CSU_CSL16.U = (v))
#define HW_CSU_CSL16_SET(v)    (HW_CSU_CSL16_WR(HW_CSU_CSL16_RD() |  (v)))
#define HW_CSU_CSL16_CLR(v)    (HW_CSU_CSL16_WR(HW_CSU_CSL16_RD() & ~(v)))
#define HW_CSU_CSL16_TOG(v)    (HW_CSU_CSL16_WR(HW_CSU_CSL16_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL16 bitfields
 */

/*! @name Register CSU_CSL16, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL16_SUR_S2      (0)      //!< Bit position for CSU_CSL16_SUR_S2.
#define BM_CSU_CSL16_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL16_SUR_S2.

//! @brief Get value of CSU_CSL16_SUR_S2 from a register value.
#define BG_CSU_CSL16_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_SUR_S2) >> BP_CSU_CSL16_SUR_S2)

//! @brief Format value for bitfield CSU_CSL16_SUR_S2.
#define BF_CSU_CSL16_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_SUR_S2) & BM_CSU_CSL16_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL16_SUR_S2(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_SUR_S2) | BF_CSU_CSL16_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL16_SSR_S2      (1)      //!< Bit position for CSU_CSL16_SSR_S2.
#define BM_CSU_CSL16_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL16_SSR_S2.

//! @brief Get value of CSU_CSL16_SSR_S2 from a register value.
#define BG_CSU_CSL16_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_SSR_S2) >> BP_CSU_CSL16_SSR_S2)

//! @brief Format value for bitfield CSU_CSL16_SSR_S2.
#define BF_CSU_CSL16_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_SSR_S2) & BM_CSU_CSL16_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL16_SSR_S2(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_SSR_S2) | BF_CSU_CSL16_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL16_NUR_S2      (2)      //!< Bit position for CSU_CSL16_NUR_S2.
#define BM_CSU_CSL16_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL16_NUR_S2.

//! @brief Get value of CSU_CSL16_NUR_S2 from a register value.
#define BG_CSU_CSL16_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_NUR_S2) >> BP_CSU_CSL16_NUR_S2)

//! @brief Format value for bitfield CSU_CSL16_NUR_S2.
#define BF_CSU_CSL16_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_NUR_S2) & BM_CSU_CSL16_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL16_NUR_S2(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_NUR_S2) | BF_CSU_CSL16_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL16_NSR_S2      (3)      //!< Bit position for CSU_CSL16_NSR_S2.
#define BM_CSU_CSL16_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL16_NSR_S2.

//! @brief Get value of CSU_CSL16_NSR_S2 from a register value.
#define BG_CSU_CSL16_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_NSR_S2) >> BP_CSU_CSL16_NSR_S2)

//! @brief Format value for bitfield CSU_CSL16_NSR_S2.
#define BF_CSU_CSL16_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_NSR_S2) & BM_CSU_CSL16_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL16_NSR_S2(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_NSR_S2) | BF_CSU_CSL16_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL16_SUW_S2      (4)      //!< Bit position for CSU_CSL16_SUW_S2.
#define BM_CSU_CSL16_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL16_SUW_S2.

//! @brief Get value of CSU_CSL16_SUW_S2 from a register value.
#define BG_CSU_CSL16_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_SUW_S2) >> BP_CSU_CSL16_SUW_S2)

//! @brief Format value for bitfield CSU_CSL16_SUW_S2.
#define BF_CSU_CSL16_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_SUW_S2) & BM_CSU_CSL16_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL16_SUW_S2(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_SUW_S2) | BF_CSU_CSL16_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL16_SSW_S2      (5)      //!< Bit position for CSU_CSL16_SSW_S2.
#define BM_CSU_CSL16_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL16_SSW_S2.

//! @brief Get value of CSU_CSL16_SSW_S2 from a register value.
#define BG_CSU_CSL16_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_SSW_S2) >> BP_CSU_CSL16_SSW_S2)

//! @brief Format value for bitfield CSU_CSL16_SSW_S2.
#define BF_CSU_CSL16_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_SSW_S2) & BM_CSU_CSL16_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL16_SSW_S2(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_SSW_S2) | BF_CSU_CSL16_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL16_NUW_S2      (6)      //!< Bit position for CSU_CSL16_NUW_S2.
#define BM_CSU_CSL16_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL16_NUW_S2.

//! @brief Get value of CSU_CSL16_NUW_S2 from a register value.
#define BG_CSU_CSL16_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_NUW_S2) >> BP_CSU_CSL16_NUW_S2)

//! @brief Format value for bitfield CSU_CSL16_NUW_S2.
#define BF_CSU_CSL16_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_NUW_S2) & BM_CSU_CSL16_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL16_NUW_S2(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_NUW_S2) | BF_CSU_CSL16_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL16_NSW_S2      (7)      //!< Bit position for CSU_CSL16_NSW_S2.
#define BM_CSU_CSL16_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL16_NSW_S2.

//! @brief Get value of CSU_CSL16_NSW_S2 from a register value.
#define BG_CSU_CSL16_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_NSW_S2) >> BP_CSU_CSL16_NSW_S2)

//! @brief Format value for bitfield CSU_CSL16_NSW_S2.
#define BF_CSU_CSL16_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_NSW_S2) & BM_CSU_CSL16_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL16_NSW_S2(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_NSW_S2) | BF_CSU_CSL16_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL16_LOCK_S2      (8)      //!< Bit position for CSU_CSL16_LOCK_S2.
#define BM_CSU_CSL16_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL16_LOCK_S2.

//! @brief Get value of CSU_CSL16_LOCK_S2 from a register value.
#define BG_CSU_CSL16_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_LOCK_S2) >> BP_CSU_CSL16_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL16_LOCK_S2.
#define BF_CSU_CSL16_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_LOCK_S2) & BM_CSU_CSL16_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL16_LOCK_S2(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_LOCK_S2) | BF_CSU_CSL16_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL16_SUR_S1      (16)      //!< Bit position for CSU_CSL16_SUR_S1.
#define BM_CSU_CSL16_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL16_SUR_S1.

//! @brief Get value of CSU_CSL16_SUR_S1 from a register value.
#define BG_CSU_CSL16_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_SUR_S1) >> BP_CSU_CSL16_SUR_S1)

//! @brief Format value for bitfield CSU_CSL16_SUR_S1.
#define BF_CSU_CSL16_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_SUR_S1) & BM_CSU_CSL16_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL16_SUR_S1(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_SUR_S1) | BF_CSU_CSL16_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL16_SSR_S1      (17)      //!< Bit position for CSU_CSL16_SSR_S1.
#define BM_CSU_CSL16_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL16_SSR_S1.

//! @brief Get value of CSU_CSL16_SSR_S1 from a register value.
#define BG_CSU_CSL16_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_SSR_S1) >> BP_CSU_CSL16_SSR_S1)

//! @brief Format value for bitfield CSU_CSL16_SSR_S1.
#define BF_CSU_CSL16_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_SSR_S1) & BM_CSU_CSL16_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL16_SSR_S1(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_SSR_S1) | BF_CSU_CSL16_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL16_NUR_S1      (18)      //!< Bit position for CSU_CSL16_NUR_S1.
#define BM_CSU_CSL16_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL16_NUR_S1.

//! @brief Get value of CSU_CSL16_NUR_S1 from a register value.
#define BG_CSU_CSL16_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_NUR_S1) >> BP_CSU_CSL16_NUR_S1)

//! @brief Format value for bitfield CSU_CSL16_NUR_S1.
#define BF_CSU_CSL16_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_NUR_S1) & BM_CSU_CSL16_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL16_NUR_S1(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_NUR_S1) | BF_CSU_CSL16_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL16_NSR_S1      (19)      //!< Bit position for CSU_CSL16_NSR_S1.
#define BM_CSU_CSL16_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL16_NSR_S1.

//! @brief Get value of CSU_CSL16_NSR_S1 from a register value.
#define BG_CSU_CSL16_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_NSR_S1) >> BP_CSU_CSL16_NSR_S1)

//! @brief Format value for bitfield CSU_CSL16_NSR_S1.
#define BF_CSU_CSL16_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_NSR_S1) & BM_CSU_CSL16_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL16_NSR_S1(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_NSR_S1) | BF_CSU_CSL16_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL16_SUW_S1      (20)      //!< Bit position for CSU_CSL16_SUW_S1.
#define BM_CSU_CSL16_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL16_SUW_S1.

//! @brief Get value of CSU_CSL16_SUW_S1 from a register value.
#define BG_CSU_CSL16_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_SUW_S1) >> BP_CSU_CSL16_SUW_S1)

//! @brief Format value for bitfield CSU_CSL16_SUW_S1.
#define BF_CSU_CSL16_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_SUW_S1) & BM_CSU_CSL16_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL16_SUW_S1(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_SUW_S1) | BF_CSU_CSL16_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL16_SSW_S1      (21)      //!< Bit position for CSU_CSL16_SSW_S1.
#define BM_CSU_CSL16_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL16_SSW_S1.

//! @brief Get value of CSU_CSL16_SSW_S1 from a register value.
#define BG_CSU_CSL16_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_SSW_S1) >> BP_CSU_CSL16_SSW_S1)

//! @brief Format value for bitfield CSU_CSL16_SSW_S1.
#define BF_CSU_CSL16_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_SSW_S1) & BM_CSU_CSL16_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL16_SSW_S1(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_SSW_S1) | BF_CSU_CSL16_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL16_NUW_S1      (22)      //!< Bit position for CSU_CSL16_NUW_S1.
#define BM_CSU_CSL16_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL16_NUW_S1.

//! @brief Get value of CSU_CSL16_NUW_S1 from a register value.
#define BG_CSU_CSL16_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_NUW_S1) >> BP_CSU_CSL16_NUW_S1)

//! @brief Format value for bitfield CSU_CSL16_NUW_S1.
#define BF_CSU_CSL16_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_NUW_S1) & BM_CSU_CSL16_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL16_NUW_S1(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_NUW_S1) | BF_CSU_CSL16_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL16_NSW_S1      (23)      //!< Bit position for CSU_CSL16_NSW_S1.
#define BM_CSU_CSL16_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL16_NSW_S1.

//! @brief Get value of CSU_CSL16_NSW_S1 from a register value.
#define BG_CSU_CSL16_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_NSW_S1) >> BP_CSU_CSL16_NSW_S1)

//! @brief Format value for bitfield CSU_CSL16_NSW_S1.
#define BF_CSU_CSL16_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_NSW_S1) & BM_CSU_CSL16_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL16_NSW_S1(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_NSW_S1) | BF_CSU_CSL16_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL16, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL16_LOCK_S1      (24)      //!< Bit position for CSU_CSL16_LOCK_S1.
#define BM_CSU_CSL16_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL16_LOCK_S1.

//! @brief Get value of CSU_CSL16_LOCK_S1 from a register value.
#define BG_CSU_CSL16_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL16_LOCK_S1) >> BP_CSU_CSL16_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL16_LOCK_S1.
#define BF_CSU_CSL16_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL16_LOCK_S1) & BM_CSU_CSL16_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL16_LOCK_S1(v)   (HW_CSU_CSL16_WR((HW_CSU_CSL16_RD() & ~BM_CSU_CSL16_LOCK_S1) | BF_CSU_CSL16_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL17 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL17 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl17
{
    reg32_t U;
    struct _hw_csu_csl17_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl17_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL17 register
 */
//@{
#define HW_CSU_CSL17_ADDR      (REGS_CSU_BASE + 0x44)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL17           (*(volatile hw_csu_csl17_t *) HW_CSU_CSL17_ADDR)
#define HW_CSU_CSL17_RD()      (HW_CSU_CSL17.U)
#define HW_CSU_CSL17_WR(v)     (HW_CSU_CSL17.U = (v))
#define HW_CSU_CSL17_SET(v)    (HW_CSU_CSL17_WR(HW_CSU_CSL17_RD() |  (v)))
#define HW_CSU_CSL17_CLR(v)    (HW_CSU_CSL17_WR(HW_CSU_CSL17_RD() & ~(v)))
#define HW_CSU_CSL17_TOG(v)    (HW_CSU_CSL17_WR(HW_CSU_CSL17_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL17 bitfields
 */

/*! @name Register CSU_CSL17, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL17_SUR_S2      (0)      //!< Bit position for CSU_CSL17_SUR_S2.
#define BM_CSU_CSL17_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL17_SUR_S2.

//! @brief Get value of CSU_CSL17_SUR_S2 from a register value.
#define BG_CSU_CSL17_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_SUR_S2) >> BP_CSU_CSL17_SUR_S2)

//! @brief Format value for bitfield CSU_CSL17_SUR_S2.
#define BF_CSU_CSL17_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_SUR_S2) & BM_CSU_CSL17_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL17_SUR_S2(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_SUR_S2) | BF_CSU_CSL17_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL17_SSR_S2      (1)      //!< Bit position for CSU_CSL17_SSR_S2.
#define BM_CSU_CSL17_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL17_SSR_S2.

//! @brief Get value of CSU_CSL17_SSR_S2 from a register value.
#define BG_CSU_CSL17_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_SSR_S2) >> BP_CSU_CSL17_SSR_S2)

//! @brief Format value for bitfield CSU_CSL17_SSR_S2.
#define BF_CSU_CSL17_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_SSR_S2) & BM_CSU_CSL17_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL17_SSR_S2(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_SSR_S2) | BF_CSU_CSL17_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL17_NUR_S2      (2)      //!< Bit position for CSU_CSL17_NUR_S2.
#define BM_CSU_CSL17_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL17_NUR_S2.

//! @brief Get value of CSU_CSL17_NUR_S2 from a register value.
#define BG_CSU_CSL17_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_NUR_S2) >> BP_CSU_CSL17_NUR_S2)

//! @brief Format value for bitfield CSU_CSL17_NUR_S2.
#define BF_CSU_CSL17_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_NUR_S2) & BM_CSU_CSL17_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL17_NUR_S2(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_NUR_S2) | BF_CSU_CSL17_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL17_NSR_S2      (3)      //!< Bit position for CSU_CSL17_NSR_S2.
#define BM_CSU_CSL17_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL17_NSR_S2.

//! @brief Get value of CSU_CSL17_NSR_S2 from a register value.
#define BG_CSU_CSL17_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_NSR_S2) >> BP_CSU_CSL17_NSR_S2)

//! @brief Format value for bitfield CSU_CSL17_NSR_S2.
#define BF_CSU_CSL17_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_NSR_S2) & BM_CSU_CSL17_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL17_NSR_S2(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_NSR_S2) | BF_CSU_CSL17_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL17_SUW_S2      (4)      //!< Bit position for CSU_CSL17_SUW_S2.
#define BM_CSU_CSL17_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL17_SUW_S2.

//! @brief Get value of CSU_CSL17_SUW_S2 from a register value.
#define BG_CSU_CSL17_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_SUW_S2) >> BP_CSU_CSL17_SUW_S2)

//! @brief Format value for bitfield CSU_CSL17_SUW_S2.
#define BF_CSU_CSL17_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_SUW_S2) & BM_CSU_CSL17_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL17_SUW_S2(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_SUW_S2) | BF_CSU_CSL17_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL17_SSW_S2      (5)      //!< Bit position for CSU_CSL17_SSW_S2.
#define BM_CSU_CSL17_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL17_SSW_S2.

//! @brief Get value of CSU_CSL17_SSW_S2 from a register value.
#define BG_CSU_CSL17_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_SSW_S2) >> BP_CSU_CSL17_SSW_S2)

//! @brief Format value for bitfield CSU_CSL17_SSW_S2.
#define BF_CSU_CSL17_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_SSW_S2) & BM_CSU_CSL17_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL17_SSW_S2(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_SSW_S2) | BF_CSU_CSL17_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL17_NUW_S2      (6)      //!< Bit position for CSU_CSL17_NUW_S2.
#define BM_CSU_CSL17_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL17_NUW_S2.

//! @brief Get value of CSU_CSL17_NUW_S2 from a register value.
#define BG_CSU_CSL17_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_NUW_S2) >> BP_CSU_CSL17_NUW_S2)

//! @brief Format value for bitfield CSU_CSL17_NUW_S2.
#define BF_CSU_CSL17_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_NUW_S2) & BM_CSU_CSL17_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL17_NUW_S2(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_NUW_S2) | BF_CSU_CSL17_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL17_NSW_S2      (7)      //!< Bit position for CSU_CSL17_NSW_S2.
#define BM_CSU_CSL17_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL17_NSW_S2.

//! @brief Get value of CSU_CSL17_NSW_S2 from a register value.
#define BG_CSU_CSL17_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_NSW_S2) >> BP_CSU_CSL17_NSW_S2)

//! @brief Format value for bitfield CSU_CSL17_NSW_S2.
#define BF_CSU_CSL17_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_NSW_S2) & BM_CSU_CSL17_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL17_NSW_S2(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_NSW_S2) | BF_CSU_CSL17_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL17_LOCK_S2      (8)      //!< Bit position for CSU_CSL17_LOCK_S2.
#define BM_CSU_CSL17_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL17_LOCK_S2.

//! @brief Get value of CSU_CSL17_LOCK_S2 from a register value.
#define BG_CSU_CSL17_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_LOCK_S2) >> BP_CSU_CSL17_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL17_LOCK_S2.
#define BF_CSU_CSL17_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_LOCK_S2) & BM_CSU_CSL17_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL17_LOCK_S2(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_LOCK_S2) | BF_CSU_CSL17_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL17_SUR_S1      (16)      //!< Bit position for CSU_CSL17_SUR_S1.
#define BM_CSU_CSL17_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL17_SUR_S1.

//! @brief Get value of CSU_CSL17_SUR_S1 from a register value.
#define BG_CSU_CSL17_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_SUR_S1) >> BP_CSU_CSL17_SUR_S1)

//! @brief Format value for bitfield CSU_CSL17_SUR_S1.
#define BF_CSU_CSL17_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_SUR_S1) & BM_CSU_CSL17_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL17_SUR_S1(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_SUR_S1) | BF_CSU_CSL17_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL17_SSR_S1      (17)      //!< Bit position for CSU_CSL17_SSR_S1.
#define BM_CSU_CSL17_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL17_SSR_S1.

//! @brief Get value of CSU_CSL17_SSR_S1 from a register value.
#define BG_CSU_CSL17_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_SSR_S1) >> BP_CSU_CSL17_SSR_S1)

//! @brief Format value for bitfield CSU_CSL17_SSR_S1.
#define BF_CSU_CSL17_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_SSR_S1) & BM_CSU_CSL17_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL17_SSR_S1(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_SSR_S1) | BF_CSU_CSL17_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL17_NUR_S1      (18)      //!< Bit position for CSU_CSL17_NUR_S1.
#define BM_CSU_CSL17_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL17_NUR_S1.

//! @brief Get value of CSU_CSL17_NUR_S1 from a register value.
#define BG_CSU_CSL17_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_NUR_S1) >> BP_CSU_CSL17_NUR_S1)

//! @brief Format value for bitfield CSU_CSL17_NUR_S1.
#define BF_CSU_CSL17_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_NUR_S1) & BM_CSU_CSL17_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL17_NUR_S1(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_NUR_S1) | BF_CSU_CSL17_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL17_NSR_S1      (19)      //!< Bit position for CSU_CSL17_NSR_S1.
#define BM_CSU_CSL17_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL17_NSR_S1.

//! @brief Get value of CSU_CSL17_NSR_S1 from a register value.
#define BG_CSU_CSL17_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_NSR_S1) >> BP_CSU_CSL17_NSR_S1)

//! @brief Format value for bitfield CSU_CSL17_NSR_S1.
#define BF_CSU_CSL17_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_NSR_S1) & BM_CSU_CSL17_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL17_NSR_S1(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_NSR_S1) | BF_CSU_CSL17_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL17_SUW_S1      (20)      //!< Bit position for CSU_CSL17_SUW_S1.
#define BM_CSU_CSL17_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL17_SUW_S1.

//! @brief Get value of CSU_CSL17_SUW_S1 from a register value.
#define BG_CSU_CSL17_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_SUW_S1) >> BP_CSU_CSL17_SUW_S1)

//! @brief Format value for bitfield CSU_CSL17_SUW_S1.
#define BF_CSU_CSL17_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_SUW_S1) & BM_CSU_CSL17_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL17_SUW_S1(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_SUW_S1) | BF_CSU_CSL17_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL17_SSW_S1      (21)      //!< Bit position for CSU_CSL17_SSW_S1.
#define BM_CSU_CSL17_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL17_SSW_S1.

//! @brief Get value of CSU_CSL17_SSW_S1 from a register value.
#define BG_CSU_CSL17_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_SSW_S1) >> BP_CSU_CSL17_SSW_S1)

//! @brief Format value for bitfield CSU_CSL17_SSW_S1.
#define BF_CSU_CSL17_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_SSW_S1) & BM_CSU_CSL17_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL17_SSW_S1(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_SSW_S1) | BF_CSU_CSL17_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL17_NUW_S1      (22)      //!< Bit position for CSU_CSL17_NUW_S1.
#define BM_CSU_CSL17_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL17_NUW_S1.

//! @brief Get value of CSU_CSL17_NUW_S1 from a register value.
#define BG_CSU_CSL17_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_NUW_S1) >> BP_CSU_CSL17_NUW_S1)

//! @brief Format value for bitfield CSU_CSL17_NUW_S1.
#define BF_CSU_CSL17_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_NUW_S1) & BM_CSU_CSL17_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL17_NUW_S1(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_NUW_S1) | BF_CSU_CSL17_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL17_NSW_S1      (23)      //!< Bit position for CSU_CSL17_NSW_S1.
#define BM_CSU_CSL17_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL17_NSW_S1.

//! @brief Get value of CSU_CSL17_NSW_S1 from a register value.
#define BG_CSU_CSL17_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_NSW_S1) >> BP_CSU_CSL17_NSW_S1)

//! @brief Format value for bitfield CSU_CSL17_NSW_S1.
#define BF_CSU_CSL17_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_NSW_S1) & BM_CSU_CSL17_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL17_NSW_S1(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_NSW_S1) | BF_CSU_CSL17_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL17, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL17_LOCK_S1      (24)      //!< Bit position for CSU_CSL17_LOCK_S1.
#define BM_CSU_CSL17_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL17_LOCK_S1.

//! @brief Get value of CSU_CSL17_LOCK_S1 from a register value.
#define BG_CSU_CSL17_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL17_LOCK_S1) >> BP_CSU_CSL17_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL17_LOCK_S1.
#define BF_CSU_CSL17_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL17_LOCK_S1) & BM_CSU_CSL17_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL17_LOCK_S1(v)   (HW_CSU_CSL17_WR((HW_CSU_CSL17_RD() & ~BM_CSU_CSL17_LOCK_S1) | BF_CSU_CSL17_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL18 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL18 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl18
{
    reg32_t U;
    struct _hw_csu_csl18_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl18_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL18 register
 */
//@{
#define HW_CSU_CSL18_ADDR      (REGS_CSU_BASE + 0x48)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL18           (*(volatile hw_csu_csl18_t *) HW_CSU_CSL18_ADDR)
#define HW_CSU_CSL18_RD()      (HW_CSU_CSL18.U)
#define HW_CSU_CSL18_WR(v)     (HW_CSU_CSL18.U = (v))
#define HW_CSU_CSL18_SET(v)    (HW_CSU_CSL18_WR(HW_CSU_CSL18_RD() |  (v)))
#define HW_CSU_CSL18_CLR(v)    (HW_CSU_CSL18_WR(HW_CSU_CSL18_RD() & ~(v)))
#define HW_CSU_CSL18_TOG(v)    (HW_CSU_CSL18_WR(HW_CSU_CSL18_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL18 bitfields
 */

/*! @name Register CSU_CSL18, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL18_SUR_S2      (0)      //!< Bit position for CSU_CSL18_SUR_S2.
#define BM_CSU_CSL18_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL18_SUR_S2.

//! @brief Get value of CSU_CSL18_SUR_S2 from a register value.
#define BG_CSU_CSL18_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_SUR_S2) >> BP_CSU_CSL18_SUR_S2)

//! @brief Format value for bitfield CSU_CSL18_SUR_S2.
#define BF_CSU_CSL18_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_SUR_S2) & BM_CSU_CSL18_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL18_SUR_S2(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_SUR_S2) | BF_CSU_CSL18_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL18_SSR_S2      (1)      //!< Bit position for CSU_CSL18_SSR_S2.
#define BM_CSU_CSL18_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL18_SSR_S2.

//! @brief Get value of CSU_CSL18_SSR_S2 from a register value.
#define BG_CSU_CSL18_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_SSR_S2) >> BP_CSU_CSL18_SSR_S2)

//! @brief Format value for bitfield CSU_CSL18_SSR_S2.
#define BF_CSU_CSL18_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_SSR_S2) & BM_CSU_CSL18_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL18_SSR_S2(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_SSR_S2) | BF_CSU_CSL18_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL18_NUR_S2      (2)      //!< Bit position for CSU_CSL18_NUR_S2.
#define BM_CSU_CSL18_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL18_NUR_S2.

//! @brief Get value of CSU_CSL18_NUR_S2 from a register value.
#define BG_CSU_CSL18_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_NUR_S2) >> BP_CSU_CSL18_NUR_S2)

//! @brief Format value for bitfield CSU_CSL18_NUR_S2.
#define BF_CSU_CSL18_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_NUR_S2) & BM_CSU_CSL18_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL18_NUR_S2(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_NUR_S2) | BF_CSU_CSL18_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL18_NSR_S2      (3)      //!< Bit position for CSU_CSL18_NSR_S2.
#define BM_CSU_CSL18_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL18_NSR_S2.

//! @brief Get value of CSU_CSL18_NSR_S2 from a register value.
#define BG_CSU_CSL18_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_NSR_S2) >> BP_CSU_CSL18_NSR_S2)

//! @brief Format value for bitfield CSU_CSL18_NSR_S2.
#define BF_CSU_CSL18_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_NSR_S2) & BM_CSU_CSL18_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL18_NSR_S2(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_NSR_S2) | BF_CSU_CSL18_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL18_SUW_S2      (4)      //!< Bit position for CSU_CSL18_SUW_S2.
#define BM_CSU_CSL18_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL18_SUW_S2.

//! @brief Get value of CSU_CSL18_SUW_S2 from a register value.
#define BG_CSU_CSL18_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_SUW_S2) >> BP_CSU_CSL18_SUW_S2)

//! @brief Format value for bitfield CSU_CSL18_SUW_S2.
#define BF_CSU_CSL18_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_SUW_S2) & BM_CSU_CSL18_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL18_SUW_S2(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_SUW_S2) | BF_CSU_CSL18_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL18_SSW_S2      (5)      //!< Bit position for CSU_CSL18_SSW_S2.
#define BM_CSU_CSL18_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL18_SSW_S2.

//! @brief Get value of CSU_CSL18_SSW_S2 from a register value.
#define BG_CSU_CSL18_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_SSW_S2) >> BP_CSU_CSL18_SSW_S2)

//! @brief Format value for bitfield CSU_CSL18_SSW_S2.
#define BF_CSU_CSL18_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_SSW_S2) & BM_CSU_CSL18_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL18_SSW_S2(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_SSW_S2) | BF_CSU_CSL18_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL18_NUW_S2      (6)      //!< Bit position for CSU_CSL18_NUW_S2.
#define BM_CSU_CSL18_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL18_NUW_S2.

//! @brief Get value of CSU_CSL18_NUW_S2 from a register value.
#define BG_CSU_CSL18_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_NUW_S2) >> BP_CSU_CSL18_NUW_S2)

//! @brief Format value for bitfield CSU_CSL18_NUW_S2.
#define BF_CSU_CSL18_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_NUW_S2) & BM_CSU_CSL18_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL18_NUW_S2(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_NUW_S2) | BF_CSU_CSL18_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL18_NSW_S2      (7)      //!< Bit position for CSU_CSL18_NSW_S2.
#define BM_CSU_CSL18_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL18_NSW_S2.

//! @brief Get value of CSU_CSL18_NSW_S2 from a register value.
#define BG_CSU_CSL18_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_NSW_S2) >> BP_CSU_CSL18_NSW_S2)

//! @brief Format value for bitfield CSU_CSL18_NSW_S2.
#define BF_CSU_CSL18_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_NSW_S2) & BM_CSU_CSL18_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL18_NSW_S2(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_NSW_S2) | BF_CSU_CSL18_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL18_LOCK_S2      (8)      //!< Bit position for CSU_CSL18_LOCK_S2.
#define BM_CSU_CSL18_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL18_LOCK_S2.

//! @brief Get value of CSU_CSL18_LOCK_S2 from a register value.
#define BG_CSU_CSL18_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_LOCK_S2) >> BP_CSU_CSL18_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL18_LOCK_S2.
#define BF_CSU_CSL18_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_LOCK_S2) & BM_CSU_CSL18_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL18_LOCK_S2(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_LOCK_S2) | BF_CSU_CSL18_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL18_SUR_S1      (16)      //!< Bit position for CSU_CSL18_SUR_S1.
#define BM_CSU_CSL18_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL18_SUR_S1.

//! @brief Get value of CSU_CSL18_SUR_S1 from a register value.
#define BG_CSU_CSL18_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_SUR_S1) >> BP_CSU_CSL18_SUR_S1)

//! @brief Format value for bitfield CSU_CSL18_SUR_S1.
#define BF_CSU_CSL18_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_SUR_S1) & BM_CSU_CSL18_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL18_SUR_S1(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_SUR_S1) | BF_CSU_CSL18_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL18_SSR_S1      (17)      //!< Bit position for CSU_CSL18_SSR_S1.
#define BM_CSU_CSL18_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL18_SSR_S1.

//! @brief Get value of CSU_CSL18_SSR_S1 from a register value.
#define BG_CSU_CSL18_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_SSR_S1) >> BP_CSU_CSL18_SSR_S1)

//! @brief Format value for bitfield CSU_CSL18_SSR_S1.
#define BF_CSU_CSL18_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_SSR_S1) & BM_CSU_CSL18_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL18_SSR_S1(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_SSR_S1) | BF_CSU_CSL18_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL18_NUR_S1      (18)      //!< Bit position for CSU_CSL18_NUR_S1.
#define BM_CSU_CSL18_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL18_NUR_S1.

//! @brief Get value of CSU_CSL18_NUR_S1 from a register value.
#define BG_CSU_CSL18_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_NUR_S1) >> BP_CSU_CSL18_NUR_S1)

//! @brief Format value for bitfield CSU_CSL18_NUR_S1.
#define BF_CSU_CSL18_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_NUR_S1) & BM_CSU_CSL18_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL18_NUR_S1(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_NUR_S1) | BF_CSU_CSL18_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL18_NSR_S1      (19)      //!< Bit position for CSU_CSL18_NSR_S1.
#define BM_CSU_CSL18_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL18_NSR_S1.

//! @brief Get value of CSU_CSL18_NSR_S1 from a register value.
#define BG_CSU_CSL18_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_NSR_S1) >> BP_CSU_CSL18_NSR_S1)

//! @brief Format value for bitfield CSU_CSL18_NSR_S1.
#define BF_CSU_CSL18_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_NSR_S1) & BM_CSU_CSL18_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL18_NSR_S1(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_NSR_S1) | BF_CSU_CSL18_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL18_SUW_S1      (20)      //!< Bit position for CSU_CSL18_SUW_S1.
#define BM_CSU_CSL18_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL18_SUW_S1.

//! @brief Get value of CSU_CSL18_SUW_S1 from a register value.
#define BG_CSU_CSL18_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_SUW_S1) >> BP_CSU_CSL18_SUW_S1)

//! @brief Format value for bitfield CSU_CSL18_SUW_S1.
#define BF_CSU_CSL18_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_SUW_S1) & BM_CSU_CSL18_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL18_SUW_S1(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_SUW_S1) | BF_CSU_CSL18_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL18_SSW_S1      (21)      //!< Bit position for CSU_CSL18_SSW_S1.
#define BM_CSU_CSL18_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL18_SSW_S1.

//! @brief Get value of CSU_CSL18_SSW_S1 from a register value.
#define BG_CSU_CSL18_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_SSW_S1) >> BP_CSU_CSL18_SSW_S1)

//! @brief Format value for bitfield CSU_CSL18_SSW_S1.
#define BF_CSU_CSL18_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_SSW_S1) & BM_CSU_CSL18_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL18_SSW_S1(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_SSW_S1) | BF_CSU_CSL18_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL18_NUW_S1      (22)      //!< Bit position for CSU_CSL18_NUW_S1.
#define BM_CSU_CSL18_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL18_NUW_S1.

//! @brief Get value of CSU_CSL18_NUW_S1 from a register value.
#define BG_CSU_CSL18_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_NUW_S1) >> BP_CSU_CSL18_NUW_S1)

//! @brief Format value for bitfield CSU_CSL18_NUW_S1.
#define BF_CSU_CSL18_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_NUW_S1) & BM_CSU_CSL18_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL18_NUW_S1(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_NUW_S1) | BF_CSU_CSL18_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL18_NSW_S1      (23)      //!< Bit position for CSU_CSL18_NSW_S1.
#define BM_CSU_CSL18_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL18_NSW_S1.

//! @brief Get value of CSU_CSL18_NSW_S1 from a register value.
#define BG_CSU_CSL18_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_NSW_S1) >> BP_CSU_CSL18_NSW_S1)

//! @brief Format value for bitfield CSU_CSL18_NSW_S1.
#define BF_CSU_CSL18_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_NSW_S1) & BM_CSU_CSL18_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL18_NSW_S1(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_NSW_S1) | BF_CSU_CSL18_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL18, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL18_LOCK_S1      (24)      //!< Bit position for CSU_CSL18_LOCK_S1.
#define BM_CSU_CSL18_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL18_LOCK_S1.

//! @brief Get value of CSU_CSL18_LOCK_S1 from a register value.
#define BG_CSU_CSL18_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL18_LOCK_S1) >> BP_CSU_CSL18_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL18_LOCK_S1.
#define BF_CSU_CSL18_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL18_LOCK_S1) & BM_CSU_CSL18_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL18_LOCK_S1(v)   (HW_CSU_CSL18_WR((HW_CSU_CSL18_RD() & ~BM_CSU_CSL18_LOCK_S1) | BF_CSU_CSL18_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL19 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL19 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl19
{
    reg32_t U;
    struct _hw_csu_csl19_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl19_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL19 register
 */
//@{
#define HW_CSU_CSL19_ADDR      (REGS_CSU_BASE + 0x4c)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL19           (*(volatile hw_csu_csl19_t *) HW_CSU_CSL19_ADDR)
#define HW_CSU_CSL19_RD()      (HW_CSU_CSL19.U)
#define HW_CSU_CSL19_WR(v)     (HW_CSU_CSL19.U = (v))
#define HW_CSU_CSL19_SET(v)    (HW_CSU_CSL19_WR(HW_CSU_CSL19_RD() |  (v)))
#define HW_CSU_CSL19_CLR(v)    (HW_CSU_CSL19_WR(HW_CSU_CSL19_RD() & ~(v)))
#define HW_CSU_CSL19_TOG(v)    (HW_CSU_CSL19_WR(HW_CSU_CSL19_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL19 bitfields
 */

/*! @name Register CSU_CSL19, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL19_SUR_S2      (0)      //!< Bit position for CSU_CSL19_SUR_S2.
#define BM_CSU_CSL19_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL19_SUR_S2.

//! @brief Get value of CSU_CSL19_SUR_S2 from a register value.
#define BG_CSU_CSL19_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_SUR_S2) >> BP_CSU_CSL19_SUR_S2)

//! @brief Format value for bitfield CSU_CSL19_SUR_S2.
#define BF_CSU_CSL19_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_SUR_S2) & BM_CSU_CSL19_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL19_SUR_S2(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_SUR_S2) | BF_CSU_CSL19_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL19_SSR_S2      (1)      //!< Bit position for CSU_CSL19_SSR_S2.
#define BM_CSU_CSL19_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL19_SSR_S2.

//! @brief Get value of CSU_CSL19_SSR_S2 from a register value.
#define BG_CSU_CSL19_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_SSR_S2) >> BP_CSU_CSL19_SSR_S2)

//! @brief Format value for bitfield CSU_CSL19_SSR_S2.
#define BF_CSU_CSL19_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_SSR_S2) & BM_CSU_CSL19_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL19_SSR_S2(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_SSR_S2) | BF_CSU_CSL19_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL19_NUR_S2      (2)      //!< Bit position for CSU_CSL19_NUR_S2.
#define BM_CSU_CSL19_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL19_NUR_S2.

//! @brief Get value of CSU_CSL19_NUR_S2 from a register value.
#define BG_CSU_CSL19_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_NUR_S2) >> BP_CSU_CSL19_NUR_S2)

//! @brief Format value for bitfield CSU_CSL19_NUR_S2.
#define BF_CSU_CSL19_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_NUR_S2) & BM_CSU_CSL19_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL19_NUR_S2(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_NUR_S2) | BF_CSU_CSL19_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL19_NSR_S2      (3)      //!< Bit position for CSU_CSL19_NSR_S2.
#define BM_CSU_CSL19_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL19_NSR_S2.

//! @brief Get value of CSU_CSL19_NSR_S2 from a register value.
#define BG_CSU_CSL19_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_NSR_S2) >> BP_CSU_CSL19_NSR_S2)

//! @brief Format value for bitfield CSU_CSL19_NSR_S2.
#define BF_CSU_CSL19_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_NSR_S2) & BM_CSU_CSL19_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL19_NSR_S2(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_NSR_S2) | BF_CSU_CSL19_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL19_SUW_S2      (4)      //!< Bit position for CSU_CSL19_SUW_S2.
#define BM_CSU_CSL19_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL19_SUW_S2.

//! @brief Get value of CSU_CSL19_SUW_S2 from a register value.
#define BG_CSU_CSL19_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_SUW_S2) >> BP_CSU_CSL19_SUW_S2)

//! @brief Format value for bitfield CSU_CSL19_SUW_S2.
#define BF_CSU_CSL19_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_SUW_S2) & BM_CSU_CSL19_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL19_SUW_S2(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_SUW_S2) | BF_CSU_CSL19_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL19_SSW_S2      (5)      //!< Bit position for CSU_CSL19_SSW_S2.
#define BM_CSU_CSL19_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL19_SSW_S2.

//! @brief Get value of CSU_CSL19_SSW_S2 from a register value.
#define BG_CSU_CSL19_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_SSW_S2) >> BP_CSU_CSL19_SSW_S2)

//! @brief Format value for bitfield CSU_CSL19_SSW_S2.
#define BF_CSU_CSL19_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_SSW_S2) & BM_CSU_CSL19_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL19_SSW_S2(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_SSW_S2) | BF_CSU_CSL19_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL19_NUW_S2      (6)      //!< Bit position for CSU_CSL19_NUW_S2.
#define BM_CSU_CSL19_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL19_NUW_S2.

//! @brief Get value of CSU_CSL19_NUW_S2 from a register value.
#define BG_CSU_CSL19_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_NUW_S2) >> BP_CSU_CSL19_NUW_S2)

//! @brief Format value for bitfield CSU_CSL19_NUW_S2.
#define BF_CSU_CSL19_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_NUW_S2) & BM_CSU_CSL19_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL19_NUW_S2(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_NUW_S2) | BF_CSU_CSL19_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL19_NSW_S2      (7)      //!< Bit position for CSU_CSL19_NSW_S2.
#define BM_CSU_CSL19_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL19_NSW_S2.

//! @brief Get value of CSU_CSL19_NSW_S2 from a register value.
#define BG_CSU_CSL19_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_NSW_S2) >> BP_CSU_CSL19_NSW_S2)

//! @brief Format value for bitfield CSU_CSL19_NSW_S2.
#define BF_CSU_CSL19_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_NSW_S2) & BM_CSU_CSL19_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL19_NSW_S2(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_NSW_S2) | BF_CSU_CSL19_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL19_LOCK_S2      (8)      //!< Bit position for CSU_CSL19_LOCK_S2.
#define BM_CSU_CSL19_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL19_LOCK_S2.

//! @brief Get value of CSU_CSL19_LOCK_S2 from a register value.
#define BG_CSU_CSL19_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_LOCK_S2) >> BP_CSU_CSL19_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL19_LOCK_S2.
#define BF_CSU_CSL19_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_LOCK_S2) & BM_CSU_CSL19_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL19_LOCK_S2(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_LOCK_S2) | BF_CSU_CSL19_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL19_SUR_S1      (16)      //!< Bit position for CSU_CSL19_SUR_S1.
#define BM_CSU_CSL19_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL19_SUR_S1.

//! @brief Get value of CSU_CSL19_SUR_S1 from a register value.
#define BG_CSU_CSL19_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_SUR_S1) >> BP_CSU_CSL19_SUR_S1)

//! @brief Format value for bitfield CSU_CSL19_SUR_S1.
#define BF_CSU_CSL19_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_SUR_S1) & BM_CSU_CSL19_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL19_SUR_S1(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_SUR_S1) | BF_CSU_CSL19_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL19_SSR_S1      (17)      //!< Bit position for CSU_CSL19_SSR_S1.
#define BM_CSU_CSL19_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL19_SSR_S1.

//! @brief Get value of CSU_CSL19_SSR_S1 from a register value.
#define BG_CSU_CSL19_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_SSR_S1) >> BP_CSU_CSL19_SSR_S1)

//! @brief Format value for bitfield CSU_CSL19_SSR_S1.
#define BF_CSU_CSL19_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_SSR_S1) & BM_CSU_CSL19_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL19_SSR_S1(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_SSR_S1) | BF_CSU_CSL19_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL19_NUR_S1      (18)      //!< Bit position for CSU_CSL19_NUR_S1.
#define BM_CSU_CSL19_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL19_NUR_S1.

//! @brief Get value of CSU_CSL19_NUR_S1 from a register value.
#define BG_CSU_CSL19_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_NUR_S1) >> BP_CSU_CSL19_NUR_S1)

//! @brief Format value for bitfield CSU_CSL19_NUR_S1.
#define BF_CSU_CSL19_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_NUR_S1) & BM_CSU_CSL19_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL19_NUR_S1(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_NUR_S1) | BF_CSU_CSL19_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL19_NSR_S1      (19)      //!< Bit position for CSU_CSL19_NSR_S1.
#define BM_CSU_CSL19_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL19_NSR_S1.

//! @brief Get value of CSU_CSL19_NSR_S1 from a register value.
#define BG_CSU_CSL19_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_NSR_S1) >> BP_CSU_CSL19_NSR_S1)

//! @brief Format value for bitfield CSU_CSL19_NSR_S1.
#define BF_CSU_CSL19_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_NSR_S1) & BM_CSU_CSL19_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL19_NSR_S1(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_NSR_S1) | BF_CSU_CSL19_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL19_SUW_S1      (20)      //!< Bit position for CSU_CSL19_SUW_S1.
#define BM_CSU_CSL19_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL19_SUW_S1.

//! @brief Get value of CSU_CSL19_SUW_S1 from a register value.
#define BG_CSU_CSL19_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_SUW_S1) >> BP_CSU_CSL19_SUW_S1)

//! @brief Format value for bitfield CSU_CSL19_SUW_S1.
#define BF_CSU_CSL19_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_SUW_S1) & BM_CSU_CSL19_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL19_SUW_S1(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_SUW_S1) | BF_CSU_CSL19_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL19_SSW_S1      (21)      //!< Bit position for CSU_CSL19_SSW_S1.
#define BM_CSU_CSL19_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL19_SSW_S1.

//! @brief Get value of CSU_CSL19_SSW_S1 from a register value.
#define BG_CSU_CSL19_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_SSW_S1) >> BP_CSU_CSL19_SSW_S1)

//! @brief Format value for bitfield CSU_CSL19_SSW_S1.
#define BF_CSU_CSL19_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_SSW_S1) & BM_CSU_CSL19_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL19_SSW_S1(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_SSW_S1) | BF_CSU_CSL19_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL19_NUW_S1      (22)      //!< Bit position for CSU_CSL19_NUW_S1.
#define BM_CSU_CSL19_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL19_NUW_S1.

//! @brief Get value of CSU_CSL19_NUW_S1 from a register value.
#define BG_CSU_CSL19_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_NUW_S1) >> BP_CSU_CSL19_NUW_S1)

//! @brief Format value for bitfield CSU_CSL19_NUW_S1.
#define BF_CSU_CSL19_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_NUW_S1) & BM_CSU_CSL19_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL19_NUW_S1(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_NUW_S1) | BF_CSU_CSL19_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL19_NSW_S1      (23)      //!< Bit position for CSU_CSL19_NSW_S1.
#define BM_CSU_CSL19_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL19_NSW_S1.

//! @brief Get value of CSU_CSL19_NSW_S1 from a register value.
#define BG_CSU_CSL19_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_NSW_S1) >> BP_CSU_CSL19_NSW_S1)

//! @brief Format value for bitfield CSU_CSL19_NSW_S1.
#define BF_CSU_CSL19_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_NSW_S1) & BM_CSU_CSL19_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL19_NSW_S1(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_NSW_S1) | BF_CSU_CSL19_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL19, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL19_LOCK_S1      (24)      //!< Bit position for CSU_CSL19_LOCK_S1.
#define BM_CSU_CSL19_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL19_LOCK_S1.

//! @brief Get value of CSU_CSL19_LOCK_S1 from a register value.
#define BG_CSU_CSL19_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL19_LOCK_S1) >> BP_CSU_CSL19_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL19_LOCK_S1.
#define BF_CSU_CSL19_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL19_LOCK_S1) & BM_CSU_CSL19_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL19_LOCK_S1(v)   (HW_CSU_CSL19_WR((HW_CSU_CSL19_RD() & ~BM_CSU_CSL19_LOCK_S1) | BF_CSU_CSL19_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL20 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL20 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl20
{
    reg32_t U;
    struct _hw_csu_csl20_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl20_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL20 register
 */
//@{
#define HW_CSU_CSL20_ADDR      (REGS_CSU_BASE + 0x50)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL20           (*(volatile hw_csu_csl20_t *) HW_CSU_CSL20_ADDR)
#define HW_CSU_CSL20_RD()      (HW_CSU_CSL20.U)
#define HW_CSU_CSL20_WR(v)     (HW_CSU_CSL20.U = (v))
#define HW_CSU_CSL20_SET(v)    (HW_CSU_CSL20_WR(HW_CSU_CSL20_RD() |  (v)))
#define HW_CSU_CSL20_CLR(v)    (HW_CSU_CSL20_WR(HW_CSU_CSL20_RD() & ~(v)))
#define HW_CSU_CSL20_TOG(v)    (HW_CSU_CSL20_WR(HW_CSU_CSL20_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL20 bitfields
 */

/*! @name Register CSU_CSL20, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL20_SUR_S2      (0)      //!< Bit position for CSU_CSL20_SUR_S2.
#define BM_CSU_CSL20_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL20_SUR_S2.

//! @brief Get value of CSU_CSL20_SUR_S2 from a register value.
#define BG_CSU_CSL20_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_SUR_S2) >> BP_CSU_CSL20_SUR_S2)

//! @brief Format value for bitfield CSU_CSL20_SUR_S2.
#define BF_CSU_CSL20_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_SUR_S2) & BM_CSU_CSL20_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL20_SUR_S2(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_SUR_S2) | BF_CSU_CSL20_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL20_SSR_S2      (1)      //!< Bit position for CSU_CSL20_SSR_S2.
#define BM_CSU_CSL20_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL20_SSR_S2.

//! @brief Get value of CSU_CSL20_SSR_S2 from a register value.
#define BG_CSU_CSL20_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_SSR_S2) >> BP_CSU_CSL20_SSR_S2)

//! @brief Format value for bitfield CSU_CSL20_SSR_S2.
#define BF_CSU_CSL20_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_SSR_S2) & BM_CSU_CSL20_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL20_SSR_S2(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_SSR_S2) | BF_CSU_CSL20_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL20_NUR_S2      (2)      //!< Bit position for CSU_CSL20_NUR_S2.
#define BM_CSU_CSL20_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL20_NUR_S2.

//! @brief Get value of CSU_CSL20_NUR_S2 from a register value.
#define BG_CSU_CSL20_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_NUR_S2) >> BP_CSU_CSL20_NUR_S2)

//! @brief Format value for bitfield CSU_CSL20_NUR_S2.
#define BF_CSU_CSL20_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_NUR_S2) & BM_CSU_CSL20_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL20_NUR_S2(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_NUR_S2) | BF_CSU_CSL20_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL20_NSR_S2      (3)      //!< Bit position for CSU_CSL20_NSR_S2.
#define BM_CSU_CSL20_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL20_NSR_S2.

//! @brief Get value of CSU_CSL20_NSR_S2 from a register value.
#define BG_CSU_CSL20_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_NSR_S2) >> BP_CSU_CSL20_NSR_S2)

//! @brief Format value for bitfield CSU_CSL20_NSR_S2.
#define BF_CSU_CSL20_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_NSR_S2) & BM_CSU_CSL20_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL20_NSR_S2(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_NSR_S2) | BF_CSU_CSL20_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL20_SUW_S2      (4)      //!< Bit position for CSU_CSL20_SUW_S2.
#define BM_CSU_CSL20_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL20_SUW_S2.

//! @brief Get value of CSU_CSL20_SUW_S2 from a register value.
#define BG_CSU_CSL20_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_SUW_S2) >> BP_CSU_CSL20_SUW_S2)

//! @brief Format value for bitfield CSU_CSL20_SUW_S2.
#define BF_CSU_CSL20_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_SUW_S2) & BM_CSU_CSL20_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL20_SUW_S2(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_SUW_S2) | BF_CSU_CSL20_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL20_SSW_S2      (5)      //!< Bit position for CSU_CSL20_SSW_S2.
#define BM_CSU_CSL20_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL20_SSW_S2.

//! @brief Get value of CSU_CSL20_SSW_S2 from a register value.
#define BG_CSU_CSL20_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_SSW_S2) >> BP_CSU_CSL20_SSW_S2)

//! @brief Format value for bitfield CSU_CSL20_SSW_S2.
#define BF_CSU_CSL20_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_SSW_S2) & BM_CSU_CSL20_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL20_SSW_S2(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_SSW_S2) | BF_CSU_CSL20_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL20_NUW_S2      (6)      //!< Bit position for CSU_CSL20_NUW_S2.
#define BM_CSU_CSL20_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL20_NUW_S2.

//! @brief Get value of CSU_CSL20_NUW_S2 from a register value.
#define BG_CSU_CSL20_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_NUW_S2) >> BP_CSU_CSL20_NUW_S2)

//! @brief Format value for bitfield CSU_CSL20_NUW_S2.
#define BF_CSU_CSL20_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_NUW_S2) & BM_CSU_CSL20_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL20_NUW_S2(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_NUW_S2) | BF_CSU_CSL20_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL20_NSW_S2      (7)      //!< Bit position for CSU_CSL20_NSW_S2.
#define BM_CSU_CSL20_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL20_NSW_S2.

//! @brief Get value of CSU_CSL20_NSW_S2 from a register value.
#define BG_CSU_CSL20_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_NSW_S2) >> BP_CSU_CSL20_NSW_S2)

//! @brief Format value for bitfield CSU_CSL20_NSW_S2.
#define BF_CSU_CSL20_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_NSW_S2) & BM_CSU_CSL20_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL20_NSW_S2(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_NSW_S2) | BF_CSU_CSL20_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL20_LOCK_S2      (8)      //!< Bit position for CSU_CSL20_LOCK_S2.
#define BM_CSU_CSL20_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL20_LOCK_S2.

//! @brief Get value of CSU_CSL20_LOCK_S2 from a register value.
#define BG_CSU_CSL20_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_LOCK_S2) >> BP_CSU_CSL20_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL20_LOCK_S2.
#define BF_CSU_CSL20_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_LOCK_S2) & BM_CSU_CSL20_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL20_LOCK_S2(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_LOCK_S2) | BF_CSU_CSL20_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL20_SUR_S1      (16)      //!< Bit position for CSU_CSL20_SUR_S1.
#define BM_CSU_CSL20_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL20_SUR_S1.

//! @brief Get value of CSU_CSL20_SUR_S1 from a register value.
#define BG_CSU_CSL20_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_SUR_S1) >> BP_CSU_CSL20_SUR_S1)

//! @brief Format value for bitfield CSU_CSL20_SUR_S1.
#define BF_CSU_CSL20_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_SUR_S1) & BM_CSU_CSL20_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL20_SUR_S1(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_SUR_S1) | BF_CSU_CSL20_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL20_SSR_S1      (17)      //!< Bit position for CSU_CSL20_SSR_S1.
#define BM_CSU_CSL20_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL20_SSR_S1.

//! @brief Get value of CSU_CSL20_SSR_S1 from a register value.
#define BG_CSU_CSL20_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_SSR_S1) >> BP_CSU_CSL20_SSR_S1)

//! @brief Format value for bitfield CSU_CSL20_SSR_S1.
#define BF_CSU_CSL20_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_SSR_S1) & BM_CSU_CSL20_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL20_SSR_S1(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_SSR_S1) | BF_CSU_CSL20_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL20_NUR_S1      (18)      //!< Bit position for CSU_CSL20_NUR_S1.
#define BM_CSU_CSL20_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL20_NUR_S1.

//! @brief Get value of CSU_CSL20_NUR_S1 from a register value.
#define BG_CSU_CSL20_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_NUR_S1) >> BP_CSU_CSL20_NUR_S1)

//! @brief Format value for bitfield CSU_CSL20_NUR_S1.
#define BF_CSU_CSL20_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_NUR_S1) & BM_CSU_CSL20_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL20_NUR_S1(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_NUR_S1) | BF_CSU_CSL20_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL20_NSR_S1      (19)      //!< Bit position for CSU_CSL20_NSR_S1.
#define BM_CSU_CSL20_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL20_NSR_S1.

//! @brief Get value of CSU_CSL20_NSR_S1 from a register value.
#define BG_CSU_CSL20_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_NSR_S1) >> BP_CSU_CSL20_NSR_S1)

//! @brief Format value for bitfield CSU_CSL20_NSR_S1.
#define BF_CSU_CSL20_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_NSR_S1) & BM_CSU_CSL20_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL20_NSR_S1(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_NSR_S1) | BF_CSU_CSL20_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL20_SUW_S1      (20)      //!< Bit position for CSU_CSL20_SUW_S1.
#define BM_CSU_CSL20_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL20_SUW_S1.

//! @brief Get value of CSU_CSL20_SUW_S1 from a register value.
#define BG_CSU_CSL20_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_SUW_S1) >> BP_CSU_CSL20_SUW_S1)

//! @brief Format value for bitfield CSU_CSL20_SUW_S1.
#define BF_CSU_CSL20_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_SUW_S1) & BM_CSU_CSL20_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL20_SUW_S1(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_SUW_S1) | BF_CSU_CSL20_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL20_SSW_S1      (21)      //!< Bit position for CSU_CSL20_SSW_S1.
#define BM_CSU_CSL20_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL20_SSW_S1.

//! @brief Get value of CSU_CSL20_SSW_S1 from a register value.
#define BG_CSU_CSL20_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_SSW_S1) >> BP_CSU_CSL20_SSW_S1)

//! @brief Format value for bitfield CSU_CSL20_SSW_S1.
#define BF_CSU_CSL20_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_SSW_S1) & BM_CSU_CSL20_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL20_SSW_S1(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_SSW_S1) | BF_CSU_CSL20_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL20_NUW_S1      (22)      //!< Bit position for CSU_CSL20_NUW_S1.
#define BM_CSU_CSL20_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL20_NUW_S1.

//! @brief Get value of CSU_CSL20_NUW_S1 from a register value.
#define BG_CSU_CSL20_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_NUW_S1) >> BP_CSU_CSL20_NUW_S1)

//! @brief Format value for bitfield CSU_CSL20_NUW_S1.
#define BF_CSU_CSL20_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_NUW_S1) & BM_CSU_CSL20_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL20_NUW_S1(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_NUW_S1) | BF_CSU_CSL20_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL20_NSW_S1      (23)      //!< Bit position for CSU_CSL20_NSW_S1.
#define BM_CSU_CSL20_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL20_NSW_S1.

//! @brief Get value of CSU_CSL20_NSW_S1 from a register value.
#define BG_CSU_CSL20_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_NSW_S1) >> BP_CSU_CSL20_NSW_S1)

//! @brief Format value for bitfield CSU_CSL20_NSW_S1.
#define BF_CSU_CSL20_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_NSW_S1) & BM_CSU_CSL20_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL20_NSW_S1(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_NSW_S1) | BF_CSU_CSL20_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL20, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL20_LOCK_S1      (24)      //!< Bit position for CSU_CSL20_LOCK_S1.
#define BM_CSU_CSL20_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL20_LOCK_S1.

//! @brief Get value of CSU_CSL20_LOCK_S1 from a register value.
#define BG_CSU_CSL20_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL20_LOCK_S1) >> BP_CSU_CSL20_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL20_LOCK_S1.
#define BF_CSU_CSL20_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL20_LOCK_S1) & BM_CSU_CSL20_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL20_LOCK_S1(v)   (HW_CSU_CSL20_WR((HW_CSU_CSL20_RD() & ~BM_CSU_CSL20_LOCK_S1) | BF_CSU_CSL20_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL21 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL21 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl21
{
    reg32_t U;
    struct _hw_csu_csl21_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl21_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL21 register
 */
//@{
#define HW_CSU_CSL21_ADDR      (REGS_CSU_BASE + 0x54)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL21           (*(volatile hw_csu_csl21_t *) HW_CSU_CSL21_ADDR)
#define HW_CSU_CSL21_RD()      (HW_CSU_CSL21.U)
#define HW_CSU_CSL21_WR(v)     (HW_CSU_CSL21.U = (v))
#define HW_CSU_CSL21_SET(v)    (HW_CSU_CSL21_WR(HW_CSU_CSL21_RD() |  (v)))
#define HW_CSU_CSL21_CLR(v)    (HW_CSU_CSL21_WR(HW_CSU_CSL21_RD() & ~(v)))
#define HW_CSU_CSL21_TOG(v)    (HW_CSU_CSL21_WR(HW_CSU_CSL21_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL21 bitfields
 */

/*! @name Register CSU_CSL21, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL21_SUR_S2      (0)      //!< Bit position for CSU_CSL21_SUR_S2.
#define BM_CSU_CSL21_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL21_SUR_S2.

//! @brief Get value of CSU_CSL21_SUR_S2 from a register value.
#define BG_CSU_CSL21_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_SUR_S2) >> BP_CSU_CSL21_SUR_S2)

//! @brief Format value for bitfield CSU_CSL21_SUR_S2.
#define BF_CSU_CSL21_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_SUR_S2) & BM_CSU_CSL21_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL21_SUR_S2(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_SUR_S2) | BF_CSU_CSL21_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL21_SSR_S2      (1)      //!< Bit position for CSU_CSL21_SSR_S2.
#define BM_CSU_CSL21_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL21_SSR_S2.

//! @brief Get value of CSU_CSL21_SSR_S2 from a register value.
#define BG_CSU_CSL21_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_SSR_S2) >> BP_CSU_CSL21_SSR_S2)

//! @brief Format value for bitfield CSU_CSL21_SSR_S2.
#define BF_CSU_CSL21_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_SSR_S2) & BM_CSU_CSL21_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL21_SSR_S2(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_SSR_S2) | BF_CSU_CSL21_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL21_NUR_S2      (2)      //!< Bit position for CSU_CSL21_NUR_S2.
#define BM_CSU_CSL21_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL21_NUR_S2.

//! @brief Get value of CSU_CSL21_NUR_S2 from a register value.
#define BG_CSU_CSL21_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_NUR_S2) >> BP_CSU_CSL21_NUR_S2)

//! @brief Format value for bitfield CSU_CSL21_NUR_S2.
#define BF_CSU_CSL21_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_NUR_S2) & BM_CSU_CSL21_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL21_NUR_S2(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_NUR_S2) | BF_CSU_CSL21_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL21_NSR_S2      (3)      //!< Bit position for CSU_CSL21_NSR_S2.
#define BM_CSU_CSL21_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL21_NSR_S2.

//! @brief Get value of CSU_CSL21_NSR_S2 from a register value.
#define BG_CSU_CSL21_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_NSR_S2) >> BP_CSU_CSL21_NSR_S2)

//! @brief Format value for bitfield CSU_CSL21_NSR_S2.
#define BF_CSU_CSL21_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_NSR_S2) & BM_CSU_CSL21_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL21_NSR_S2(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_NSR_S2) | BF_CSU_CSL21_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL21_SUW_S2      (4)      //!< Bit position for CSU_CSL21_SUW_S2.
#define BM_CSU_CSL21_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL21_SUW_S2.

//! @brief Get value of CSU_CSL21_SUW_S2 from a register value.
#define BG_CSU_CSL21_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_SUW_S2) >> BP_CSU_CSL21_SUW_S2)

//! @brief Format value for bitfield CSU_CSL21_SUW_S2.
#define BF_CSU_CSL21_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_SUW_S2) & BM_CSU_CSL21_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL21_SUW_S2(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_SUW_S2) | BF_CSU_CSL21_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL21_SSW_S2      (5)      //!< Bit position for CSU_CSL21_SSW_S2.
#define BM_CSU_CSL21_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL21_SSW_S2.

//! @brief Get value of CSU_CSL21_SSW_S2 from a register value.
#define BG_CSU_CSL21_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_SSW_S2) >> BP_CSU_CSL21_SSW_S2)

//! @brief Format value for bitfield CSU_CSL21_SSW_S2.
#define BF_CSU_CSL21_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_SSW_S2) & BM_CSU_CSL21_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL21_SSW_S2(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_SSW_S2) | BF_CSU_CSL21_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL21_NUW_S2      (6)      //!< Bit position for CSU_CSL21_NUW_S2.
#define BM_CSU_CSL21_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL21_NUW_S2.

//! @brief Get value of CSU_CSL21_NUW_S2 from a register value.
#define BG_CSU_CSL21_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_NUW_S2) >> BP_CSU_CSL21_NUW_S2)

//! @brief Format value for bitfield CSU_CSL21_NUW_S2.
#define BF_CSU_CSL21_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_NUW_S2) & BM_CSU_CSL21_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL21_NUW_S2(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_NUW_S2) | BF_CSU_CSL21_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL21_NSW_S2      (7)      //!< Bit position for CSU_CSL21_NSW_S2.
#define BM_CSU_CSL21_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL21_NSW_S2.

//! @brief Get value of CSU_CSL21_NSW_S2 from a register value.
#define BG_CSU_CSL21_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_NSW_S2) >> BP_CSU_CSL21_NSW_S2)

//! @brief Format value for bitfield CSU_CSL21_NSW_S2.
#define BF_CSU_CSL21_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_NSW_S2) & BM_CSU_CSL21_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL21_NSW_S2(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_NSW_S2) | BF_CSU_CSL21_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL21_LOCK_S2      (8)      //!< Bit position for CSU_CSL21_LOCK_S2.
#define BM_CSU_CSL21_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL21_LOCK_S2.

//! @brief Get value of CSU_CSL21_LOCK_S2 from a register value.
#define BG_CSU_CSL21_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_LOCK_S2) >> BP_CSU_CSL21_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL21_LOCK_S2.
#define BF_CSU_CSL21_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_LOCK_S2) & BM_CSU_CSL21_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL21_LOCK_S2(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_LOCK_S2) | BF_CSU_CSL21_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL21_SUR_S1      (16)      //!< Bit position for CSU_CSL21_SUR_S1.
#define BM_CSU_CSL21_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL21_SUR_S1.

//! @brief Get value of CSU_CSL21_SUR_S1 from a register value.
#define BG_CSU_CSL21_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_SUR_S1) >> BP_CSU_CSL21_SUR_S1)

//! @brief Format value for bitfield CSU_CSL21_SUR_S1.
#define BF_CSU_CSL21_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_SUR_S1) & BM_CSU_CSL21_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL21_SUR_S1(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_SUR_S1) | BF_CSU_CSL21_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL21_SSR_S1      (17)      //!< Bit position for CSU_CSL21_SSR_S1.
#define BM_CSU_CSL21_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL21_SSR_S1.

//! @brief Get value of CSU_CSL21_SSR_S1 from a register value.
#define BG_CSU_CSL21_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_SSR_S1) >> BP_CSU_CSL21_SSR_S1)

//! @brief Format value for bitfield CSU_CSL21_SSR_S1.
#define BF_CSU_CSL21_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_SSR_S1) & BM_CSU_CSL21_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL21_SSR_S1(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_SSR_S1) | BF_CSU_CSL21_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL21_NUR_S1      (18)      //!< Bit position for CSU_CSL21_NUR_S1.
#define BM_CSU_CSL21_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL21_NUR_S1.

//! @brief Get value of CSU_CSL21_NUR_S1 from a register value.
#define BG_CSU_CSL21_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_NUR_S1) >> BP_CSU_CSL21_NUR_S1)

//! @brief Format value for bitfield CSU_CSL21_NUR_S1.
#define BF_CSU_CSL21_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_NUR_S1) & BM_CSU_CSL21_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL21_NUR_S1(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_NUR_S1) | BF_CSU_CSL21_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL21_NSR_S1      (19)      //!< Bit position for CSU_CSL21_NSR_S1.
#define BM_CSU_CSL21_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL21_NSR_S1.

//! @brief Get value of CSU_CSL21_NSR_S1 from a register value.
#define BG_CSU_CSL21_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_NSR_S1) >> BP_CSU_CSL21_NSR_S1)

//! @brief Format value for bitfield CSU_CSL21_NSR_S1.
#define BF_CSU_CSL21_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_NSR_S1) & BM_CSU_CSL21_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL21_NSR_S1(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_NSR_S1) | BF_CSU_CSL21_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL21_SUW_S1      (20)      //!< Bit position for CSU_CSL21_SUW_S1.
#define BM_CSU_CSL21_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL21_SUW_S1.

//! @brief Get value of CSU_CSL21_SUW_S1 from a register value.
#define BG_CSU_CSL21_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_SUW_S1) >> BP_CSU_CSL21_SUW_S1)

//! @brief Format value for bitfield CSU_CSL21_SUW_S1.
#define BF_CSU_CSL21_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_SUW_S1) & BM_CSU_CSL21_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL21_SUW_S1(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_SUW_S1) | BF_CSU_CSL21_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL21_SSW_S1      (21)      //!< Bit position for CSU_CSL21_SSW_S1.
#define BM_CSU_CSL21_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL21_SSW_S1.

//! @brief Get value of CSU_CSL21_SSW_S1 from a register value.
#define BG_CSU_CSL21_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_SSW_S1) >> BP_CSU_CSL21_SSW_S1)

//! @brief Format value for bitfield CSU_CSL21_SSW_S1.
#define BF_CSU_CSL21_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_SSW_S1) & BM_CSU_CSL21_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL21_SSW_S1(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_SSW_S1) | BF_CSU_CSL21_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL21_NUW_S1      (22)      //!< Bit position for CSU_CSL21_NUW_S1.
#define BM_CSU_CSL21_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL21_NUW_S1.

//! @brief Get value of CSU_CSL21_NUW_S1 from a register value.
#define BG_CSU_CSL21_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_NUW_S1) >> BP_CSU_CSL21_NUW_S1)

//! @brief Format value for bitfield CSU_CSL21_NUW_S1.
#define BF_CSU_CSL21_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_NUW_S1) & BM_CSU_CSL21_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL21_NUW_S1(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_NUW_S1) | BF_CSU_CSL21_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL21_NSW_S1      (23)      //!< Bit position for CSU_CSL21_NSW_S1.
#define BM_CSU_CSL21_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL21_NSW_S1.

//! @brief Get value of CSU_CSL21_NSW_S1 from a register value.
#define BG_CSU_CSL21_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_NSW_S1) >> BP_CSU_CSL21_NSW_S1)

//! @brief Format value for bitfield CSU_CSL21_NSW_S1.
#define BF_CSU_CSL21_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_NSW_S1) & BM_CSU_CSL21_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL21_NSW_S1(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_NSW_S1) | BF_CSU_CSL21_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL21, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL21_LOCK_S1      (24)      //!< Bit position for CSU_CSL21_LOCK_S1.
#define BM_CSU_CSL21_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL21_LOCK_S1.

//! @brief Get value of CSU_CSL21_LOCK_S1 from a register value.
#define BG_CSU_CSL21_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL21_LOCK_S1) >> BP_CSU_CSL21_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL21_LOCK_S1.
#define BF_CSU_CSL21_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL21_LOCK_S1) & BM_CSU_CSL21_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL21_LOCK_S1(v)   (HW_CSU_CSL21_WR((HW_CSU_CSL21_RD() & ~BM_CSU_CSL21_LOCK_S1) | BF_CSU_CSL21_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL22 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL22 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl22
{
    reg32_t U;
    struct _hw_csu_csl22_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl22_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL22 register
 */
//@{
#define HW_CSU_CSL22_ADDR      (REGS_CSU_BASE + 0x58)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL22           (*(volatile hw_csu_csl22_t *) HW_CSU_CSL22_ADDR)
#define HW_CSU_CSL22_RD()      (HW_CSU_CSL22.U)
#define HW_CSU_CSL22_WR(v)     (HW_CSU_CSL22.U = (v))
#define HW_CSU_CSL22_SET(v)    (HW_CSU_CSL22_WR(HW_CSU_CSL22_RD() |  (v)))
#define HW_CSU_CSL22_CLR(v)    (HW_CSU_CSL22_WR(HW_CSU_CSL22_RD() & ~(v)))
#define HW_CSU_CSL22_TOG(v)    (HW_CSU_CSL22_WR(HW_CSU_CSL22_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL22 bitfields
 */

/*! @name Register CSU_CSL22, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL22_SUR_S2      (0)      //!< Bit position for CSU_CSL22_SUR_S2.
#define BM_CSU_CSL22_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL22_SUR_S2.

//! @brief Get value of CSU_CSL22_SUR_S2 from a register value.
#define BG_CSU_CSL22_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_SUR_S2) >> BP_CSU_CSL22_SUR_S2)

//! @brief Format value for bitfield CSU_CSL22_SUR_S2.
#define BF_CSU_CSL22_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_SUR_S2) & BM_CSU_CSL22_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL22_SUR_S2(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_SUR_S2) | BF_CSU_CSL22_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL22_SSR_S2      (1)      //!< Bit position for CSU_CSL22_SSR_S2.
#define BM_CSU_CSL22_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL22_SSR_S2.

//! @brief Get value of CSU_CSL22_SSR_S2 from a register value.
#define BG_CSU_CSL22_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_SSR_S2) >> BP_CSU_CSL22_SSR_S2)

//! @brief Format value for bitfield CSU_CSL22_SSR_S2.
#define BF_CSU_CSL22_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_SSR_S2) & BM_CSU_CSL22_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL22_SSR_S2(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_SSR_S2) | BF_CSU_CSL22_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL22_NUR_S2      (2)      //!< Bit position for CSU_CSL22_NUR_S2.
#define BM_CSU_CSL22_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL22_NUR_S2.

//! @brief Get value of CSU_CSL22_NUR_S2 from a register value.
#define BG_CSU_CSL22_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_NUR_S2) >> BP_CSU_CSL22_NUR_S2)

//! @brief Format value for bitfield CSU_CSL22_NUR_S2.
#define BF_CSU_CSL22_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_NUR_S2) & BM_CSU_CSL22_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL22_NUR_S2(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_NUR_S2) | BF_CSU_CSL22_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL22_NSR_S2      (3)      //!< Bit position for CSU_CSL22_NSR_S2.
#define BM_CSU_CSL22_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL22_NSR_S2.

//! @brief Get value of CSU_CSL22_NSR_S2 from a register value.
#define BG_CSU_CSL22_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_NSR_S2) >> BP_CSU_CSL22_NSR_S2)

//! @brief Format value for bitfield CSU_CSL22_NSR_S2.
#define BF_CSU_CSL22_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_NSR_S2) & BM_CSU_CSL22_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL22_NSR_S2(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_NSR_S2) | BF_CSU_CSL22_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL22_SUW_S2      (4)      //!< Bit position for CSU_CSL22_SUW_S2.
#define BM_CSU_CSL22_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL22_SUW_S2.

//! @brief Get value of CSU_CSL22_SUW_S2 from a register value.
#define BG_CSU_CSL22_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_SUW_S2) >> BP_CSU_CSL22_SUW_S2)

//! @brief Format value for bitfield CSU_CSL22_SUW_S2.
#define BF_CSU_CSL22_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_SUW_S2) & BM_CSU_CSL22_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL22_SUW_S2(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_SUW_S2) | BF_CSU_CSL22_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL22_SSW_S2      (5)      //!< Bit position for CSU_CSL22_SSW_S2.
#define BM_CSU_CSL22_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL22_SSW_S2.

//! @brief Get value of CSU_CSL22_SSW_S2 from a register value.
#define BG_CSU_CSL22_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_SSW_S2) >> BP_CSU_CSL22_SSW_S2)

//! @brief Format value for bitfield CSU_CSL22_SSW_S2.
#define BF_CSU_CSL22_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_SSW_S2) & BM_CSU_CSL22_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL22_SSW_S2(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_SSW_S2) | BF_CSU_CSL22_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL22_NUW_S2      (6)      //!< Bit position for CSU_CSL22_NUW_S2.
#define BM_CSU_CSL22_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL22_NUW_S2.

//! @brief Get value of CSU_CSL22_NUW_S2 from a register value.
#define BG_CSU_CSL22_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_NUW_S2) >> BP_CSU_CSL22_NUW_S2)

//! @brief Format value for bitfield CSU_CSL22_NUW_S2.
#define BF_CSU_CSL22_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_NUW_S2) & BM_CSU_CSL22_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL22_NUW_S2(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_NUW_S2) | BF_CSU_CSL22_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL22_NSW_S2      (7)      //!< Bit position for CSU_CSL22_NSW_S2.
#define BM_CSU_CSL22_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL22_NSW_S2.

//! @brief Get value of CSU_CSL22_NSW_S2 from a register value.
#define BG_CSU_CSL22_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_NSW_S2) >> BP_CSU_CSL22_NSW_S2)

//! @brief Format value for bitfield CSU_CSL22_NSW_S2.
#define BF_CSU_CSL22_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_NSW_S2) & BM_CSU_CSL22_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL22_NSW_S2(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_NSW_S2) | BF_CSU_CSL22_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL22_LOCK_S2      (8)      //!< Bit position for CSU_CSL22_LOCK_S2.
#define BM_CSU_CSL22_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL22_LOCK_S2.

//! @brief Get value of CSU_CSL22_LOCK_S2 from a register value.
#define BG_CSU_CSL22_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_LOCK_S2) >> BP_CSU_CSL22_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL22_LOCK_S2.
#define BF_CSU_CSL22_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_LOCK_S2) & BM_CSU_CSL22_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL22_LOCK_S2(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_LOCK_S2) | BF_CSU_CSL22_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL22_SUR_S1      (16)      //!< Bit position for CSU_CSL22_SUR_S1.
#define BM_CSU_CSL22_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL22_SUR_S1.

//! @brief Get value of CSU_CSL22_SUR_S1 from a register value.
#define BG_CSU_CSL22_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_SUR_S1) >> BP_CSU_CSL22_SUR_S1)

//! @brief Format value for bitfield CSU_CSL22_SUR_S1.
#define BF_CSU_CSL22_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_SUR_S1) & BM_CSU_CSL22_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL22_SUR_S1(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_SUR_S1) | BF_CSU_CSL22_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL22_SSR_S1      (17)      //!< Bit position for CSU_CSL22_SSR_S1.
#define BM_CSU_CSL22_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL22_SSR_S1.

//! @brief Get value of CSU_CSL22_SSR_S1 from a register value.
#define BG_CSU_CSL22_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_SSR_S1) >> BP_CSU_CSL22_SSR_S1)

//! @brief Format value for bitfield CSU_CSL22_SSR_S1.
#define BF_CSU_CSL22_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_SSR_S1) & BM_CSU_CSL22_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL22_SSR_S1(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_SSR_S1) | BF_CSU_CSL22_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL22_NUR_S1      (18)      //!< Bit position for CSU_CSL22_NUR_S1.
#define BM_CSU_CSL22_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL22_NUR_S1.

//! @brief Get value of CSU_CSL22_NUR_S1 from a register value.
#define BG_CSU_CSL22_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_NUR_S1) >> BP_CSU_CSL22_NUR_S1)

//! @brief Format value for bitfield CSU_CSL22_NUR_S1.
#define BF_CSU_CSL22_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_NUR_S1) & BM_CSU_CSL22_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL22_NUR_S1(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_NUR_S1) | BF_CSU_CSL22_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL22_NSR_S1      (19)      //!< Bit position for CSU_CSL22_NSR_S1.
#define BM_CSU_CSL22_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL22_NSR_S1.

//! @brief Get value of CSU_CSL22_NSR_S1 from a register value.
#define BG_CSU_CSL22_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_NSR_S1) >> BP_CSU_CSL22_NSR_S1)

//! @brief Format value for bitfield CSU_CSL22_NSR_S1.
#define BF_CSU_CSL22_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_NSR_S1) & BM_CSU_CSL22_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL22_NSR_S1(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_NSR_S1) | BF_CSU_CSL22_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL22_SUW_S1      (20)      //!< Bit position for CSU_CSL22_SUW_S1.
#define BM_CSU_CSL22_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL22_SUW_S1.

//! @brief Get value of CSU_CSL22_SUW_S1 from a register value.
#define BG_CSU_CSL22_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_SUW_S1) >> BP_CSU_CSL22_SUW_S1)

//! @brief Format value for bitfield CSU_CSL22_SUW_S1.
#define BF_CSU_CSL22_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_SUW_S1) & BM_CSU_CSL22_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL22_SUW_S1(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_SUW_S1) | BF_CSU_CSL22_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL22_SSW_S1      (21)      //!< Bit position for CSU_CSL22_SSW_S1.
#define BM_CSU_CSL22_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL22_SSW_S1.

//! @brief Get value of CSU_CSL22_SSW_S1 from a register value.
#define BG_CSU_CSL22_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_SSW_S1) >> BP_CSU_CSL22_SSW_S1)

//! @brief Format value for bitfield CSU_CSL22_SSW_S1.
#define BF_CSU_CSL22_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_SSW_S1) & BM_CSU_CSL22_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL22_SSW_S1(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_SSW_S1) | BF_CSU_CSL22_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL22_NUW_S1      (22)      //!< Bit position for CSU_CSL22_NUW_S1.
#define BM_CSU_CSL22_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL22_NUW_S1.

//! @brief Get value of CSU_CSL22_NUW_S1 from a register value.
#define BG_CSU_CSL22_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_NUW_S1) >> BP_CSU_CSL22_NUW_S1)

//! @brief Format value for bitfield CSU_CSL22_NUW_S1.
#define BF_CSU_CSL22_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_NUW_S1) & BM_CSU_CSL22_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL22_NUW_S1(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_NUW_S1) | BF_CSU_CSL22_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL22_NSW_S1      (23)      //!< Bit position for CSU_CSL22_NSW_S1.
#define BM_CSU_CSL22_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL22_NSW_S1.

//! @brief Get value of CSU_CSL22_NSW_S1 from a register value.
#define BG_CSU_CSL22_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_NSW_S1) >> BP_CSU_CSL22_NSW_S1)

//! @brief Format value for bitfield CSU_CSL22_NSW_S1.
#define BF_CSU_CSL22_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_NSW_S1) & BM_CSU_CSL22_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL22_NSW_S1(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_NSW_S1) | BF_CSU_CSL22_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL22, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL22_LOCK_S1      (24)      //!< Bit position for CSU_CSL22_LOCK_S1.
#define BM_CSU_CSL22_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL22_LOCK_S1.

//! @brief Get value of CSU_CSL22_LOCK_S1 from a register value.
#define BG_CSU_CSL22_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL22_LOCK_S1) >> BP_CSU_CSL22_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL22_LOCK_S1.
#define BF_CSU_CSL22_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL22_LOCK_S1) & BM_CSU_CSL22_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL22_LOCK_S1(v)   (HW_CSU_CSL22_WR((HW_CSU_CSL22_RD() & ~BM_CSU_CSL22_LOCK_S1) | BF_CSU_CSL22_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL23 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL23 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl23
{
    reg32_t U;
    struct _hw_csu_csl23_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl23_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL23 register
 */
//@{
#define HW_CSU_CSL23_ADDR      (REGS_CSU_BASE + 0x5c)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL23           (*(volatile hw_csu_csl23_t *) HW_CSU_CSL23_ADDR)
#define HW_CSU_CSL23_RD()      (HW_CSU_CSL23.U)
#define HW_CSU_CSL23_WR(v)     (HW_CSU_CSL23.U = (v))
#define HW_CSU_CSL23_SET(v)    (HW_CSU_CSL23_WR(HW_CSU_CSL23_RD() |  (v)))
#define HW_CSU_CSL23_CLR(v)    (HW_CSU_CSL23_WR(HW_CSU_CSL23_RD() & ~(v)))
#define HW_CSU_CSL23_TOG(v)    (HW_CSU_CSL23_WR(HW_CSU_CSL23_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL23 bitfields
 */

/*! @name Register CSU_CSL23, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL23_SUR_S2      (0)      //!< Bit position for CSU_CSL23_SUR_S2.
#define BM_CSU_CSL23_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL23_SUR_S2.

//! @brief Get value of CSU_CSL23_SUR_S2 from a register value.
#define BG_CSU_CSL23_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_SUR_S2) >> BP_CSU_CSL23_SUR_S2)

//! @brief Format value for bitfield CSU_CSL23_SUR_S2.
#define BF_CSU_CSL23_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_SUR_S2) & BM_CSU_CSL23_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL23_SUR_S2(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_SUR_S2) | BF_CSU_CSL23_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL23_SSR_S2      (1)      //!< Bit position for CSU_CSL23_SSR_S2.
#define BM_CSU_CSL23_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL23_SSR_S2.

//! @brief Get value of CSU_CSL23_SSR_S2 from a register value.
#define BG_CSU_CSL23_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_SSR_S2) >> BP_CSU_CSL23_SSR_S2)

//! @brief Format value for bitfield CSU_CSL23_SSR_S2.
#define BF_CSU_CSL23_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_SSR_S2) & BM_CSU_CSL23_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL23_SSR_S2(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_SSR_S2) | BF_CSU_CSL23_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL23_NUR_S2      (2)      //!< Bit position for CSU_CSL23_NUR_S2.
#define BM_CSU_CSL23_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL23_NUR_S2.

//! @brief Get value of CSU_CSL23_NUR_S2 from a register value.
#define BG_CSU_CSL23_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_NUR_S2) >> BP_CSU_CSL23_NUR_S2)

//! @brief Format value for bitfield CSU_CSL23_NUR_S2.
#define BF_CSU_CSL23_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_NUR_S2) & BM_CSU_CSL23_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL23_NUR_S2(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_NUR_S2) | BF_CSU_CSL23_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL23_NSR_S2      (3)      //!< Bit position for CSU_CSL23_NSR_S2.
#define BM_CSU_CSL23_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL23_NSR_S2.

//! @brief Get value of CSU_CSL23_NSR_S2 from a register value.
#define BG_CSU_CSL23_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_NSR_S2) >> BP_CSU_CSL23_NSR_S2)

//! @brief Format value for bitfield CSU_CSL23_NSR_S2.
#define BF_CSU_CSL23_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_NSR_S2) & BM_CSU_CSL23_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL23_NSR_S2(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_NSR_S2) | BF_CSU_CSL23_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL23_SUW_S2      (4)      //!< Bit position for CSU_CSL23_SUW_S2.
#define BM_CSU_CSL23_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL23_SUW_S2.

//! @brief Get value of CSU_CSL23_SUW_S2 from a register value.
#define BG_CSU_CSL23_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_SUW_S2) >> BP_CSU_CSL23_SUW_S2)

//! @brief Format value for bitfield CSU_CSL23_SUW_S2.
#define BF_CSU_CSL23_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_SUW_S2) & BM_CSU_CSL23_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL23_SUW_S2(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_SUW_S2) | BF_CSU_CSL23_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL23_SSW_S2      (5)      //!< Bit position for CSU_CSL23_SSW_S2.
#define BM_CSU_CSL23_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL23_SSW_S2.

//! @brief Get value of CSU_CSL23_SSW_S2 from a register value.
#define BG_CSU_CSL23_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_SSW_S2) >> BP_CSU_CSL23_SSW_S2)

//! @brief Format value for bitfield CSU_CSL23_SSW_S2.
#define BF_CSU_CSL23_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_SSW_S2) & BM_CSU_CSL23_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL23_SSW_S2(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_SSW_S2) | BF_CSU_CSL23_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL23_NUW_S2      (6)      //!< Bit position for CSU_CSL23_NUW_S2.
#define BM_CSU_CSL23_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL23_NUW_S2.

//! @brief Get value of CSU_CSL23_NUW_S2 from a register value.
#define BG_CSU_CSL23_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_NUW_S2) >> BP_CSU_CSL23_NUW_S2)

//! @brief Format value for bitfield CSU_CSL23_NUW_S2.
#define BF_CSU_CSL23_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_NUW_S2) & BM_CSU_CSL23_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL23_NUW_S2(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_NUW_S2) | BF_CSU_CSL23_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL23_NSW_S2      (7)      //!< Bit position for CSU_CSL23_NSW_S2.
#define BM_CSU_CSL23_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL23_NSW_S2.

//! @brief Get value of CSU_CSL23_NSW_S2 from a register value.
#define BG_CSU_CSL23_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_NSW_S2) >> BP_CSU_CSL23_NSW_S2)

//! @brief Format value for bitfield CSU_CSL23_NSW_S2.
#define BF_CSU_CSL23_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_NSW_S2) & BM_CSU_CSL23_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL23_NSW_S2(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_NSW_S2) | BF_CSU_CSL23_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL23_LOCK_S2      (8)      //!< Bit position for CSU_CSL23_LOCK_S2.
#define BM_CSU_CSL23_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL23_LOCK_S2.

//! @brief Get value of CSU_CSL23_LOCK_S2 from a register value.
#define BG_CSU_CSL23_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_LOCK_S2) >> BP_CSU_CSL23_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL23_LOCK_S2.
#define BF_CSU_CSL23_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_LOCK_S2) & BM_CSU_CSL23_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL23_LOCK_S2(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_LOCK_S2) | BF_CSU_CSL23_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL23_SUR_S1      (16)      //!< Bit position for CSU_CSL23_SUR_S1.
#define BM_CSU_CSL23_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL23_SUR_S1.

//! @brief Get value of CSU_CSL23_SUR_S1 from a register value.
#define BG_CSU_CSL23_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_SUR_S1) >> BP_CSU_CSL23_SUR_S1)

//! @brief Format value for bitfield CSU_CSL23_SUR_S1.
#define BF_CSU_CSL23_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_SUR_S1) & BM_CSU_CSL23_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL23_SUR_S1(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_SUR_S1) | BF_CSU_CSL23_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL23_SSR_S1      (17)      //!< Bit position for CSU_CSL23_SSR_S1.
#define BM_CSU_CSL23_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL23_SSR_S1.

//! @brief Get value of CSU_CSL23_SSR_S1 from a register value.
#define BG_CSU_CSL23_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_SSR_S1) >> BP_CSU_CSL23_SSR_S1)

//! @brief Format value for bitfield CSU_CSL23_SSR_S1.
#define BF_CSU_CSL23_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_SSR_S1) & BM_CSU_CSL23_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL23_SSR_S1(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_SSR_S1) | BF_CSU_CSL23_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL23_NUR_S1      (18)      //!< Bit position for CSU_CSL23_NUR_S1.
#define BM_CSU_CSL23_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL23_NUR_S1.

//! @brief Get value of CSU_CSL23_NUR_S1 from a register value.
#define BG_CSU_CSL23_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_NUR_S1) >> BP_CSU_CSL23_NUR_S1)

//! @brief Format value for bitfield CSU_CSL23_NUR_S1.
#define BF_CSU_CSL23_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_NUR_S1) & BM_CSU_CSL23_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL23_NUR_S1(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_NUR_S1) | BF_CSU_CSL23_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL23_NSR_S1      (19)      //!< Bit position for CSU_CSL23_NSR_S1.
#define BM_CSU_CSL23_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL23_NSR_S1.

//! @brief Get value of CSU_CSL23_NSR_S1 from a register value.
#define BG_CSU_CSL23_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_NSR_S1) >> BP_CSU_CSL23_NSR_S1)

//! @brief Format value for bitfield CSU_CSL23_NSR_S1.
#define BF_CSU_CSL23_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_NSR_S1) & BM_CSU_CSL23_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL23_NSR_S1(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_NSR_S1) | BF_CSU_CSL23_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL23_SUW_S1      (20)      //!< Bit position for CSU_CSL23_SUW_S1.
#define BM_CSU_CSL23_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL23_SUW_S1.

//! @brief Get value of CSU_CSL23_SUW_S1 from a register value.
#define BG_CSU_CSL23_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_SUW_S1) >> BP_CSU_CSL23_SUW_S1)

//! @brief Format value for bitfield CSU_CSL23_SUW_S1.
#define BF_CSU_CSL23_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_SUW_S1) & BM_CSU_CSL23_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL23_SUW_S1(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_SUW_S1) | BF_CSU_CSL23_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL23_SSW_S1      (21)      //!< Bit position for CSU_CSL23_SSW_S1.
#define BM_CSU_CSL23_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL23_SSW_S1.

//! @brief Get value of CSU_CSL23_SSW_S1 from a register value.
#define BG_CSU_CSL23_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_SSW_S1) >> BP_CSU_CSL23_SSW_S1)

//! @brief Format value for bitfield CSU_CSL23_SSW_S1.
#define BF_CSU_CSL23_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_SSW_S1) & BM_CSU_CSL23_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL23_SSW_S1(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_SSW_S1) | BF_CSU_CSL23_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL23_NUW_S1      (22)      //!< Bit position for CSU_CSL23_NUW_S1.
#define BM_CSU_CSL23_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL23_NUW_S1.

//! @brief Get value of CSU_CSL23_NUW_S1 from a register value.
#define BG_CSU_CSL23_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_NUW_S1) >> BP_CSU_CSL23_NUW_S1)

//! @brief Format value for bitfield CSU_CSL23_NUW_S1.
#define BF_CSU_CSL23_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_NUW_S1) & BM_CSU_CSL23_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL23_NUW_S1(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_NUW_S1) | BF_CSU_CSL23_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL23_NSW_S1      (23)      //!< Bit position for CSU_CSL23_NSW_S1.
#define BM_CSU_CSL23_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL23_NSW_S1.

//! @brief Get value of CSU_CSL23_NSW_S1 from a register value.
#define BG_CSU_CSL23_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_NSW_S1) >> BP_CSU_CSL23_NSW_S1)

//! @brief Format value for bitfield CSU_CSL23_NSW_S1.
#define BF_CSU_CSL23_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_NSW_S1) & BM_CSU_CSL23_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL23_NSW_S1(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_NSW_S1) | BF_CSU_CSL23_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL23, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL23_LOCK_S1      (24)      //!< Bit position for CSU_CSL23_LOCK_S1.
#define BM_CSU_CSL23_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL23_LOCK_S1.

//! @brief Get value of CSU_CSL23_LOCK_S1 from a register value.
#define BG_CSU_CSL23_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL23_LOCK_S1) >> BP_CSU_CSL23_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL23_LOCK_S1.
#define BF_CSU_CSL23_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL23_LOCK_S1) & BM_CSU_CSL23_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL23_LOCK_S1(v)   (HW_CSU_CSL23_WR((HW_CSU_CSL23_RD() & ~BM_CSU_CSL23_LOCK_S1) | BF_CSU_CSL23_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL24 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL24 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl24
{
    reg32_t U;
    struct _hw_csu_csl24_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl24_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL24 register
 */
//@{
#define HW_CSU_CSL24_ADDR      (REGS_CSU_BASE + 0x60)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL24           (*(volatile hw_csu_csl24_t *) HW_CSU_CSL24_ADDR)
#define HW_CSU_CSL24_RD()      (HW_CSU_CSL24.U)
#define HW_CSU_CSL24_WR(v)     (HW_CSU_CSL24.U = (v))
#define HW_CSU_CSL24_SET(v)    (HW_CSU_CSL24_WR(HW_CSU_CSL24_RD() |  (v)))
#define HW_CSU_CSL24_CLR(v)    (HW_CSU_CSL24_WR(HW_CSU_CSL24_RD() & ~(v)))
#define HW_CSU_CSL24_TOG(v)    (HW_CSU_CSL24_WR(HW_CSU_CSL24_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL24 bitfields
 */

/*! @name Register CSU_CSL24, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL24_SUR_S2      (0)      //!< Bit position for CSU_CSL24_SUR_S2.
#define BM_CSU_CSL24_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL24_SUR_S2.

//! @brief Get value of CSU_CSL24_SUR_S2 from a register value.
#define BG_CSU_CSL24_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_SUR_S2) >> BP_CSU_CSL24_SUR_S2)

//! @brief Format value for bitfield CSU_CSL24_SUR_S2.
#define BF_CSU_CSL24_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_SUR_S2) & BM_CSU_CSL24_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL24_SUR_S2(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_SUR_S2) | BF_CSU_CSL24_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL24_SSR_S2      (1)      //!< Bit position for CSU_CSL24_SSR_S2.
#define BM_CSU_CSL24_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL24_SSR_S2.

//! @brief Get value of CSU_CSL24_SSR_S2 from a register value.
#define BG_CSU_CSL24_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_SSR_S2) >> BP_CSU_CSL24_SSR_S2)

//! @brief Format value for bitfield CSU_CSL24_SSR_S2.
#define BF_CSU_CSL24_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_SSR_S2) & BM_CSU_CSL24_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL24_SSR_S2(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_SSR_S2) | BF_CSU_CSL24_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL24_NUR_S2      (2)      //!< Bit position for CSU_CSL24_NUR_S2.
#define BM_CSU_CSL24_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL24_NUR_S2.

//! @brief Get value of CSU_CSL24_NUR_S2 from a register value.
#define BG_CSU_CSL24_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_NUR_S2) >> BP_CSU_CSL24_NUR_S2)

//! @brief Format value for bitfield CSU_CSL24_NUR_S2.
#define BF_CSU_CSL24_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_NUR_S2) & BM_CSU_CSL24_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL24_NUR_S2(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_NUR_S2) | BF_CSU_CSL24_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL24_NSR_S2      (3)      //!< Bit position for CSU_CSL24_NSR_S2.
#define BM_CSU_CSL24_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL24_NSR_S2.

//! @brief Get value of CSU_CSL24_NSR_S2 from a register value.
#define BG_CSU_CSL24_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_NSR_S2) >> BP_CSU_CSL24_NSR_S2)

//! @brief Format value for bitfield CSU_CSL24_NSR_S2.
#define BF_CSU_CSL24_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_NSR_S2) & BM_CSU_CSL24_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL24_NSR_S2(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_NSR_S2) | BF_CSU_CSL24_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL24_SUW_S2      (4)      //!< Bit position for CSU_CSL24_SUW_S2.
#define BM_CSU_CSL24_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL24_SUW_S2.

//! @brief Get value of CSU_CSL24_SUW_S2 from a register value.
#define BG_CSU_CSL24_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_SUW_S2) >> BP_CSU_CSL24_SUW_S2)

//! @brief Format value for bitfield CSU_CSL24_SUW_S2.
#define BF_CSU_CSL24_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_SUW_S2) & BM_CSU_CSL24_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL24_SUW_S2(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_SUW_S2) | BF_CSU_CSL24_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL24_SSW_S2      (5)      //!< Bit position for CSU_CSL24_SSW_S2.
#define BM_CSU_CSL24_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL24_SSW_S2.

//! @brief Get value of CSU_CSL24_SSW_S2 from a register value.
#define BG_CSU_CSL24_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_SSW_S2) >> BP_CSU_CSL24_SSW_S2)

//! @brief Format value for bitfield CSU_CSL24_SSW_S2.
#define BF_CSU_CSL24_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_SSW_S2) & BM_CSU_CSL24_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL24_SSW_S2(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_SSW_S2) | BF_CSU_CSL24_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL24_NUW_S2      (6)      //!< Bit position for CSU_CSL24_NUW_S2.
#define BM_CSU_CSL24_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL24_NUW_S2.

//! @brief Get value of CSU_CSL24_NUW_S2 from a register value.
#define BG_CSU_CSL24_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_NUW_S2) >> BP_CSU_CSL24_NUW_S2)

//! @brief Format value for bitfield CSU_CSL24_NUW_S2.
#define BF_CSU_CSL24_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_NUW_S2) & BM_CSU_CSL24_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL24_NUW_S2(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_NUW_S2) | BF_CSU_CSL24_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL24_NSW_S2      (7)      //!< Bit position for CSU_CSL24_NSW_S2.
#define BM_CSU_CSL24_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL24_NSW_S2.

//! @brief Get value of CSU_CSL24_NSW_S2 from a register value.
#define BG_CSU_CSL24_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_NSW_S2) >> BP_CSU_CSL24_NSW_S2)

//! @brief Format value for bitfield CSU_CSL24_NSW_S2.
#define BF_CSU_CSL24_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_NSW_S2) & BM_CSU_CSL24_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL24_NSW_S2(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_NSW_S2) | BF_CSU_CSL24_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL24_LOCK_S2      (8)      //!< Bit position for CSU_CSL24_LOCK_S2.
#define BM_CSU_CSL24_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL24_LOCK_S2.

//! @brief Get value of CSU_CSL24_LOCK_S2 from a register value.
#define BG_CSU_CSL24_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_LOCK_S2) >> BP_CSU_CSL24_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL24_LOCK_S2.
#define BF_CSU_CSL24_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_LOCK_S2) & BM_CSU_CSL24_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL24_LOCK_S2(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_LOCK_S2) | BF_CSU_CSL24_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL24_SUR_S1      (16)      //!< Bit position for CSU_CSL24_SUR_S1.
#define BM_CSU_CSL24_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL24_SUR_S1.

//! @brief Get value of CSU_CSL24_SUR_S1 from a register value.
#define BG_CSU_CSL24_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_SUR_S1) >> BP_CSU_CSL24_SUR_S1)

//! @brief Format value for bitfield CSU_CSL24_SUR_S1.
#define BF_CSU_CSL24_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_SUR_S1) & BM_CSU_CSL24_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL24_SUR_S1(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_SUR_S1) | BF_CSU_CSL24_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL24_SSR_S1      (17)      //!< Bit position for CSU_CSL24_SSR_S1.
#define BM_CSU_CSL24_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL24_SSR_S1.

//! @brief Get value of CSU_CSL24_SSR_S1 from a register value.
#define BG_CSU_CSL24_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_SSR_S1) >> BP_CSU_CSL24_SSR_S1)

//! @brief Format value for bitfield CSU_CSL24_SSR_S1.
#define BF_CSU_CSL24_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_SSR_S1) & BM_CSU_CSL24_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL24_SSR_S1(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_SSR_S1) | BF_CSU_CSL24_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL24_NUR_S1      (18)      //!< Bit position for CSU_CSL24_NUR_S1.
#define BM_CSU_CSL24_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL24_NUR_S1.

//! @brief Get value of CSU_CSL24_NUR_S1 from a register value.
#define BG_CSU_CSL24_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_NUR_S1) >> BP_CSU_CSL24_NUR_S1)

//! @brief Format value for bitfield CSU_CSL24_NUR_S1.
#define BF_CSU_CSL24_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_NUR_S1) & BM_CSU_CSL24_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL24_NUR_S1(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_NUR_S1) | BF_CSU_CSL24_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL24_NSR_S1      (19)      //!< Bit position for CSU_CSL24_NSR_S1.
#define BM_CSU_CSL24_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL24_NSR_S1.

//! @brief Get value of CSU_CSL24_NSR_S1 from a register value.
#define BG_CSU_CSL24_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_NSR_S1) >> BP_CSU_CSL24_NSR_S1)

//! @brief Format value for bitfield CSU_CSL24_NSR_S1.
#define BF_CSU_CSL24_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_NSR_S1) & BM_CSU_CSL24_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL24_NSR_S1(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_NSR_S1) | BF_CSU_CSL24_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL24_SUW_S1      (20)      //!< Bit position for CSU_CSL24_SUW_S1.
#define BM_CSU_CSL24_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL24_SUW_S1.

//! @brief Get value of CSU_CSL24_SUW_S1 from a register value.
#define BG_CSU_CSL24_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_SUW_S1) >> BP_CSU_CSL24_SUW_S1)

//! @brief Format value for bitfield CSU_CSL24_SUW_S1.
#define BF_CSU_CSL24_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_SUW_S1) & BM_CSU_CSL24_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL24_SUW_S1(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_SUW_S1) | BF_CSU_CSL24_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL24_SSW_S1      (21)      //!< Bit position for CSU_CSL24_SSW_S1.
#define BM_CSU_CSL24_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL24_SSW_S1.

//! @brief Get value of CSU_CSL24_SSW_S1 from a register value.
#define BG_CSU_CSL24_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_SSW_S1) >> BP_CSU_CSL24_SSW_S1)

//! @brief Format value for bitfield CSU_CSL24_SSW_S1.
#define BF_CSU_CSL24_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_SSW_S1) & BM_CSU_CSL24_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL24_SSW_S1(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_SSW_S1) | BF_CSU_CSL24_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL24_NUW_S1      (22)      //!< Bit position for CSU_CSL24_NUW_S1.
#define BM_CSU_CSL24_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL24_NUW_S1.

//! @brief Get value of CSU_CSL24_NUW_S1 from a register value.
#define BG_CSU_CSL24_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_NUW_S1) >> BP_CSU_CSL24_NUW_S1)

//! @brief Format value for bitfield CSU_CSL24_NUW_S1.
#define BF_CSU_CSL24_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_NUW_S1) & BM_CSU_CSL24_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL24_NUW_S1(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_NUW_S1) | BF_CSU_CSL24_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL24_NSW_S1      (23)      //!< Bit position for CSU_CSL24_NSW_S1.
#define BM_CSU_CSL24_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL24_NSW_S1.

//! @brief Get value of CSU_CSL24_NSW_S1 from a register value.
#define BG_CSU_CSL24_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_NSW_S1) >> BP_CSU_CSL24_NSW_S1)

//! @brief Format value for bitfield CSU_CSL24_NSW_S1.
#define BF_CSU_CSL24_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_NSW_S1) & BM_CSU_CSL24_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL24_NSW_S1(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_NSW_S1) | BF_CSU_CSL24_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL24, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL24_LOCK_S1      (24)      //!< Bit position for CSU_CSL24_LOCK_S1.
#define BM_CSU_CSL24_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL24_LOCK_S1.

//! @brief Get value of CSU_CSL24_LOCK_S1 from a register value.
#define BG_CSU_CSL24_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL24_LOCK_S1) >> BP_CSU_CSL24_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL24_LOCK_S1.
#define BF_CSU_CSL24_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL24_LOCK_S1) & BM_CSU_CSL24_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL24_LOCK_S1(v)   (HW_CSU_CSL24_WR((HW_CSU_CSL24_RD() & ~BM_CSU_CSL24_LOCK_S1) | BF_CSU_CSL24_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL25 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL25 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl25
{
    reg32_t U;
    struct _hw_csu_csl25_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl25_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL25 register
 */
//@{
#define HW_CSU_CSL25_ADDR      (REGS_CSU_BASE + 0x64)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL25           (*(volatile hw_csu_csl25_t *) HW_CSU_CSL25_ADDR)
#define HW_CSU_CSL25_RD()      (HW_CSU_CSL25.U)
#define HW_CSU_CSL25_WR(v)     (HW_CSU_CSL25.U = (v))
#define HW_CSU_CSL25_SET(v)    (HW_CSU_CSL25_WR(HW_CSU_CSL25_RD() |  (v)))
#define HW_CSU_CSL25_CLR(v)    (HW_CSU_CSL25_WR(HW_CSU_CSL25_RD() & ~(v)))
#define HW_CSU_CSL25_TOG(v)    (HW_CSU_CSL25_WR(HW_CSU_CSL25_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL25 bitfields
 */

/*! @name Register CSU_CSL25, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL25_SUR_S2      (0)      //!< Bit position for CSU_CSL25_SUR_S2.
#define BM_CSU_CSL25_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL25_SUR_S2.

//! @brief Get value of CSU_CSL25_SUR_S2 from a register value.
#define BG_CSU_CSL25_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_SUR_S2) >> BP_CSU_CSL25_SUR_S2)

//! @brief Format value for bitfield CSU_CSL25_SUR_S2.
#define BF_CSU_CSL25_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_SUR_S2) & BM_CSU_CSL25_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL25_SUR_S2(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_SUR_S2) | BF_CSU_CSL25_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL25_SSR_S2      (1)      //!< Bit position for CSU_CSL25_SSR_S2.
#define BM_CSU_CSL25_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL25_SSR_S2.

//! @brief Get value of CSU_CSL25_SSR_S2 from a register value.
#define BG_CSU_CSL25_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_SSR_S2) >> BP_CSU_CSL25_SSR_S2)

//! @brief Format value for bitfield CSU_CSL25_SSR_S2.
#define BF_CSU_CSL25_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_SSR_S2) & BM_CSU_CSL25_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL25_SSR_S2(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_SSR_S2) | BF_CSU_CSL25_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL25_NUR_S2      (2)      //!< Bit position for CSU_CSL25_NUR_S2.
#define BM_CSU_CSL25_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL25_NUR_S2.

//! @brief Get value of CSU_CSL25_NUR_S2 from a register value.
#define BG_CSU_CSL25_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_NUR_S2) >> BP_CSU_CSL25_NUR_S2)

//! @brief Format value for bitfield CSU_CSL25_NUR_S2.
#define BF_CSU_CSL25_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_NUR_S2) & BM_CSU_CSL25_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL25_NUR_S2(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_NUR_S2) | BF_CSU_CSL25_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL25_NSR_S2      (3)      //!< Bit position for CSU_CSL25_NSR_S2.
#define BM_CSU_CSL25_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL25_NSR_S2.

//! @brief Get value of CSU_CSL25_NSR_S2 from a register value.
#define BG_CSU_CSL25_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_NSR_S2) >> BP_CSU_CSL25_NSR_S2)

//! @brief Format value for bitfield CSU_CSL25_NSR_S2.
#define BF_CSU_CSL25_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_NSR_S2) & BM_CSU_CSL25_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL25_NSR_S2(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_NSR_S2) | BF_CSU_CSL25_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL25_SUW_S2      (4)      //!< Bit position for CSU_CSL25_SUW_S2.
#define BM_CSU_CSL25_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL25_SUW_S2.

//! @brief Get value of CSU_CSL25_SUW_S2 from a register value.
#define BG_CSU_CSL25_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_SUW_S2) >> BP_CSU_CSL25_SUW_S2)

//! @brief Format value for bitfield CSU_CSL25_SUW_S2.
#define BF_CSU_CSL25_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_SUW_S2) & BM_CSU_CSL25_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL25_SUW_S2(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_SUW_S2) | BF_CSU_CSL25_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL25_SSW_S2      (5)      //!< Bit position for CSU_CSL25_SSW_S2.
#define BM_CSU_CSL25_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL25_SSW_S2.

//! @brief Get value of CSU_CSL25_SSW_S2 from a register value.
#define BG_CSU_CSL25_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_SSW_S2) >> BP_CSU_CSL25_SSW_S2)

//! @brief Format value for bitfield CSU_CSL25_SSW_S2.
#define BF_CSU_CSL25_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_SSW_S2) & BM_CSU_CSL25_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL25_SSW_S2(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_SSW_S2) | BF_CSU_CSL25_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL25_NUW_S2      (6)      //!< Bit position for CSU_CSL25_NUW_S2.
#define BM_CSU_CSL25_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL25_NUW_S2.

//! @brief Get value of CSU_CSL25_NUW_S2 from a register value.
#define BG_CSU_CSL25_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_NUW_S2) >> BP_CSU_CSL25_NUW_S2)

//! @brief Format value for bitfield CSU_CSL25_NUW_S2.
#define BF_CSU_CSL25_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_NUW_S2) & BM_CSU_CSL25_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL25_NUW_S2(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_NUW_S2) | BF_CSU_CSL25_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL25_NSW_S2      (7)      //!< Bit position for CSU_CSL25_NSW_S2.
#define BM_CSU_CSL25_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL25_NSW_S2.

//! @brief Get value of CSU_CSL25_NSW_S2 from a register value.
#define BG_CSU_CSL25_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_NSW_S2) >> BP_CSU_CSL25_NSW_S2)

//! @brief Format value for bitfield CSU_CSL25_NSW_S2.
#define BF_CSU_CSL25_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_NSW_S2) & BM_CSU_CSL25_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL25_NSW_S2(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_NSW_S2) | BF_CSU_CSL25_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL25_LOCK_S2      (8)      //!< Bit position for CSU_CSL25_LOCK_S2.
#define BM_CSU_CSL25_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL25_LOCK_S2.

//! @brief Get value of CSU_CSL25_LOCK_S2 from a register value.
#define BG_CSU_CSL25_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_LOCK_S2) >> BP_CSU_CSL25_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL25_LOCK_S2.
#define BF_CSU_CSL25_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_LOCK_S2) & BM_CSU_CSL25_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL25_LOCK_S2(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_LOCK_S2) | BF_CSU_CSL25_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL25_SUR_S1      (16)      //!< Bit position for CSU_CSL25_SUR_S1.
#define BM_CSU_CSL25_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL25_SUR_S1.

//! @brief Get value of CSU_CSL25_SUR_S1 from a register value.
#define BG_CSU_CSL25_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_SUR_S1) >> BP_CSU_CSL25_SUR_S1)

//! @brief Format value for bitfield CSU_CSL25_SUR_S1.
#define BF_CSU_CSL25_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_SUR_S1) & BM_CSU_CSL25_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL25_SUR_S1(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_SUR_S1) | BF_CSU_CSL25_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL25_SSR_S1      (17)      //!< Bit position for CSU_CSL25_SSR_S1.
#define BM_CSU_CSL25_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL25_SSR_S1.

//! @brief Get value of CSU_CSL25_SSR_S1 from a register value.
#define BG_CSU_CSL25_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_SSR_S1) >> BP_CSU_CSL25_SSR_S1)

//! @brief Format value for bitfield CSU_CSL25_SSR_S1.
#define BF_CSU_CSL25_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_SSR_S1) & BM_CSU_CSL25_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL25_SSR_S1(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_SSR_S1) | BF_CSU_CSL25_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL25_NUR_S1      (18)      //!< Bit position for CSU_CSL25_NUR_S1.
#define BM_CSU_CSL25_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL25_NUR_S1.

//! @brief Get value of CSU_CSL25_NUR_S1 from a register value.
#define BG_CSU_CSL25_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_NUR_S1) >> BP_CSU_CSL25_NUR_S1)

//! @brief Format value for bitfield CSU_CSL25_NUR_S1.
#define BF_CSU_CSL25_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_NUR_S1) & BM_CSU_CSL25_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL25_NUR_S1(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_NUR_S1) | BF_CSU_CSL25_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL25_NSR_S1      (19)      //!< Bit position for CSU_CSL25_NSR_S1.
#define BM_CSU_CSL25_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL25_NSR_S1.

//! @brief Get value of CSU_CSL25_NSR_S1 from a register value.
#define BG_CSU_CSL25_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_NSR_S1) >> BP_CSU_CSL25_NSR_S1)

//! @brief Format value for bitfield CSU_CSL25_NSR_S1.
#define BF_CSU_CSL25_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_NSR_S1) & BM_CSU_CSL25_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL25_NSR_S1(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_NSR_S1) | BF_CSU_CSL25_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL25_SUW_S1      (20)      //!< Bit position for CSU_CSL25_SUW_S1.
#define BM_CSU_CSL25_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL25_SUW_S1.

//! @brief Get value of CSU_CSL25_SUW_S1 from a register value.
#define BG_CSU_CSL25_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_SUW_S1) >> BP_CSU_CSL25_SUW_S1)

//! @brief Format value for bitfield CSU_CSL25_SUW_S1.
#define BF_CSU_CSL25_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_SUW_S1) & BM_CSU_CSL25_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL25_SUW_S1(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_SUW_S1) | BF_CSU_CSL25_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL25_SSW_S1      (21)      //!< Bit position for CSU_CSL25_SSW_S1.
#define BM_CSU_CSL25_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL25_SSW_S1.

//! @brief Get value of CSU_CSL25_SSW_S1 from a register value.
#define BG_CSU_CSL25_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_SSW_S1) >> BP_CSU_CSL25_SSW_S1)

//! @brief Format value for bitfield CSU_CSL25_SSW_S1.
#define BF_CSU_CSL25_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_SSW_S1) & BM_CSU_CSL25_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL25_SSW_S1(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_SSW_S1) | BF_CSU_CSL25_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL25_NUW_S1      (22)      //!< Bit position for CSU_CSL25_NUW_S1.
#define BM_CSU_CSL25_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL25_NUW_S1.

//! @brief Get value of CSU_CSL25_NUW_S1 from a register value.
#define BG_CSU_CSL25_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_NUW_S1) >> BP_CSU_CSL25_NUW_S1)

//! @brief Format value for bitfield CSU_CSL25_NUW_S1.
#define BF_CSU_CSL25_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_NUW_S1) & BM_CSU_CSL25_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL25_NUW_S1(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_NUW_S1) | BF_CSU_CSL25_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL25_NSW_S1      (23)      //!< Bit position for CSU_CSL25_NSW_S1.
#define BM_CSU_CSL25_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL25_NSW_S1.

//! @brief Get value of CSU_CSL25_NSW_S1 from a register value.
#define BG_CSU_CSL25_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_NSW_S1) >> BP_CSU_CSL25_NSW_S1)

//! @brief Format value for bitfield CSU_CSL25_NSW_S1.
#define BF_CSU_CSL25_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_NSW_S1) & BM_CSU_CSL25_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL25_NSW_S1(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_NSW_S1) | BF_CSU_CSL25_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL25, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL25_LOCK_S1      (24)      //!< Bit position for CSU_CSL25_LOCK_S1.
#define BM_CSU_CSL25_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL25_LOCK_S1.

//! @brief Get value of CSU_CSL25_LOCK_S1 from a register value.
#define BG_CSU_CSL25_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL25_LOCK_S1) >> BP_CSU_CSL25_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL25_LOCK_S1.
#define BF_CSU_CSL25_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL25_LOCK_S1) & BM_CSU_CSL25_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL25_LOCK_S1(v)   (HW_CSU_CSL25_WR((HW_CSU_CSL25_RD() & ~BM_CSU_CSL25_LOCK_S1) | BF_CSU_CSL25_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL26 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL26 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl26
{
    reg32_t U;
    struct _hw_csu_csl26_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl26_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL26 register
 */
//@{
#define HW_CSU_CSL26_ADDR      (REGS_CSU_BASE + 0x68)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL26           (*(volatile hw_csu_csl26_t *) HW_CSU_CSL26_ADDR)
#define HW_CSU_CSL26_RD()      (HW_CSU_CSL26.U)
#define HW_CSU_CSL26_WR(v)     (HW_CSU_CSL26.U = (v))
#define HW_CSU_CSL26_SET(v)    (HW_CSU_CSL26_WR(HW_CSU_CSL26_RD() |  (v)))
#define HW_CSU_CSL26_CLR(v)    (HW_CSU_CSL26_WR(HW_CSU_CSL26_RD() & ~(v)))
#define HW_CSU_CSL26_TOG(v)    (HW_CSU_CSL26_WR(HW_CSU_CSL26_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL26 bitfields
 */

/*! @name Register CSU_CSL26, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL26_SUR_S2      (0)      //!< Bit position for CSU_CSL26_SUR_S2.
#define BM_CSU_CSL26_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL26_SUR_S2.

//! @brief Get value of CSU_CSL26_SUR_S2 from a register value.
#define BG_CSU_CSL26_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_SUR_S2) >> BP_CSU_CSL26_SUR_S2)

//! @brief Format value for bitfield CSU_CSL26_SUR_S2.
#define BF_CSU_CSL26_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_SUR_S2) & BM_CSU_CSL26_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL26_SUR_S2(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_SUR_S2) | BF_CSU_CSL26_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL26_SSR_S2      (1)      //!< Bit position for CSU_CSL26_SSR_S2.
#define BM_CSU_CSL26_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL26_SSR_S2.

//! @brief Get value of CSU_CSL26_SSR_S2 from a register value.
#define BG_CSU_CSL26_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_SSR_S2) >> BP_CSU_CSL26_SSR_S2)

//! @brief Format value for bitfield CSU_CSL26_SSR_S2.
#define BF_CSU_CSL26_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_SSR_S2) & BM_CSU_CSL26_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL26_SSR_S2(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_SSR_S2) | BF_CSU_CSL26_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL26_NUR_S2      (2)      //!< Bit position for CSU_CSL26_NUR_S2.
#define BM_CSU_CSL26_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL26_NUR_S2.

//! @brief Get value of CSU_CSL26_NUR_S2 from a register value.
#define BG_CSU_CSL26_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_NUR_S2) >> BP_CSU_CSL26_NUR_S2)

//! @brief Format value for bitfield CSU_CSL26_NUR_S2.
#define BF_CSU_CSL26_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_NUR_S2) & BM_CSU_CSL26_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL26_NUR_S2(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_NUR_S2) | BF_CSU_CSL26_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL26_NSR_S2      (3)      //!< Bit position for CSU_CSL26_NSR_S2.
#define BM_CSU_CSL26_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL26_NSR_S2.

//! @brief Get value of CSU_CSL26_NSR_S2 from a register value.
#define BG_CSU_CSL26_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_NSR_S2) >> BP_CSU_CSL26_NSR_S2)

//! @brief Format value for bitfield CSU_CSL26_NSR_S2.
#define BF_CSU_CSL26_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_NSR_S2) & BM_CSU_CSL26_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL26_NSR_S2(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_NSR_S2) | BF_CSU_CSL26_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL26_SUW_S2      (4)      //!< Bit position for CSU_CSL26_SUW_S2.
#define BM_CSU_CSL26_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL26_SUW_S2.

//! @brief Get value of CSU_CSL26_SUW_S2 from a register value.
#define BG_CSU_CSL26_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_SUW_S2) >> BP_CSU_CSL26_SUW_S2)

//! @brief Format value for bitfield CSU_CSL26_SUW_S2.
#define BF_CSU_CSL26_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_SUW_S2) & BM_CSU_CSL26_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL26_SUW_S2(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_SUW_S2) | BF_CSU_CSL26_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL26_SSW_S2      (5)      //!< Bit position for CSU_CSL26_SSW_S2.
#define BM_CSU_CSL26_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL26_SSW_S2.

//! @brief Get value of CSU_CSL26_SSW_S2 from a register value.
#define BG_CSU_CSL26_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_SSW_S2) >> BP_CSU_CSL26_SSW_S2)

//! @brief Format value for bitfield CSU_CSL26_SSW_S2.
#define BF_CSU_CSL26_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_SSW_S2) & BM_CSU_CSL26_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL26_SSW_S2(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_SSW_S2) | BF_CSU_CSL26_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL26_NUW_S2      (6)      //!< Bit position for CSU_CSL26_NUW_S2.
#define BM_CSU_CSL26_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL26_NUW_S2.

//! @brief Get value of CSU_CSL26_NUW_S2 from a register value.
#define BG_CSU_CSL26_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_NUW_S2) >> BP_CSU_CSL26_NUW_S2)

//! @brief Format value for bitfield CSU_CSL26_NUW_S2.
#define BF_CSU_CSL26_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_NUW_S2) & BM_CSU_CSL26_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL26_NUW_S2(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_NUW_S2) | BF_CSU_CSL26_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL26_NSW_S2      (7)      //!< Bit position for CSU_CSL26_NSW_S2.
#define BM_CSU_CSL26_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL26_NSW_S2.

//! @brief Get value of CSU_CSL26_NSW_S2 from a register value.
#define BG_CSU_CSL26_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_NSW_S2) >> BP_CSU_CSL26_NSW_S2)

//! @brief Format value for bitfield CSU_CSL26_NSW_S2.
#define BF_CSU_CSL26_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_NSW_S2) & BM_CSU_CSL26_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL26_NSW_S2(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_NSW_S2) | BF_CSU_CSL26_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL26_LOCK_S2      (8)      //!< Bit position for CSU_CSL26_LOCK_S2.
#define BM_CSU_CSL26_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL26_LOCK_S2.

//! @brief Get value of CSU_CSL26_LOCK_S2 from a register value.
#define BG_CSU_CSL26_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_LOCK_S2) >> BP_CSU_CSL26_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL26_LOCK_S2.
#define BF_CSU_CSL26_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_LOCK_S2) & BM_CSU_CSL26_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL26_LOCK_S2(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_LOCK_S2) | BF_CSU_CSL26_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL26_SUR_S1      (16)      //!< Bit position for CSU_CSL26_SUR_S1.
#define BM_CSU_CSL26_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL26_SUR_S1.

//! @brief Get value of CSU_CSL26_SUR_S1 from a register value.
#define BG_CSU_CSL26_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_SUR_S1) >> BP_CSU_CSL26_SUR_S1)

//! @brief Format value for bitfield CSU_CSL26_SUR_S1.
#define BF_CSU_CSL26_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_SUR_S1) & BM_CSU_CSL26_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL26_SUR_S1(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_SUR_S1) | BF_CSU_CSL26_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL26_SSR_S1      (17)      //!< Bit position for CSU_CSL26_SSR_S1.
#define BM_CSU_CSL26_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL26_SSR_S1.

//! @brief Get value of CSU_CSL26_SSR_S1 from a register value.
#define BG_CSU_CSL26_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_SSR_S1) >> BP_CSU_CSL26_SSR_S1)

//! @brief Format value for bitfield CSU_CSL26_SSR_S1.
#define BF_CSU_CSL26_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_SSR_S1) & BM_CSU_CSL26_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL26_SSR_S1(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_SSR_S1) | BF_CSU_CSL26_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL26_NUR_S1      (18)      //!< Bit position for CSU_CSL26_NUR_S1.
#define BM_CSU_CSL26_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL26_NUR_S1.

//! @brief Get value of CSU_CSL26_NUR_S1 from a register value.
#define BG_CSU_CSL26_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_NUR_S1) >> BP_CSU_CSL26_NUR_S1)

//! @brief Format value for bitfield CSU_CSL26_NUR_S1.
#define BF_CSU_CSL26_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_NUR_S1) & BM_CSU_CSL26_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL26_NUR_S1(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_NUR_S1) | BF_CSU_CSL26_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL26_NSR_S1      (19)      //!< Bit position for CSU_CSL26_NSR_S1.
#define BM_CSU_CSL26_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL26_NSR_S1.

//! @brief Get value of CSU_CSL26_NSR_S1 from a register value.
#define BG_CSU_CSL26_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_NSR_S1) >> BP_CSU_CSL26_NSR_S1)

//! @brief Format value for bitfield CSU_CSL26_NSR_S1.
#define BF_CSU_CSL26_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_NSR_S1) & BM_CSU_CSL26_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL26_NSR_S1(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_NSR_S1) | BF_CSU_CSL26_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL26_SUW_S1      (20)      //!< Bit position for CSU_CSL26_SUW_S1.
#define BM_CSU_CSL26_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL26_SUW_S1.

//! @brief Get value of CSU_CSL26_SUW_S1 from a register value.
#define BG_CSU_CSL26_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_SUW_S1) >> BP_CSU_CSL26_SUW_S1)

//! @brief Format value for bitfield CSU_CSL26_SUW_S1.
#define BF_CSU_CSL26_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_SUW_S1) & BM_CSU_CSL26_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL26_SUW_S1(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_SUW_S1) | BF_CSU_CSL26_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL26_SSW_S1      (21)      //!< Bit position for CSU_CSL26_SSW_S1.
#define BM_CSU_CSL26_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL26_SSW_S1.

//! @brief Get value of CSU_CSL26_SSW_S1 from a register value.
#define BG_CSU_CSL26_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_SSW_S1) >> BP_CSU_CSL26_SSW_S1)

//! @brief Format value for bitfield CSU_CSL26_SSW_S1.
#define BF_CSU_CSL26_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_SSW_S1) & BM_CSU_CSL26_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL26_SSW_S1(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_SSW_S1) | BF_CSU_CSL26_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL26_NUW_S1      (22)      //!< Bit position for CSU_CSL26_NUW_S1.
#define BM_CSU_CSL26_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL26_NUW_S1.

//! @brief Get value of CSU_CSL26_NUW_S1 from a register value.
#define BG_CSU_CSL26_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_NUW_S1) >> BP_CSU_CSL26_NUW_S1)

//! @brief Format value for bitfield CSU_CSL26_NUW_S1.
#define BF_CSU_CSL26_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_NUW_S1) & BM_CSU_CSL26_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL26_NUW_S1(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_NUW_S1) | BF_CSU_CSL26_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL26_NSW_S1      (23)      //!< Bit position for CSU_CSL26_NSW_S1.
#define BM_CSU_CSL26_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL26_NSW_S1.

//! @brief Get value of CSU_CSL26_NSW_S1 from a register value.
#define BG_CSU_CSL26_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_NSW_S1) >> BP_CSU_CSL26_NSW_S1)

//! @brief Format value for bitfield CSU_CSL26_NSW_S1.
#define BF_CSU_CSL26_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_NSW_S1) & BM_CSU_CSL26_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL26_NSW_S1(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_NSW_S1) | BF_CSU_CSL26_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL26, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL26_LOCK_S1      (24)      //!< Bit position for CSU_CSL26_LOCK_S1.
#define BM_CSU_CSL26_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL26_LOCK_S1.

//! @brief Get value of CSU_CSL26_LOCK_S1 from a register value.
#define BG_CSU_CSL26_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL26_LOCK_S1) >> BP_CSU_CSL26_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL26_LOCK_S1.
#define BF_CSU_CSL26_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL26_LOCK_S1) & BM_CSU_CSL26_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL26_LOCK_S1(v)   (HW_CSU_CSL26_WR((HW_CSU_CSL26_RD() & ~BM_CSU_CSL26_LOCK_S1) | BF_CSU_CSL26_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL27 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL27 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl27
{
    reg32_t U;
    struct _hw_csu_csl27_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl27_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL27 register
 */
//@{
#define HW_CSU_CSL27_ADDR      (REGS_CSU_BASE + 0x6c)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL27           (*(volatile hw_csu_csl27_t *) HW_CSU_CSL27_ADDR)
#define HW_CSU_CSL27_RD()      (HW_CSU_CSL27.U)
#define HW_CSU_CSL27_WR(v)     (HW_CSU_CSL27.U = (v))
#define HW_CSU_CSL27_SET(v)    (HW_CSU_CSL27_WR(HW_CSU_CSL27_RD() |  (v)))
#define HW_CSU_CSL27_CLR(v)    (HW_CSU_CSL27_WR(HW_CSU_CSL27_RD() & ~(v)))
#define HW_CSU_CSL27_TOG(v)    (HW_CSU_CSL27_WR(HW_CSU_CSL27_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL27 bitfields
 */

/*! @name Register CSU_CSL27, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL27_SUR_S2      (0)      //!< Bit position for CSU_CSL27_SUR_S2.
#define BM_CSU_CSL27_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL27_SUR_S2.

//! @brief Get value of CSU_CSL27_SUR_S2 from a register value.
#define BG_CSU_CSL27_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_SUR_S2) >> BP_CSU_CSL27_SUR_S2)

//! @brief Format value for bitfield CSU_CSL27_SUR_S2.
#define BF_CSU_CSL27_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_SUR_S2) & BM_CSU_CSL27_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL27_SUR_S2(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_SUR_S2) | BF_CSU_CSL27_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL27_SSR_S2      (1)      //!< Bit position for CSU_CSL27_SSR_S2.
#define BM_CSU_CSL27_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL27_SSR_S2.

//! @brief Get value of CSU_CSL27_SSR_S2 from a register value.
#define BG_CSU_CSL27_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_SSR_S2) >> BP_CSU_CSL27_SSR_S2)

//! @brief Format value for bitfield CSU_CSL27_SSR_S2.
#define BF_CSU_CSL27_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_SSR_S2) & BM_CSU_CSL27_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL27_SSR_S2(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_SSR_S2) | BF_CSU_CSL27_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL27_NUR_S2      (2)      //!< Bit position for CSU_CSL27_NUR_S2.
#define BM_CSU_CSL27_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL27_NUR_S2.

//! @brief Get value of CSU_CSL27_NUR_S2 from a register value.
#define BG_CSU_CSL27_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_NUR_S2) >> BP_CSU_CSL27_NUR_S2)

//! @brief Format value for bitfield CSU_CSL27_NUR_S2.
#define BF_CSU_CSL27_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_NUR_S2) & BM_CSU_CSL27_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL27_NUR_S2(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_NUR_S2) | BF_CSU_CSL27_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL27_NSR_S2      (3)      //!< Bit position for CSU_CSL27_NSR_S2.
#define BM_CSU_CSL27_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL27_NSR_S2.

//! @brief Get value of CSU_CSL27_NSR_S2 from a register value.
#define BG_CSU_CSL27_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_NSR_S2) >> BP_CSU_CSL27_NSR_S2)

//! @brief Format value for bitfield CSU_CSL27_NSR_S2.
#define BF_CSU_CSL27_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_NSR_S2) & BM_CSU_CSL27_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL27_NSR_S2(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_NSR_S2) | BF_CSU_CSL27_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL27_SUW_S2      (4)      //!< Bit position for CSU_CSL27_SUW_S2.
#define BM_CSU_CSL27_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL27_SUW_S2.

//! @brief Get value of CSU_CSL27_SUW_S2 from a register value.
#define BG_CSU_CSL27_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_SUW_S2) >> BP_CSU_CSL27_SUW_S2)

//! @brief Format value for bitfield CSU_CSL27_SUW_S2.
#define BF_CSU_CSL27_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_SUW_S2) & BM_CSU_CSL27_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL27_SUW_S2(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_SUW_S2) | BF_CSU_CSL27_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL27_SSW_S2      (5)      //!< Bit position for CSU_CSL27_SSW_S2.
#define BM_CSU_CSL27_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL27_SSW_S2.

//! @brief Get value of CSU_CSL27_SSW_S2 from a register value.
#define BG_CSU_CSL27_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_SSW_S2) >> BP_CSU_CSL27_SSW_S2)

//! @brief Format value for bitfield CSU_CSL27_SSW_S2.
#define BF_CSU_CSL27_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_SSW_S2) & BM_CSU_CSL27_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL27_SSW_S2(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_SSW_S2) | BF_CSU_CSL27_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL27_NUW_S2      (6)      //!< Bit position for CSU_CSL27_NUW_S2.
#define BM_CSU_CSL27_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL27_NUW_S2.

//! @brief Get value of CSU_CSL27_NUW_S2 from a register value.
#define BG_CSU_CSL27_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_NUW_S2) >> BP_CSU_CSL27_NUW_S2)

//! @brief Format value for bitfield CSU_CSL27_NUW_S2.
#define BF_CSU_CSL27_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_NUW_S2) & BM_CSU_CSL27_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL27_NUW_S2(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_NUW_S2) | BF_CSU_CSL27_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL27_NSW_S2      (7)      //!< Bit position for CSU_CSL27_NSW_S2.
#define BM_CSU_CSL27_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL27_NSW_S2.

//! @brief Get value of CSU_CSL27_NSW_S2 from a register value.
#define BG_CSU_CSL27_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_NSW_S2) >> BP_CSU_CSL27_NSW_S2)

//! @brief Format value for bitfield CSU_CSL27_NSW_S2.
#define BF_CSU_CSL27_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_NSW_S2) & BM_CSU_CSL27_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL27_NSW_S2(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_NSW_S2) | BF_CSU_CSL27_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL27_LOCK_S2      (8)      //!< Bit position for CSU_CSL27_LOCK_S2.
#define BM_CSU_CSL27_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL27_LOCK_S2.

//! @brief Get value of CSU_CSL27_LOCK_S2 from a register value.
#define BG_CSU_CSL27_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_LOCK_S2) >> BP_CSU_CSL27_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL27_LOCK_S2.
#define BF_CSU_CSL27_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_LOCK_S2) & BM_CSU_CSL27_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL27_LOCK_S2(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_LOCK_S2) | BF_CSU_CSL27_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL27_SUR_S1      (16)      //!< Bit position for CSU_CSL27_SUR_S1.
#define BM_CSU_CSL27_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL27_SUR_S1.

//! @brief Get value of CSU_CSL27_SUR_S1 from a register value.
#define BG_CSU_CSL27_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_SUR_S1) >> BP_CSU_CSL27_SUR_S1)

//! @brief Format value for bitfield CSU_CSL27_SUR_S1.
#define BF_CSU_CSL27_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_SUR_S1) & BM_CSU_CSL27_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL27_SUR_S1(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_SUR_S1) | BF_CSU_CSL27_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL27_SSR_S1      (17)      //!< Bit position for CSU_CSL27_SSR_S1.
#define BM_CSU_CSL27_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL27_SSR_S1.

//! @brief Get value of CSU_CSL27_SSR_S1 from a register value.
#define BG_CSU_CSL27_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_SSR_S1) >> BP_CSU_CSL27_SSR_S1)

//! @brief Format value for bitfield CSU_CSL27_SSR_S1.
#define BF_CSU_CSL27_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_SSR_S1) & BM_CSU_CSL27_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL27_SSR_S1(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_SSR_S1) | BF_CSU_CSL27_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL27_NUR_S1      (18)      //!< Bit position for CSU_CSL27_NUR_S1.
#define BM_CSU_CSL27_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL27_NUR_S1.

//! @brief Get value of CSU_CSL27_NUR_S1 from a register value.
#define BG_CSU_CSL27_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_NUR_S1) >> BP_CSU_CSL27_NUR_S1)

//! @brief Format value for bitfield CSU_CSL27_NUR_S1.
#define BF_CSU_CSL27_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_NUR_S1) & BM_CSU_CSL27_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL27_NUR_S1(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_NUR_S1) | BF_CSU_CSL27_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL27_NSR_S1      (19)      //!< Bit position for CSU_CSL27_NSR_S1.
#define BM_CSU_CSL27_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL27_NSR_S1.

//! @brief Get value of CSU_CSL27_NSR_S1 from a register value.
#define BG_CSU_CSL27_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_NSR_S1) >> BP_CSU_CSL27_NSR_S1)

//! @brief Format value for bitfield CSU_CSL27_NSR_S1.
#define BF_CSU_CSL27_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_NSR_S1) & BM_CSU_CSL27_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL27_NSR_S1(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_NSR_S1) | BF_CSU_CSL27_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL27_SUW_S1      (20)      //!< Bit position for CSU_CSL27_SUW_S1.
#define BM_CSU_CSL27_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL27_SUW_S1.

//! @brief Get value of CSU_CSL27_SUW_S1 from a register value.
#define BG_CSU_CSL27_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_SUW_S1) >> BP_CSU_CSL27_SUW_S1)

//! @brief Format value for bitfield CSU_CSL27_SUW_S1.
#define BF_CSU_CSL27_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_SUW_S1) & BM_CSU_CSL27_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL27_SUW_S1(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_SUW_S1) | BF_CSU_CSL27_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL27_SSW_S1      (21)      //!< Bit position for CSU_CSL27_SSW_S1.
#define BM_CSU_CSL27_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL27_SSW_S1.

//! @brief Get value of CSU_CSL27_SSW_S1 from a register value.
#define BG_CSU_CSL27_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_SSW_S1) >> BP_CSU_CSL27_SSW_S1)

//! @brief Format value for bitfield CSU_CSL27_SSW_S1.
#define BF_CSU_CSL27_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_SSW_S1) & BM_CSU_CSL27_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL27_SSW_S1(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_SSW_S1) | BF_CSU_CSL27_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL27_NUW_S1      (22)      //!< Bit position for CSU_CSL27_NUW_S1.
#define BM_CSU_CSL27_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL27_NUW_S1.

//! @brief Get value of CSU_CSL27_NUW_S1 from a register value.
#define BG_CSU_CSL27_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_NUW_S1) >> BP_CSU_CSL27_NUW_S1)

//! @brief Format value for bitfield CSU_CSL27_NUW_S1.
#define BF_CSU_CSL27_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_NUW_S1) & BM_CSU_CSL27_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL27_NUW_S1(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_NUW_S1) | BF_CSU_CSL27_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL27_NSW_S1      (23)      //!< Bit position for CSU_CSL27_NSW_S1.
#define BM_CSU_CSL27_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL27_NSW_S1.

//! @brief Get value of CSU_CSL27_NSW_S1 from a register value.
#define BG_CSU_CSL27_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_NSW_S1) >> BP_CSU_CSL27_NSW_S1)

//! @brief Format value for bitfield CSU_CSL27_NSW_S1.
#define BF_CSU_CSL27_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_NSW_S1) & BM_CSU_CSL27_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL27_NSW_S1(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_NSW_S1) | BF_CSU_CSL27_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL27, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL27_LOCK_S1      (24)      //!< Bit position for CSU_CSL27_LOCK_S1.
#define BM_CSU_CSL27_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL27_LOCK_S1.

//! @brief Get value of CSU_CSL27_LOCK_S1 from a register value.
#define BG_CSU_CSL27_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL27_LOCK_S1) >> BP_CSU_CSL27_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL27_LOCK_S1.
#define BF_CSU_CSL27_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL27_LOCK_S1) & BM_CSU_CSL27_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL27_LOCK_S1(v)   (HW_CSU_CSL27_WR((HW_CSU_CSL27_RD() & ~BM_CSU_CSL27_LOCK_S1) | BF_CSU_CSL27_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL28 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL28 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl28
{
    reg32_t U;
    struct _hw_csu_csl28_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl28_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL28 register
 */
//@{
#define HW_CSU_CSL28_ADDR      (REGS_CSU_BASE + 0x70)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL28           (*(volatile hw_csu_csl28_t *) HW_CSU_CSL28_ADDR)
#define HW_CSU_CSL28_RD()      (HW_CSU_CSL28.U)
#define HW_CSU_CSL28_WR(v)     (HW_CSU_CSL28.U = (v))
#define HW_CSU_CSL28_SET(v)    (HW_CSU_CSL28_WR(HW_CSU_CSL28_RD() |  (v)))
#define HW_CSU_CSL28_CLR(v)    (HW_CSU_CSL28_WR(HW_CSU_CSL28_RD() & ~(v)))
#define HW_CSU_CSL28_TOG(v)    (HW_CSU_CSL28_WR(HW_CSU_CSL28_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL28 bitfields
 */

/*! @name Register CSU_CSL28, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL28_SUR_S2      (0)      //!< Bit position for CSU_CSL28_SUR_S2.
#define BM_CSU_CSL28_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL28_SUR_S2.

//! @brief Get value of CSU_CSL28_SUR_S2 from a register value.
#define BG_CSU_CSL28_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_SUR_S2) >> BP_CSU_CSL28_SUR_S2)

//! @brief Format value for bitfield CSU_CSL28_SUR_S2.
#define BF_CSU_CSL28_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_SUR_S2) & BM_CSU_CSL28_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL28_SUR_S2(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_SUR_S2) | BF_CSU_CSL28_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL28_SSR_S2      (1)      //!< Bit position for CSU_CSL28_SSR_S2.
#define BM_CSU_CSL28_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL28_SSR_S2.

//! @brief Get value of CSU_CSL28_SSR_S2 from a register value.
#define BG_CSU_CSL28_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_SSR_S2) >> BP_CSU_CSL28_SSR_S2)

//! @brief Format value for bitfield CSU_CSL28_SSR_S2.
#define BF_CSU_CSL28_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_SSR_S2) & BM_CSU_CSL28_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL28_SSR_S2(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_SSR_S2) | BF_CSU_CSL28_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL28_NUR_S2      (2)      //!< Bit position for CSU_CSL28_NUR_S2.
#define BM_CSU_CSL28_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL28_NUR_S2.

//! @brief Get value of CSU_CSL28_NUR_S2 from a register value.
#define BG_CSU_CSL28_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_NUR_S2) >> BP_CSU_CSL28_NUR_S2)

//! @brief Format value for bitfield CSU_CSL28_NUR_S2.
#define BF_CSU_CSL28_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_NUR_S2) & BM_CSU_CSL28_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL28_NUR_S2(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_NUR_S2) | BF_CSU_CSL28_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL28_NSR_S2      (3)      //!< Bit position for CSU_CSL28_NSR_S2.
#define BM_CSU_CSL28_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL28_NSR_S2.

//! @brief Get value of CSU_CSL28_NSR_S2 from a register value.
#define BG_CSU_CSL28_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_NSR_S2) >> BP_CSU_CSL28_NSR_S2)

//! @brief Format value for bitfield CSU_CSL28_NSR_S2.
#define BF_CSU_CSL28_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_NSR_S2) & BM_CSU_CSL28_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL28_NSR_S2(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_NSR_S2) | BF_CSU_CSL28_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL28_SUW_S2      (4)      //!< Bit position for CSU_CSL28_SUW_S2.
#define BM_CSU_CSL28_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL28_SUW_S2.

//! @brief Get value of CSU_CSL28_SUW_S2 from a register value.
#define BG_CSU_CSL28_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_SUW_S2) >> BP_CSU_CSL28_SUW_S2)

//! @brief Format value for bitfield CSU_CSL28_SUW_S2.
#define BF_CSU_CSL28_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_SUW_S2) & BM_CSU_CSL28_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL28_SUW_S2(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_SUW_S2) | BF_CSU_CSL28_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL28_SSW_S2      (5)      //!< Bit position for CSU_CSL28_SSW_S2.
#define BM_CSU_CSL28_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL28_SSW_S2.

//! @brief Get value of CSU_CSL28_SSW_S2 from a register value.
#define BG_CSU_CSL28_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_SSW_S2) >> BP_CSU_CSL28_SSW_S2)

//! @brief Format value for bitfield CSU_CSL28_SSW_S2.
#define BF_CSU_CSL28_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_SSW_S2) & BM_CSU_CSL28_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL28_SSW_S2(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_SSW_S2) | BF_CSU_CSL28_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL28_NUW_S2      (6)      //!< Bit position for CSU_CSL28_NUW_S2.
#define BM_CSU_CSL28_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL28_NUW_S2.

//! @brief Get value of CSU_CSL28_NUW_S2 from a register value.
#define BG_CSU_CSL28_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_NUW_S2) >> BP_CSU_CSL28_NUW_S2)

//! @brief Format value for bitfield CSU_CSL28_NUW_S2.
#define BF_CSU_CSL28_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_NUW_S2) & BM_CSU_CSL28_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL28_NUW_S2(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_NUW_S2) | BF_CSU_CSL28_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL28_NSW_S2      (7)      //!< Bit position for CSU_CSL28_NSW_S2.
#define BM_CSU_CSL28_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL28_NSW_S2.

//! @brief Get value of CSU_CSL28_NSW_S2 from a register value.
#define BG_CSU_CSL28_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_NSW_S2) >> BP_CSU_CSL28_NSW_S2)

//! @brief Format value for bitfield CSU_CSL28_NSW_S2.
#define BF_CSU_CSL28_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_NSW_S2) & BM_CSU_CSL28_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL28_NSW_S2(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_NSW_S2) | BF_CSU_CSL28_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL28_LOCK_S2      (8)      //!< Bit position for CSU_CSL28_LOCK_S2.
#define BM_CSU_CSL28_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL28_LOCK_S2.

//! @brief Get value of CSU_CSL28_LOCK_S2 from a register value.
#define BG_CSU_CSL28_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_LOCK_S2) >> BP_CSU_CSL28_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL28_LOCK_S2.
#define BF_CSU_CSL28_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_LOCK_S2) & BM_CSU_CSL28_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL28_LOCK_S2(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_LOCK_S2) | BF_CSU_CSL28_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL28_SUR_S1      (16)      //!< Bit position for CSU_CSL28_SUR_S1.
#define BM_CSU_CSL28_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL28_SUR_S1.

//! @brief Get value of CSU_CSL28_SUR_S1 from a register value.
#define BG_CSU_CSL28_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_SUR_S1) >> BP_CSU_CSL28_SUR_S1)

//! @brief Format value for bitfield CSU_CSL28_SUR_S1.
#define BF_CSU_CSL28_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_SUR_S1) & BM_CSU_CSL28_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL28_SUR_S1(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_SUR_S1) | BF_CSU_CSL28_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL28_SSR_S1      (17)      //!< Bit position for CSU_CSL28_SSR_S1.
#define BM_CSU_CSL28_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL28_SSR_S1.

//! @brief Get value of CSU_CSL28_SSR_S1 from a register value.
#define BG_CSU_CSL28_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_SSR_S1) >> BP_CSU_CSL28_SSR_S1)

//! @brief Format value for bitfield CSU_CSL28_SSR_S1.
#define BF_CSU_CSL28_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_SSR_S1) & BM_CSU_CSL28_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL28_SSR_S1(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_SSR_S1) | BF_CSU_CSL28_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL28_NUR_S1      (18)      //!< Bit position for CSU_CSL28_NUR_S1.
#define BM_CSU_CSL28_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL28_NUR_S1.

//! @brief Get value of CSU_CSL28_NUR_S1 from a register value.
#define BG_CSU_CSL28_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_NUR_S1) >> BP_CSU_CSL28_NUR_S1)

//! @brief Format value for bitfield CSU_CSL28_NUR_S1.
#define BF_CSU_CSL28_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_NUR_S1) & BM_CSU_CSL28_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL28_NUR_S1(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_NUR_S1) | BF_CSU_CSL28_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL28_NSR_S1      (19)      //!< Bit position for CSU_CSL28_NSR_S1.
#define BM_CSU_CSL28_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL28_NSR_S1.

//! @brief Get value of CSU_CSL28_NSR_S1 from a register value.
#define BG_CSU_CSL28_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_NSR_S1) >> BP_CSU_CSL28_NSR_S1)

//! @brief Format value for bitfield CSU_CSL28_NSR_S1.
#define BF_CSU_CSL28_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_NSR_S1) & BM_CSU_CSL28_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL28_NSR_S1(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_NSR_S1) | BF_CSU_CSL28_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL28_SUW_S1      (20)      //!< Bit position for CSU_CSL28_SUW_S1.
#define BM_CSU_CSL28_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL28_SUW_S1.

//! @brief Get value of CSU_CSL28_SUW_S1 from a register value.
#define BG_CSU_CSL28_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_SUW_S1) >> BP_CSU_CSL28_SUW_S1)

//! @brief Format value for bitfield CSU_CSL28_SUW_S1.
#define BF_CSU_CSL28_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_SUW_S1) & BM_CSU_CSL28_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL28_SUW_S1(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_SUW_S1) | BF_CSU_CSL28_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL28_SSW_S1      (21)      //!< Bit position for CSU_CSL28_SSW_S1.
#define BM_CSU_CSL28_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL28_SSW_S1.

//! @brief Get value of CSU_CSL28_SSW_S1 from a register value.
#define BG_CSU_CSL28_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_SSW_S1) >> BP_CSU_CSL28_SSW_S1)

//! @brief Format value for bitfield CSU_CSL28_SSW_S1.
#define BF_CSU_CSL28_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_SSW_S1) & BM_CSU_CSL28_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL28_SSW_S1(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_SSW_S1) | BF_CSU_CSL28_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL28_NUW_S1      (22)      //!< Bit position for CSU_CSL28_NUW_S1.
#define BM_CSU_CSL28_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL28_NUW_S1.

//! @brief Get value of CSU_CSL28_NUW_S1 from a register value.
#define BG_CSU_CSL28_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_NUW_S1) >> BP_CSU_CSL28_NUW_S1)

//! @brief Format value for bitfield CSU_CSL28_NUW_S1.
#define BF_CSU_CSL28_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_NUW_S1) & BM_CSU_CSL28_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL28_NUW_S1(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_NUW_S1) | BF_CSU_CSL28_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL28_NSW_S1      (23)      //!< Bit position for CSU_CSL28_NSW_S1.
#define BM_CSU_CSL28_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL28_NSW_S1.

//! @brief Get value of CSU_CSL28_NSW_S1 from a register value.
#define BG_CSU_CSL28_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_NSW_S1) >> BP_CSU_CSL28_NSW_S1)

//! @brief Format value for bitfield CSU_CSL28_NSW_S1.
#define BF_CSU_CSL28_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_NSW_S1) & BM_CSU_CSL28_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL28_NSW_S1(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_NSW_S1) | BF_CSU_CSL28_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL28, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL28_LOCK_S1      (24)      //!< Bit position for CSU_CSL28_LOCK_S1.
#define BM_CSU_CSL28_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL28_LOCK_S1.

//! @brief Get value of CSU_CSL28_LOCK_S1 from a register value.
#define BG_CSU_CSL28_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL28_LOCK_S1) >> BP_CSU_CSL28_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL28_LOCK_S1.
#define BF_CSU_CSL28_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL28_LOCK_S1) & BM_CSU_CSL28_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL28_LOCK_S1(v)   (HW_CSU_CSL28_WR((HW_CSU_CSL28_RD() & ~BM_CSU_CSL28_LOCK_S1) | BF_CSU_CSL28_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL29 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL29 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl29
{
    reg32_t U;
    struct _hw_csu_csl29_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl29_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL29 register
 */
//@{
#define HW_CSU_CSL29_ADDR      (REGS_CSU_BASE + 0x74)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL29           (*(volatile hw_csu_csl29_t *) HW_CSU_CSL29_ADDR)
#define HW_CSU_CSL29_RD()      (HW_CSU_CSL29.U)
#define HW_CSU_CSL29_WR(v)     (HW_CSU_CSL29.U = (v))
#define HW_CSU_CSL29_SET(v)    (HW_CSU_CSL29_WR(HW_CSU_CSL29_RD() |  (v)))
#define HW_CSU_CSL29_CLR(v)    (HW_CSU_CSL29_WR(HW_CSU_CSL29_RD() & ~(v)))
#define HW_CSU_CSL29_TOG(v)    (HW_CSU_CSL29_WR(HW_CSU_CSL29_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL29 bitfields
 */

/*! @name Register CSU_CSL29, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL29_SUR_S2      (0)      //!< Bit position for CSU_CSL29_SUR_S2.
#define BM_CSU_CSL29_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL29_SUR_S2.

//! @brief Get value of CSU_CSL29_SUR_S2 from a register value.
#define BG_CSU_CSL29_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_SUR_S2) >> BP_CSU_CSL29_SUR_S2)

//! @brief Format value for bitfield CSU_CSL29_SUR_S2.
#define BF_CSU_CSL29_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_SUR_S2) & BM_CSU_CSL29_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL29_SUR_S2(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_SUR_S2) | BF_CSU_CSL29_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL29_SSR_S2      (1)      //!< Bit position for CSU_CSL29_SSR_S2.
#define BM_CSU_CSL29_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL29_SSR_S2.

//! @brief Get value of CSU_CSL29_SSR_S2 from a register value.
#define BG_CSU_CSL29_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_SSR_S2) >> BP_CSU_CSL29_SSR_S2)

//! @brief Format value for bitfield CSU_CSL29_SSR_S2.
#define BF_CSU_CSL29_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_SSR_S2) & BM_CSU_CSL29_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL29_SSR_S2(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_SSR_S2) | BF_CSU_CSL29_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL29_NUR_S2      (2)      //!< Bit position for CSU_CSL29_NUR_S2.
#define BM_CSU_CSL29_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL29_NUR_S2.

//! @brief Get value of CSU_CSL29_NUR_S2 from a register value.
#define BG_CSU_CSL29_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_NUR_S2) >> BP_CSU_CSL29_NUR_S2)

//! @brief Format value for bitfield CSU_CSL29_NUR_S2.
#define BF_CSU_CSL29_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_NUR_S2) & BM_CSU_CSL29_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL29_NUR_S2(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_NUR_S2) | BF_CSU_CSL29_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL29_NSR_S2      (3)      //!< Bit position for CSU_CSL29_NSR_S2.
#define BM_CSU_CSL29_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL29_NSR_S2.

//! @brief Get value of CSU_CSL29_NSR_S2 from a register value.
#define BG_CSU_CSL29_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_NSR_S2) >> BP_CSU_CSL29_NSR_S2)

//! @brief Format value for bitfield CSU_CSL29_NSR_S2.
#define BF_CSU_CSL29_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_NSR_S2) & BM_CSU_CSL29_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL29_NSR_S2(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_NSR_S2) | BF_CSU_CSL29_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL29_SUW_S2      (4)      //!< Bit position for CSU_CSL29_SUW_S2.
#define BM_CSU_CSL29_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL29_SUW_S2.

//! @brief Get value of CSU_CSL29_SUW_S2 from a register value.
#define BG_CSU_CSL29_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_SUW_S2) >> BP_CSU_CSL29_SUW_S2)

//! @brief Format value for bitfield CSU_CSL29_SUW_S2.
#define BF_CSU_CSL29_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_SUW_S2) & BM_CSU_CSL29_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL29_SUW_S2(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_SUW_S2) | BF_CSU_CSL29_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL29_SSW_S2      (5)      //!< Bit position for CSU_CSL29_SSW_S2.
#define BM_CSU_CSL29_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL29_SSW_S2.

//! @brief Get value of CSU_CSL29_SSW_S2 from a register value.
#define BG_CSU_CSL29_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_SSW_S2) >> BP_CSU_CSL29_SSW_S2)

//! @brief Format value for bitfield CSU_CSL29_SSW_S2.
#define BF_CSU_CSL29_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_SSW_S2) & BM_CSU_CSL29_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL29_SSW_S2(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_SSW_S2) | BF_CSU_CSL29_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL29_NUW_S2      (6)      //!< Bit position for CSU_CSL29_NUW_S2.
#define BM_CSU_CSL29_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL29_NUW_S2.

//! @brief Get value of CSU_CSL29_NUW_S2 from a register value.
#define BG_CSU_CSL29_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_NUW_S2) >> BP_CSU_CSL29_NUW_S2)

//! @brief Format value for bitfield CSU_CSL29_NUW_S2.
#define BF_CSU_CSL29_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_NUW_S2) & BM_CSU_CSL29_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL29_NUW_S2(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_NUW_S2) | BF_CSU_CSL29_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL29_NSW_S2      (7)      //!< Bit position for CSU_CSL29_NSW_S2.
#define BM_CSU_CSL29_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL29_NSW_S2.

//! @brief Get value of CSU_CSL29_NSW_S2 from a register value.
#define BG_CSU_CSL29_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_NSW_S2) >> BP_CSU_CSL29_NSW_S2)

//! @brief Format value for bitfield CSU_CSL29_NSW_S2.
#define BF_CSU_CSL29_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_NSW_S2) & BM_CSU_CSL29_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL29_NSW_S2(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_NSW_S2) | BF_CSU_CSL29_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL29_LOCK_S2      (8)      //!< Bit position for CSU_CSL29_LOCK_S2.
#define BM_CSU_CSL29_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL29_LOCK_S2.

//! @brief Get value of CSU_CSL29_LOCK_S2 from a register value.
#define BG_CSU_CSL29_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_LOCK_S2) >> BP_CSU_CSL29_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL29_LOCK_S2.
#define BF_CSU_CSL29_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_LOCK_S2) & BM_CSU_CSL29_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL29_LOCK_S2(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_LOCK_S2) | BF_CSU_CSL29_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL29_SUR_S1      (16)      //!< Bit position for CSU_CSL29_SUR_S1.
#define BM_CSU_CSL29_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL29_SUR_S1.

//! @brief Get value of CSU_CSL29_SUR_S1 from a register value.
#define BG_CSU_CSL29_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_SUR_S1) >> BP_CSU_CSL29_SUR_S1)

//! @brief Format value for bitfield CSU_CSL29_SUR_S1.
#define BF_CSU_CSL29_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_SUR_S1) & BM_CSU_CSL29_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL29_SUR_S1(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_SUR_S1) | BF_CSU_CSL29_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL29_SSR_S1      (17)      //!< Bit position for CSU_CSL29_SSR_S1.
#define BM_CSU_CSL29_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL29_SSR_S1.

//! @brief Get value of CSU_CSL29_SSR_S1 from a register value.
#define BG_CSU_CSL29_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_SSR_S1) >> BP_CSU_CSL29_SSR_S1)

//! @brief Format value for bitfield CSU_CSL29_SSR_S1.
#define BF_CSU_CSL29_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_SSR_S1) & BM_CSU_CSL29_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL29_SSR_S1(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_SSR_S1) | BF_CSU_CSL29_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL29_NUR_S1      (18)      //!< Bit position for CSU_CSL29_NUR_S1.
#define BM_CSU_CSL29_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL29_NUR_S1.

//! @brief Get value of CSU_CSL29_NUR_S1 from a register value.
#define BG_CSU_CSL29_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_NUR_S1) >> BP_CSU_CSL29_NUR_S1)

//! @brief Format value for bitfield CSU_CSL29_NUR_S1.
#define BF_CSU_CSL29_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_NUR_S1) & BM_CSU_CSL29_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL29_NUR_S1(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_NUR_S1) | BF_CSU_CSL29_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL29_NSR_S1      (19)      //!< Bit position for CSU_CSL29_NSR_S1.
#define BM_CSU_CSL29_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL29_NSR_S1.

//! @brief Get value of CSU_CSL29_NSR_S1 from a register value.
#define BG_CSU_CSL29_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_NSR_S1) >> BP_CSU_CSL29_NSR_S1)

//! @brief Format value for bitfield CSU_CSL29_NSR_S1.
#define BF_CSU_CSL29_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_NSR_S1) & BM_CSU_CSL29_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL29_NSR_S1(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_NSR_S1) | BF_CSU_CSL29_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL29_SUW_S1      (20)      //!< Bit position for CSU_CSL29_SUW_S1.
#define BM_CSU_CSL29_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL29_SUW_S1.

//! @brief Get value of CSU_CSL29_SUW_S1 from a register value.
#define BG_CSU_CSL29_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_SUW_S1) >> BP_CSU_CSL29_SUW_S1)

//! @brief Format value for bitfield CSU_CSL29_SUW_S1.
#define BF_CSU_CSL29_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_SUW_S1) & BM_CSU_CSL29_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL29_SUW_S1(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_SUW_S1) | BF_CSU_CSL29_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL29_SSW_S1      (21)      //!< Bit position for CSU_CSL29_SSW_S1.
#define BM_CSU_CSL29_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL29_SSW_S1.

//! @brief Get value of CSU_CSL29_SSW_S1 from a register value.
#define BG_CSU_CSL29_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_SSW_S1) >> BP_CSU_CSL29_SSW_S1)

//! @brief Format value for bitfield CSU_CSL29_SSW_S1.
#define BF_CSU_CSL29_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_SSW_S1) & BM_CSU_CSL29_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL29_SSW_S1(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_SSW_S1) | BF_CSU_CSL29_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL29_NUW_S1      (22)      //!< Bit position for CSU_CSL29_NUW_S1.
#define BM_CSU_CSL29_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL29_NUW_S1.

//! @brief Get value of CSU_CSL29_NUW_S1 from a register value.
#define BG_CSU_CSL29_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_NUW_S1) >> BP_CSU_CSL29_NUW_S1)

//! @brief Format value for bitfield CSU_CSL29_NUW_S1.
#define BF_CSU_CSL29_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_NUW_S1) & BM_CSU_CSL29_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL29_NUW_S1(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_NUW_S1) | BF_CSU_CSL29_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL29_NSW_S1      (23)      //!< Bit position for CSU_CSL29_NSW_S1.
#define BM_CSU_CSL29_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL29_NSW_S1.

//! @brief Get value of CSU_CSL29_NSW_S1 from a register value.
#define BG_CSU_CSL29_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_NSW_S1) >> BP_CSU_CSL29_NSW_S1)

//! @brief Format value for bitfield CSU_CSL29_NSW_S1.
#define BF_CSU_CSL29_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_NSW_S1) & BM_CSU_CSL29_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL29_NSW_S1(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_NSW_S1) | BF_CSU_CSL29_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL29, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL29_LOCK_S1      (24)      //!< Bit position for CSU_CSL29_LOCK_S1.
#define BM_CSU_CSL29_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL29_LOCK_S1.

//! @brief Get value of CSU_CSL29_LOCK_S1 from a register value.
#define BG_CSU_CSL29_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL29_LOCK_S1) >> BP_CSU_CSL29_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL29_LOCK_S1.
#define BF_CSU_CSL29_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL29_LOCK_S1) & BM_CSU_CSL29_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL29_LOCK_S1(v)   (HW_CSU_CSL29_WR((HW_CSU_CSL29_RD() & ~BM_CSU_CSL29_LOCK_S1) | BF_CSU_CSL29_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL30 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL30 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl30
{
    reg32_t U;
    struct _hw_csu_csl30_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl30_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL30 register
 */
//@{
#define HW_CSU_CSL30_ADDR      (REGS_CSU_BASE + 0x78)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL30           (*(volatile hw_csu_csl30_t *) HW_CSU_CSL30_ADDR)
#define HW_CSU_CSL30_RD()      (HW_CSU_CSL30.U)
#define HW_CSU_CSL30_WR(v)     (HW_CSU_CSL30.U = (v))
#define HW_CSU_CSL30_SET(v)    (HW_CSU_CSL30_WR(HW_CSU_CSL30_RD() |  (v)))
#define HW_CSU_CSL30_CLR(v)    (HW_CSU_CSL30_WR(HW_CSU_CSL30_RD() & ~(v)))
#define HW_CSU_CSL30_TOG(v)    (HW_CSU_CSL30_WR(HW_CSU_CSL30_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL30 bitfields
 */

/*! @name Register CSU_CSL30, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL30_SUR_S2      (0)      //!< Bit position for CSU_CSL30_SUR_S2.
#define BM_CSU_CSL30_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL30_SUR_S2.

//! @brief Get value of CSU_CSL30_SUR_S2 from a register value.
#define BG_CSU_CSL30_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_SUR_S2) >> BP_CSU_CSL30_SUR_S2)

//! @brief Format value for bitfield CSU_CSL30_SUR_S2.
#define BF_CSU_CSL30_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_SUR_S2) & BM_CSU_CSL30_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL30_SUR_S2(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_SUR_S2) | BF_CSU_CSL30_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL30_SSR_S2      (1)      //!< Bit position for CSU_CSL30_SSR_S2.
#define BM_CSU_CSL30_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL30_SSR_S2.

//! @brief Get value of CSU_CSL30_SSR_S2 from a register value.
#define BG_CSU_CSL30_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_SSR_S2) >> BP_CSU_CSL30_SSR_S2)

//! @brief Format value for bitfield CSU_CSL30_SSR_S2.
#define BF_CSU_CSL30_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_SSR_S2) & BM_CSU_CSL30_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL30_SSR_S2(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_SSR_S2) | BF_CSU_CSL30_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL30_NUR_S2      (2)      //!< Bit position for CSU_CSL30_NUR_S2.
#define BM_CSU_CSL30_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL30_NUR_S2.

//! @brief Get value of CSU_CSL30_NUR_S2 from a register value.
#define BG_CSU_CSL30_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_NUR_S2) >> BP_CSU_CSL30_NUR_S2)

//! @brief Format value for bitfield CSU_CSL30_NUR_S2.
#define BF_CSU_CSL30_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_NUR_S2) & BM_CSU_CSL30_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL30_NUR_S2(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_NUR_S2) | BF_CSU_CSL30_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL30_NSR_S2      (3)      //!< Bit position for CSU_CSL30_NSR_S2.
#define BM_CSU_CSL30_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL30_NSR_S2.

//! @brief Get value of CSU_CSL30_NSR_S2 from a register value.
#define BG_CSU_CSL30_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_NSR_S2) >> BP_CSU_CSL30_NSR_S2)

//! @brief Format value for bitfield CSU_CSL30_NSR_S2.
#define BF_CSU_CSL30_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_NSR_S2) & BM_CSU_CSL30_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL30_NSR_S2(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_NSR_S2) | BF_CSU_CSL30_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL30_SUW_S2      (4)      //!< Bit position for CSU_CSL30_SUW_S2.
#define BM_CSU_CSL30_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL30_SUW_S2.

//! @brief Get value of CSU_CSL30_SUW_S2 from a register value.
#define BG_CSU_CSL30_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_SUW_S2) >> BP_CSU_CSL30_SUW_S2)

//! @brief Format value for bitfield CSU_CSL30_SUW_S2.
#define BF_CSU_CSL30_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_SUW_S2) & BM_CSU_CSL30_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL30_SUW_S2(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_SUW_S2) | BF_CSU_CSL30_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL30_SSW_S2      (5)      //!< Bit position for CSU_CSL30_SSW_S2.
#define BM_CSU_CSL30_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL30_SSW_S2.

//! @brief Get value of CSU_CSL30_SSW_S2 from a register value.
#define BG_CSU_CSL30_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_SSW_S2) >> BP_CSU_CSL30_SSW_S2)

//! @brief Format value for bitfield CSU_CSL30_SSW_S2.
#define BF_CSU_CSL30_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_SSW_S2) & BM_CSU_CSL30_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL30_SSW_S2(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_SSW_S2) | BF_CSU_CSL30_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL30_NUW_S2      (6)      //!< Bit position for CSU_CSL30_NUW_S2.
#define BM_CSU_CSL30_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL30_NUW_S2.

//! @brief Get value of CSU_CSL30_NUW_S2 from a register value.
#define BG_CSU_CSL30_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_NUW_S2) >> BP_CSU_CSL30_NUW_S2)

//! @brief Format value for bitfield CSU_CSL30_NUW_S2.
#define BF_CSU_CSL30_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_NUW_S2) & BM_CSU_CSL30_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL30_NUW_S2(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_NUW_S2) | BF_CSU_CSL30_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL30_NSW_S2      (7)      //!< Bit position for CSU_CSL30_NSW_S2.
#define BM_CSU_CSL30_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL30_NSW_S2.

//! @brief Get value of CSU_CSL30_NSW_S2 from a register value.
#define BG_CSU_CSL30_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_NSW_S2) >> BP_CSU_CSL30_NSW_S2)

//! @brief Format value for bitfield CSU_CSL30_NSW_S2.
#define BF_CSU_CSL30_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_NSW_S2) & BM_CSU_CSL30_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL30_NSW_S2(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_NSW_S2) | BF_CSU_CSL30_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL30_LOCK_S2      (8)      //!< Bit position for CSU_CSL30_LOCK_S2.
#define BM_CSU_CSL30_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL30_LOCK_S2.

//! @brief Get value of CSU_CSL30_LOCK_S2 from a register value.
#define BG_CSU_CSL30_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_LOCK_S2) >> BP_CSU_CSL30_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL30_LOCK_S2.
#define BF_CSU_CSL30_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_LOCK_S2) & BM_CSU_CSL30_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL30_LOCK_S2(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_LOCK_S2) | BF_CSU_CSL30_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL30_SUR_S1      (16)      //!< Bit position for CSU_CSL30_SUR_S1.
#define BM_CSU_CSL30_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL30_SUR_S1.

//! @brief Get value of CSU_CSL30_SUR_S1 from a register value.
#define BG_CSU_CSL30_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_SUR_S1) >> BP_CSU_CSL30_SUR_S1)

//! @brief Format value for bitfield CSU_CSL30_SUR_S1.
#define BF_CSU_CSL30_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_SUR_S1) & BM_CSU_CSL30_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL30_SUR_S1(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_SUR_S1) | BF_CSU_CSL30_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL30_SSR_S1      (17)      //!< Bit position for CSU_CSL30_SSR_S1.
#define BM_CSU_CSL30_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL30_SSR_S1.

//! @brief Get value of CSU_CSL30_SSR_S1 from a register value.
#define BG_CSU_CSL30_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_SSR_S1) >> BP_CSU_CSL30_SSR_S1)

//! @brief Format value for bitfield CSU_CSL30_SSR_S1.
#define BF_CSU_CSL30_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_SSR_S1) & BM_CSU_CSL30_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL30_SSR_S1(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_SSR_S1) | BF_CSU_CSL30_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL30_NUR_S1      (18)      //!< Bit position for CSU_CSL30_NUR_S1.
#define BM_CSU_CSL30_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL30_NUR_S1.

//! @brief Get value of CSU_CSL30_NUR_S1 from a register value.
#define BG_CSU_CSL30_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_NUR_S1) >> BP_CSU_CSL30_NUR_S1)

//! @brief Format value for bitfield CSU_CSL30_NUR_S1.
#define BF_CSU_CSL30_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_NUR_S1) & BM_CSU_CSL30_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL30_NUR_S1(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_NUR_S1) | BF_CSU_CSL30_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL30_NSR_S1      (19)      //!< Bit position for CSU_CSL30_NSR_S1.
#define BM_CSU_CSL30_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL30_NSR_S1.

//! @brief Get value of CSU_CSL30_NSR_S1 from a register value.
#define BG_CSU_CSL30_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_NSR_S1) >> BP_CSU_CSL30_NSR_S1)

//! @brief Format value for bitfield CSU_CSL30_NSR_S1.
#define BF_CSU_CSL30_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_NSR_S1) & BM_CSU_CSL30_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL30_NSR_S1(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_NSR_S1) | BF_CSU_CSL30_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL30_SUW_S1      (20)      //!< Bit position for CSU_CSL30_SUW_S1.
#define BM_CSU_CSL30_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL30_SUW_S1.

//! @brief Get value of CSU_CSL30_SUW_S1 from a register value.
#define BG_CSU_CSL30_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_SUW_S1) >> BP_CSU_CSL30_SUW_S1)

//! @brief Format value for bitfield CSU_CSL30_SUW_S1.
#define BF_CSU_CSL30_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_SUW_S1) & BM_CSU_CSL30_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL30_SUW_S1(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_SUW_S1) | BF_CSU_CSL30_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL30_SSW_S1      (21)      //!< Bit position for CSU_CSL30_SSW_S1.
#define BM_CSU_CSL30_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL30_SSW_S1.

//! @brief Get value of CSU_CSL30_SSW_S1 from a register value.
#define BG_CSU_CSL30_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_SSW_S1) >> BP_CSU_CSL30_SSW_S1)

//! @brief Format value for bitfield CSU_CSL30_SSW_S1.
#define BF_CSU_CSL30_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_SSW_S1) & BM_CSU_CSL30_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL30_SSW_S1(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_SSW_S1) | BF_CSU_CSL30_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL30_NUW_S1      (22)      //!< Bit position for CSU_CSL30_NUW_S1.
#define BM_CSU_CSL30_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL30_NUW_S1.

//! @brief Get value of CSU_CSL30_NUW_S1 from a register value.
#define BG_CSU_CSL30_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_NUW_S1) >> BP_CSU_CSL30_NUW_S1)

//! @brief Format value for bitfield CSU_CSL30_NUW_S1.
#define BF_CSU_CSL30_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_NUW_S1) & BM_CSU_CSL30_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL30_NUW_S1(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_NUW_S1) | BF_CSU_CSL30_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL30_NSW_S1      (23)      //!< Bit position for CSU_CSL30_NSW_S1.
#define BM_CSU_CSL30_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL30_NSW_S1.

//! @brief Get value of CSU_CSL30_NSW_S1 from a register value.
#define BG_CSU_CSL30_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_NSW_S1) >> BP_CSU_CSL30_NSW_S1)

//! @brief Format value for bitfield CSU_CSL30_NSW_S1.
#define BF_CSU_CSL30_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_NSW_S1) & BM_CSU_CSL30_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL30_NSW_S1(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_NSW_S1) | BF_CSU_CSL30_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL30, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL30_LOCK_S1      (24)      //!< Bit position for CSU_CSL30_LOCK_S1.
#define BM_CSU_CSL30_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL30_LOCK_S1.

//! @brief Get value of CSU_CSL30_LOCK_S1 from a register value.
#define BG_CSU_CSL30_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL30_LOCK_S1) >> BP_CSU_CSL30_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL30_LOCK_S1.
#define BF_CSU_CSL30_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL30_LOCK_S1) & BM_CSU_CSL30_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL30_LOCK_S1(v)   (HW_CSU_CSL30_WR((HW_CSU_CSL30_RD() & ~BM_CSU_CSL30_LOCK_S1) | BF_CSU_CSL30_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL31 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL31 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl31
{
    reg32_t U;
    struct _hw_csu_csl31_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl31_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL31 register
 */
//@{
#define HW_CSU_CSL31_ADDR      (REGS_CSU_BASE + 0x7c)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL31           (*(volatile hw_csu_csl31_t *) HW_CSU_CSL31_ADDR)
#define HW_CSU_CSL31_RD()      (HW_CSU_CSL31.U)
#define HW_CSU_CSL31_WR(v)     (HW_CSU_CSL31.U = (v))
#define HW_CSU_CSL31_SET(v)    (HW_CSU_CSL31_WR(HW_CSU_CSL31_RD() |  (v)))
#define HW_CSU_CSL31_CLR(v)    (HW_CSU_CSL31_WR(HW_CSU_CSL31_RD() & ~(v)))
#define HW_CSU_CSL31_TOG(v)    (HW_CSU_CSL31_WR(HW_CSU_CSL31_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL31 bitfields
 */

/*! @name Register CSU_CSL31, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL31_SUR_S2      (0)      //!< Bit position for CSU_CSL31_SUR_S2.
#define BM_CSU_CSL31_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL31_SUR_S2.

//! @brief Get value of CSU_CSL31_SUR_S2 from a register value.
#define BG_CSU_CSL31_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_SUR_S2) >> BP_CSU_CSL31_SUR_S2)

//! @brief Format value for bitfield CSU_CSL31_SUR_S2.
#define BF_CSU_CSL31_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_SUR_S2) & BM_CSU_CSL31_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL31_SUR_S2(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_SUR_S2) | BF_CSU_CSL31_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL31_SSR_S2      (1)      //!< Bit position for CSU_CSL31_SSR_S2.
#define BM_CSU_CSL31_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL31_SSR_S2.

//! @brief Get value of CSU_CSL31_SSR_S2 from a register value.
#define BG_CSU_CSL31_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_SSR_S2) >> BP_CSU_CSL31_SSR_S2)

//! @brief Format value for bitfield CSU_CSL31_SSR_S2.
#define BF_CSU_CSL31_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_SSR_S2) & BM_CSU_CSL31_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL31_SSR_S2(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_SSR_S2) | BF_CSU_CSL31_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL31_NUR_S2      (2)      //!< Bit position for CSU_CSL31_NUR_S2.
#define BM_CSU_CSL31_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL31_NUR_S2.

//! @brief Get value of CSU_CSL31_NUR_S2 from a register value.
#define BG_CSU_CSL31_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_NUR_S2) >> BP_CSU_CSL31_NUR_S2)

//! @brief Format value for bitfield CSU_CSL31_NUR_S2.
#define BF_CSU_CSL31_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_NUR_S2) & BM_CSU_CSL31_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL31_NUR_S2(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_NUR_S2) | BF_CSU_CSL31_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL31_NSR_S2      (3)      //!< Bit position for CSU_CSL31_NSR_S2.
#define BM_CSU_CSL31_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL31_NSR_S2.

//! @brief Get value of CSU_CSL31_NSR_S2 from a register value.
#define BG_CSU_CSL31_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_NSR_S2) >> BP_CSU_CSL31_NSR_S2)

//! @brief Format value for bitfield CSU_CSL31_NSR_S2.
#define BF_CSU_CSL31_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_NSR_S2) & BM_CSU_CSL31_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL31_NSR_S2(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_NSR_S2) | BF_CSU_CSL31_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL31_SUW_S2      (4)      //!< Bit position for CSU_CSL31_SUW_S2.
#define BM_CSU_CSL31_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL31_SUW_S2.

//! @brief Get value of CSU_CSL31_SUW_S2 from a register value.
#define BG_CSU_CSL31_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_SUW_S2) >> BP_CSU_CSL31_SUW_S2)

//! @brief Format value for bitfield CSU_CSL31_SUW_S2.
#define BF_CSU_CSL31_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_SUW_S2) & BM_CSU_CSL31_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL31_SUW_S2(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_SUW_S2) | BF_CSU_CSL31_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL31_SSW_S2      (5)      //!< Bit position for CSU_CSL31_SSW_S2.
#define BM_CSU_CSL31_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL31_SSW_S2.

//! @brief Get value of CSU_CSL31_SSW_S2 from a register value.
#define BG_CSU_CSL31_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_SSW_S2) >> BP_CSU_CSL31_SSW_S2)

//! @brief Format value for bitfield CSU_CSL31_SSW_S2.
#define BF_CSU_CSL31_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_SSW_S2) & BM_CSU_CSL31_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL31_SSW_S2(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_SSW_S2) | BF_CSU_CSL31_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL31_NUW_S2      (6)      //!< Bit position for CSU_CSL31_NUW_S2.
#define BM_CSU_CSL31_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL31_NUW_S2.

//! @brief Get value of CSU_CSL31_NUW_S2 from a register value.
#define BG_CSU_CSL31_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_NUW_S2) >> BP_CSU_CSL31_NUW_S2)

//! @brief Format value for bitfield CSU_CSL31_NUW_S2.
#define BF_CSU_CSL31_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_NUW_S2) & BM_CSU_CSL31_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL31_NUW_S2(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_NUW_S2) | BF_CSU_CSL31_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL31_NSW_S2      (7)      //!< Bit position for CSU_CSL31_NSW_S2.
#define BM_CSU_CSL31_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL31_NSW_S2.

//! @brief Get value of CSU_CSL31_NSW_S2 from a register value.
#define BG_CSU_CSL31_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_NSW_S2) >> BP_CSU_CSL31_NSW_S2)

//! @brief Format value for bitfield CSU_CSL31_NSW_S2.
#define BF_CSU_CSL31_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_NSW_S2) & BM_CSU_CSL31_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL31_NSW_S2(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_NSW_S2) | BF_CSU_CSL31_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL31_LOCK_S2      (8)      //!< Bit position for CSU_CSL31_LOCK_S2.
#define BM_CSU_CSL31_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL31_LOCK_S2.

//! @brief Get value of CSU_CSL31_LOCK_S2 from a register value.
#define BG_CSU_CSL31_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_LOCK_S2) >> BP_CSU_CSL31_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL31_LOCK_S2.
#define BF_CSU_CSL31_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_LOCK_S2) & BM_CSU_CSL31_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL31_LOCK_S2(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_LOCK_S2) | BF_CSU_CSL31_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL31_SUR_S1      (16)      //!< Bit position for CSU_CSL31_SUR_S1.
#define BM_CSU_CSL31_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL31_SUR_S1.

//! @brief Get value of CSU_CSL31_SUR_S1 from a register value.
#define BG_CSU_CSL31_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_SUR_S1) >> BP_CSU_CSL31_SUR_S1)

//! @brief Format value for bitfield CSU_CSL31_SUR_S1.
#define BF_CSU_CSL31_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_SUR_S1) & BM_CSU_CSL31_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL31_SUR_S1(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_SUR_S1) | BF_CSU_CSL31_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL31_SSR_S1      (17)      //!< Bit position for CSU_CSL31_SSR_S1.
#define BM_CSU_CSL31_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL31_SSR_S1.

//! @brief Get value of CSU_CSL31_SSR_S1 from a register value.
#define BG_CSU_CSL31_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_SSR_S1) >> BP_CSU_CSL31_SSR_S1)

//! @brief Format value for bitfield CSU_CSL31_SSR_S1.
#define BF_CSU_CSL31_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_SSR_S1) & BM_CSU_CSL31_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL31_SSR_S1(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_SSR_S1) | BF_CSU_CSL31_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL31_NUR_S1      (18)      //!< Bit position for CSU_CSL31_NUR_S1.
#define BM_CSU_CSL31_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL31_NUR_S1.

//! @brief Get value of CSU_CSL31_NUR_S1 from a register value.
#define BG_CSU_CSL31_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_NUR_S1) >> BP_CSU_CSL31_NUR_S1)

//! @brief Format value for bitfield CSU_CSL31_NUR_S1.
#define BF_CSU_CSL31_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_NUR_S1) & BM_CSU_CSL31_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL31_NUR_S1(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_NUR_S1) | BF_CSU_CSL31_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL31_NSR_S1      (19)      //!< Bit position for CSU_CSL31_NSR_S1.
#define BM_CSU_CSL31_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL31_NSR_S1.

//! @brief Get value of CSU_CSL31_NSR_S1 from a register value.
#define BG_CSU_CSL31_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_NSR_S1) >> BP_CSU_CSL31_NSR_S1)

//! @brief Format value for bitfield CSU_CSL31_NSR_S1.
#define BF_CSU_CSL31_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_NSR_S1) & BM_CSU_CSL31_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL31_NSR_S1(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_NSR_S1) | BF_CSU_CSL31_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL31_SUW_S1      (20)      //!< Bit position for CSU_CSL31_SUW_S1.
#define BM_CSU_CSL31_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL31_SUW_S1.

//! @brief Get value of CSU_CSL31_SUW_S1 from a register value.
#define BG_CSU_CSL31_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_SUW_S1) >> BP_CSU_CSL31_SUW_S1)

//! @brief Format value for bitfield CSU_CSL31_SUW_S1.
#define BF_CSU_CSL31_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_SUW_S1) & BM_CSU_CSL31_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL31_SUW_S1(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_SUW_S1) | BF_CSU_CSL31_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL31_SSW_S1      (21)      //!< Bit position for CSU_CSL31_SSW_S1.
#define BM_CSU_CSL31_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL31_SSW_S1.

//! @brief Get value of CSU_CSL31_SSW_S1 from a register value.
#define BG_CSU_CSL31_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_SSW_S1) >> BP_CSU_CSL31_SSW_S1)

//! @brief Format value for bitfield CSU_CSL31_SSW_S1.
#define BF_CSU_CSL31_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_SSW_S1) & BM_CSU_CSL31_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL31_SSW_S1(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_SSW_S1) | BF_CSU_CSL31_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL31_NUW_S1      (22)      //!< Bit position for CSU_CSL31_NUW_S1.
#define BM_CSU_CSL31_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL31_NUW_S1.

//! @brief Get value of CSU_CSL31_NUW_S1 from a register value.
#define BG_CSU_CSL31_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_NUW_S1) >> BP_CSU_CSL31_NUW_S1)

//! @brief Format value for bitfield CSU_CSL31_NUW_S1.
#define BF_CSU_CSL31_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_NUW_S1) & BM_CSU_CSL31_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL31_NUW_S1(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_NUW_S1) | BF_CSU_CSL31_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL31_NSW_S1      (23)      //!< Bit position for CSU_CSL31_NSW_S1.
#define BM_CSU_CSL31_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL31_NSW_S1.

//! @brief Get value of CSU_CSL31_NSW_S1 from a register value.
#define BG_CSU_CSL31_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_NSW_S1) >> BP_CSU_CSL31_NSW_S1)

//! @brief Format value for bitfield CSU_CSL31_NSW_S1.
#define BF_CSU_CSL31_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_NSW_S1) & BM_CSU_CSL31_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL31_NSW_S1(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_NSW_S1) | BF_CSU_CSL31_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL31, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL31_LOCK_S1      (24)      //!< Bit position for CSU_CSL31_LOCK_S1.
#define BM_CSU_CSL31_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL31_LOCK_S1.

//! @brief Get value of CSU_CSL31_LOCK_S1 from a register value.
#define BG_CSU_CSL31_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL31_LOCK_S1) >> BP_CSU_CSL31_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL31_LOCK_S1.
#define BF_CSU_CSL31_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL31_LOCK_S1) & BM_CSU_CSL31_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL31_LOCK_S1(v)   (HW_CSU_CSL31_WR((HW_CSU_CSL31_RD() & ~BM_CSU_CSL31_LOCK_S1) | BF_CSU_CSL31_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL32 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL32 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl32
{
    reg32_t U;
    struct _hw_csu_csl32_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl32_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL32 register
 */
//@{
#define HW_CSU_CSL32_ADDR      (REGS_CSU_BASE + 0x80)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL32           (*(volatile hw_csu_csl32_t *) HW_CSU_CSL32_ADDR)
#define HW_CSU_CSL32_RD()      (HW_CSU_CSL32.U)
#define HW_CSU_CSL32_WR(v)     (HW_CSU_CSL32.U = (v))
#define HW_CSU_CSL32_SET(v)    (HW_CSU_CSL32_WR(HW_CSU_CSL32_RD() |  (v)))
#define HW_CSU_CSL32_CLR(v)    (HW_CSU_CSL32_WR(HW_CSU_CSL32_RD() & ~(v)))
#define HW_CSU_CSL32_TOG(v)    (HW_CSU_CSL32_WR(HW_CSU_CSL32_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL32 bitfields
 */

/*! @name Register CSU_CSL32, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL32_SUR_S2      (0)      //!< Bit position for CSU_CSL32_SUR_S2.
#define BM_CSU_CSL32_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL32_SUR_S2.

//! @brief Get value of CSU_CSL32_SUR_S2 from a register value.
#define BG_CSU_CSL32_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_SUR_S2) >> BP_CSU_CSL32_SUR_S2)

//! @brief Format value for bitfield CSU_CSL32_SUR_S2.
#define BF_CSU_CSL32_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_SUR_S2) & BM_CSU_CSL32_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL32_SUR_S2(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_SUR_S2) | BF_CSU_CSL32_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL32_SSR_S2      (1)      //!< Bit position for CSU_CSL32_SSR_S2.
#define BM_CSU_CSL32_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL32_SSR_S2.

//! @brief Get value of CSU_CSL32_SSR_S2 from a register value.
#define BG_CSU_CSL32_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_SSR_S2) >> BP_CSU_CSL32_SSR_S2)

//! @brief Format value for bitfield CSU_CSL32_SSR_S2.
#define BF_CSU_CSL32_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_SSR_S2) & BM_CSU_CSL32_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL32_SSR_S2(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_SSR_S2) | BF_CSU_CSL32_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL32_NUR_S2      (2)      //!< Bit position for CSU_CSL32_NUR_S2.
#define BM_CSU_CSL32_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL32_NUR_S2.

//! @brief Get value of CSU_CSL32_NUR_S2 from a register value.
#define BG_CSU_CSL32_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_NUR_S2) >> BP_CSU_CSL32_NUR_S2)

//! @brief Format value for bitfield CSU_CSL32_NUR_S2.
#define BF_CSU_CSL32_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_NUR_S2) & BM_CSU_CSL32_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL32_NUR_S2(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_NUR_S2) | BF_CSU_CSL32_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL32_NSR_S2      (3)      //!< Bit position for CSU_CSL32_NSR_S2.
#define BM_CSU_CSL32_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL32_NSR_S2.

//! @brief Get value of CSU_CSL32_NSR_S2 from a register value.
#define BG_CSU_CSL32_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_NSR_S2) >> BP_CSU_CSL32_NSR_S2)

//! @brief Format value for bitfield CSU_CSL32_NSR_S2.
#define BF_CSU_CSL32_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_NSR_S2) & BM_CSU_CSL32_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL32_NSR_S2(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_NSR_S2) | BF_CSU_CSL32_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL32_SUW_S2      (4)      //!< Bit position for CSU_CSL32_SUW_S2.
#define BM_CSU_CSL32_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL32_SUW_S2.

//! @brief Get value of CSU_CSL32_SUW_S2 from a register value.
#define BG_CSU_CSL32_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_SUW_S2) >> BP_CSU_CSL32_SUW_S2)

//! @brief Format value for bitfield CSU_CSL32_SUW_S2.
#define BF_CSU_CSL32_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_SUW_S2) & BM_CSU_CSL32_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL32_SUW_S2(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_SUW_S2) | BF_CSU_CSL32_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL32_SSW_S2      (5)      //!< Bit position for CSU_CSL32_SSW_S2.
#define BM_CSU_CSL32_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL32_SSW_S2.

//! @brief Get value of CSU_CSL32_SSW_S2 from a register value.
#define BG_CSU_CSL32_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_SSW_S2) >> BP_CSU_CSL32_SSW_S2)

//! @brief Format value for bitfield CSU_CSL32_SSW_S2.
#define BF_CSU_CSL32_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_SSW_S2) & BM_CSU_CSL32_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL32_SSW_S2(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_SSW_S2) | BF_CSU_CSL32_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL32_NUW_S2      (6)      //!< Bit position for CSU_CSL32_NUW_S2.
#define BM_CSU_CSL32_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL32_NUW_S2.

//! @brief Get value of CSU_CSL32_NUW_S2 from a register value.
#define BG_CSU_CSL32_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_NUW_S2) >> BP_CSU_CSL32_NUW_S2)

//! @brief Format value for bitfield CSU_CSL32_NUW_S2.
#define BF_CSU_CSL32_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_NUW_S2) & BM_CSU_CSL32_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL32_NUW_S2(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_NUW_S2) | BF_CSU_CSL32_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL32_NSW_S2      (7)      //!< Bit position for CSU_CSL32_NSW_S2.
#define BM_CSU_CSL32_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL32_NSW_S2.

//! @brief Get value of CSU_CSL32_NSW_S2 from a register value.
#define BG_CSU_CSL32_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_NSW_S2) >> BP_CSU_CSL32_NSW_S2)

//! @brief Format value for bitfield CSU_CSL32_NSW_S2.
#define BF_CSU_CSL32_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_NSW_S2) & BM_CSU_CSL32_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL32_NSW_S2(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_NSW_S2) | BF_CSU_CSL32_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL32_LOCK_S2      (8)      //!< Bit position for CSU_CSL32_LOCK_S2.
#define BM_CSU_CSL32_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL32_LOCK_S2.

//! @brief Get value of CSU_CSL32_LOCK_S2 from a register value.
#define BG_CSU_CSL32_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_LOCK_S2) >> BP_CSU_CSL32_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL32_LOCK_S2.
#define BF_CSU_CSL32_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_LOCK_S2) & BM_CSU_CSL32_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL32_LOCK_S2(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_LOCK_S2) | BF_CSU_CSL32_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL32_SUR_S1      (16)      //!< Bit position for CSU_CSL32_SUR_S1.
#define BM_CSU_CSL32_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL32_SUR_S1.

//! @brief Get value of CSU_CSL32_SUR_S1 from a register value.
#define BG_CSU_CSL32_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_SUR_S1) >> BP_CSU_CSL32_SUR_S1)

//! @brief Format value for bitfield CSU_CSL32_SUR_S1.
#define BF_CSU_CSL32_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_SUR_S1) & BM_CSU_CSL32_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL32_SUR_S1(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_SUR_S1) | BF_CSU_CSL32_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL32_SSR_S1      (17)      //!< Bit position for CSU_CSL32_SSR_S1.
#define BM_CSU_CSL32_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL32_SSR_S1.

//! @brief Get value of CSU_CSL32_SSR_S1 from a register value.
#define BG_CSU_CSL32_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_SSR_S1) >> BP_CSU_CSL32_SSR_S1)

//! @brief Format value for bitfield CSU_CSL32_SSR_S1.
#define BF_CSU_CSL32_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_SSR_S1) & BM_CSU_CSL32_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL32_SSR_S1(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_SSR_S1) | BF_CSU_CSL32_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL32_NUR_S1      (18)      //!< Bit position for CSU_CSL32_NUR_S1.
#define BM_CSU_CSL32_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL32_NUR_S1.

//! @brief Get value of CSU_CSL32_NUR_S1 from a register value.
#define BG_CSU_CSL32_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_NUR_S1) >> BP_CSU_CSL32_NUR_S1)

//! @brief Format value for bitfield CSU_CSL32_NUR_S1.
#define BF_CSU_CSL32_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_NUR_S1) & BM_CSU_CSL32_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL32_NUR_S1(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_NUR_S1) | BF_CSU_CSL32_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL32_NSR_S1      (19)      //!< Bit position for CSU_CSL32_NSR_S1.
#define BM_CSU_CSL32_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL32_NSR_S1.

//! @brief Get value of CSU_CSL32_NSR_S1 from a register value.
#define BG_CSU_CSL32_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_NSR_S1) >> BP_CSU_CSL32_NSR_S1)

//! @brief Format value for bitfield CSU_CSL32_NSR_S1.
#define BF_CSU_CSL32_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_NSR_S1) & BM_CSU_CSL32_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL32_NSR_S1(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_NSR_S1) | BF_CSU_CSL32_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL32_SUW_S1      (20)      //!< Bit position for CSU_CSL32_SUW_S1.
#define BM_CSU_CSL32_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL32_SUW_S1.

//! @brief Get value of CSU_CSL32_SUW_S1 from a register value.
#define BG_CSU_CSL32_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_SUW_S1) >> BP_CSU_CSL32_SUW_S1)

//! @brief Format value for bitfield CSU_CSL32_SUW_S1.
#define BF_CSU_CSL32_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_SUW_S1) & BM_CSU_CSL32_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL32_SUW_S1(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_SUW_S1) | BF_CSU_CSL32_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL32_SSW_S1      (21)      //!< Bit position for CSU_CSL32_SSW_S1.
#define BM_CSU_CSL32_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL32_SSW_S1.

//! @brief Get value of CSU_CSL32_SSW_S1 from a register value.
#define BG_CSU_CSL32_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_SSW_S1) >> BP_CSU_CSL32_SSW_S1)

//! @brief Format value for bitfield CSU_CSL32_SSW_S1.
#define BF_CSU_CSL32_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_SSW_S1) & BM_CSU_CSL32_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL32_SSW_S1(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_SSW_S1) | BF_CSU_CSL32_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL32_NUW_S1      (22)      //!< Bit position for CSU_CSL32_NUW_S1.
#define BM_CSU_CSL32_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL32_NUW_S1.

//! @brief Get value of CSU_CSL32_NUW_S1 from a register value.
#define BG_CSU_CSL32_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_NUW_S1) >> BP_CSU_CSL32_NUW_S1)

//! @brief Format value for bitfield CSU_CSL32_NUW_S1.
#define BF_CSU_CSL32_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_NUW_S1) & BM_CSU_CSL32_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL32_NUW_S1(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_NUW_S1) | BF_CSU_CSL32_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL32_NSW_S1      (23)      //!< Bit position for CSU_CSL32_NSW_S1.
#define BM_CSU_CSL32_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL32_NSW_S1.

//! @brief Get value of CSU_CSL32_NSW_S1 from a register value.
#define BG_CSU_CSL32_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_NSW_S1) >> BP_CSU_CSL32_NSW_S1)

//! @brief Format value for bitfield CSU_CSL32_NSW_S1.
#define BF_CSU_CSL32_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_NSW_S1) & BM_CSU_CSL32_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL32_NSW_S1(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_NSW_S1) | BF_CSU_CSL32_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL32, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL32_LOCK_S1      (24)      //!< Bit position for CSU_CSL32_LOCK_S1.
#define BM_CSU_CSL32_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL32_LOCK_S1.

//! @brief Get value of CSU_CSL32_LOCK_S1 from a register value.
#define BG_CSU_CSL32_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL32_LOCK_S1) >> BP_CSU_CSL32_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL32_LOCK_S1.
#define BF_CSU_CSL32_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL32_LOCK_S1) & BM_CSU_CSL32_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL32_LOCK_S1(v)   (HW_CSU_CSL32_WR((HW_CSU_CSL32_RD() & ~BM_CSU_CSL32_LOCK_S1) | BF_CSU_CSL32_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL33 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL33 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl33
{
    reg32_t U;
    struct _hw_csu_csl33_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl33_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL33 register
 */
//@{
#define HW_CSU_CSL33_ADDR      (REGS_CSU_BASE + 0x84)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL33           (*(volatile hw_csu_csl33_t *) HW_CSU_CSL33_ADDR)
#define HW_CSU_CSL33_RD()      (HW_CSU_CSL33.U)
#define HW_CSU_CSL33_WR(v)     (HW_CSU_CSL33.U = (v))
#define HW_CSU_CSL33_SET(v)    (HW_CSU_CSL33_WR(HW_CSU_CSL33_RD() |  (v)))
#define HW_CSU_CSL33_CLR(v)    (HW_CSU_CSL33_WR(HW_CSU_CSL33_RD() & ~(v)))
#define HW_CSU_CSL33_TOG(v)    (HW_CSU_CSL33_WR(HW_CSU_CSL33_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL33 bitfields
 */

/*! @name Register CSU_CSL33, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL33_SUR_S2      (0)      //!< Bit position for CSU_CSL33_SUR_S2.
#define BM_CSU_CSL33_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL33_SUR_S2.

//! @brief Get value of CSU_CSL33_SUR_S2 from a register value.
#define BG_CSU_CSL33_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_SUR_S2) >> BP_CSU_CSL33_SUR_S2)

//! @brief Format value for bitfield CSU_CSL33_SUR_S2.
#define BF_CSU_CSL33_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_SUR_S2) & BM_CSU_CSL33_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL33_SUR_S2(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_SUR_S2) | BF_CSU_CSL33_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL33_SSR_S2      (1)      //!< Bit position for CSU_CSL33_SSR_S2.
#define BM_CSU_CSL33_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL33_SSR_S2.

//! @brief Get value of CSU_CSL33_SSR_S2 from a register value.
#define BG_CSU_CSL33_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_SSR_S2) >> BP_CSU_CSL33_SSR_S2)

//! @brief Format value for bitfield CSU_CSL33_SSR_S2.
#define BF_CSU_CSL33_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_SSR_S2) & BM_CSU_CSL33_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL33_SSR_S2(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_SSR_S2) | BF_CSU_CSL33_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL33_NUR_S2      (2)      //!< Bit position for CSU_CSL33_NUR_S2.
#define BM_CSU_CSL33_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL33_NUR_S2.

//! @brief Get value of CSU_CSL33_NUR_S2 from a register value.
#define BG_CSU_CSL33_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_NUR_S2) >> BP_CSU_CSL33_NUR_S2)

//! @brief Format value for bitfield CSU_CSL33_NUR_S2.
#define BF_CSU_CSL33_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_NUR_S2) & BM_CSU_CSL33_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL33_NUR_S2(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_NUR_S2) | BF_CSU_CSL33_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL33_NSR_S2      (3)      //!< Bit position for CSU_CSL33_NSR_S2.
#define BM_CSU_CSL33_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL33_NSR_S2.

//! @brief Get value of CSU_CSL33_NSR_S2 from a register value.
#define BG_CSU_CSL33_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_NSR_S2) >> BP_CSU_CSL33_NSR_S2)

//! @brief Format value for bitfield CSU_CSL33_NSR_S2.
#define BF_CSU_CSL33_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_NSR_S2) & BM_CSU_CSL33_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL33_NSR_S2(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_NSR_S2) | BF_CSU_CSL33_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL33_SUW_S2      (4)      //!< Bit position for CSU_CSL33_SUW_S2.
#define BM_CSU_CSL33_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL33_SUW_S2.

//! @brief Get value of CSU_CSL33_SUW_S2 from a register value.
#define BG_CSU_CSL33_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_SUW_S2) >> BP_CSU_CSL33_SUW_S2)

//! @brief Format value for bitfield CSU_CSL33_SUW_S2.
#define BF_CSU_CSL33_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_SUW_S2) & BM_CSU_CSL33_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL33_SUW_S2(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_SUW_S2) | BF_CSU_CSL33_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL33_SSW_S2      (5)      //!< Bit position for CSU_CSL33_SSW_S2.
#define BM_CSU_CSL33_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL33_SSW_S2.

//! @brief Get value of CSU_CSL33_SSW_S2 from a register value.
#define BG_CSU_CSL33_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_SSW_S2) >> BP_CSU_CSL33_SSW_S2)

//! @brief Format value for bitfield CSU_CSL33_SSW_S2.
#define BF_CSU_CSL33_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_SSW_S2) & BM_CSU_CSL33_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL33_SSW_S2(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_SSW_S2) | BF_CSU_CSL33_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL33_NUW_S2      (6)      //!< Bit position for CSU_CSL33_NUW_S2.
#define BM_CSU_CSL33_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL33_NUW_S2.

//! @brief Get value of CSU_CSL33_NUW_S2 from a register value.
#define BG_CSU_CSL33_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_NUW_S2) >> BP_CSU_CSL33_NUW_S2)

//! @brief Format value for bitfield CSU_CSL33_NUW_S2.
#define BF_CSU_CSL33_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_NUW_S2) & BM_CSU_CSL33_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL33_NUW_S2(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_NUW_S2) | BF_CSU_CSL33_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL33_NSW_S2      (7)      //!< Bit position for CSU_CSL33_NSW_S2.
#define BM_CSU_CSL33_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL33_NSW_S2.

//! @brief Get value of CSU_CSL33_NSW_S2 from a register value.
#define BG_CSU_CSL33_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_NSW_S2) >> BP_CSU_CSL33_NSW_S2)

//! @brief Format value for bitfield CSU_CSL33_NSW_S2.
#define BF_CSU_CSL33_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_NSW_S2) & BM_CSU_CSL33_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL33_NSW_S2(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_NSW_S2) | BF_CSU_CSL33_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL33_LOCK_S2      (8)      //!< Bit position for CSU_CSL33_LOCK_S2.
#define BM_CSU_CSL33_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL33_LOCK_S2.

//! @brief Get value of CSU_CSL33_LOCK_S2 from a register value.
#define BG_CSU_CSL33_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_LOCK_S2) >> BP_CSU_CSL33_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL33_LOCK_S2.
#define BF_CSU_CSL33_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_LOCK_S2) & BM_CSU_CSL33_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL33_LOCK_S2(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_LOCK_S2) | BF_CSU_CSL33_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL33_SUR_S1      (16)      //!< Bit position for CSU_CSL33_SUR_S1.
#define BM_CSU_CSL33_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL33_SUR_S1.

//! @brief Get value of CSU_CSL33_SUR_S1 from a register value.
#define BG_CSU_CSL33_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_SUR_S1) >> BP_CSU_CSL33_SUR_S1)

//! @brief Format value for bitfield CSU_CSL33_SUR_S1.
#define BF_CSU_CSL33_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_SUR_S1) & BM_CSU_CSL33_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL33_SUR_S1(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_SUR_S1) | BF_CSU_CSL33_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL33_SSR_S1      (17)      //!< Bit position for CSU_CSL33_SSR_S1.
#define BM_CSU_CSL33_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL33_SSR_S1.

//! @brief Get value of CSU_CSL33_SSR_S1 from a register value.
#define BG_CSU_CSL33_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_SSR_S1) >> BP_CSU_CSL33_SSR_S1)

//! @brief Format value for bitfield CSU_CSL33_SSR_S1.
#define BF_CSU_CSL33_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_SSR_S1) & BM_CSU_CSL33_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL33_SSR_S1(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_SSR_S1) | BF_CSU_CSL33_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL33_NUR_S1      (18)      //!< Bit position for CSU_CSL33_NUR_S1.
#define BM_CSU_CSL33_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL33_NUR_S1.

//! @brief Get value of CSU_CSL33_NUR_S1 from a register value.
#define BG_CSU_CSL33_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_NUR_S1) >> BP_CSU_CSL33_NUR_S1)

//! @brief Format value for bitfield CSU_CSL33_NUR_S1.
#define BF_CSU_CSL33_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_NUR_S1) & BM_CSU_CSL33_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL33_NUR_S1(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_NUR_S1) | BF_CSU_CSL33_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL33_NSR_S1      (19)      //!< Bit position for CSU_CSL33_NSR_S1.
#define BM_CSU_CSL33_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL33_NSR_S1.

//! @brief Get value of CSU_CSL33_NSR_S1 from a register value.
#define BG_CSU_CSL33_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_NSR_S1) >> BP_CSU_CSL33_NSR_S1)

//! @brief Format value for bitfield CSU_CSL33_NSR_S1.
#define BF_CSU_CSL33_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_NSR_S1) & BM_CSU_CSL33_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL33_NSR_S1(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_NSR_S1) | BF_CSU_CSL33_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL33_SUW_S1      (20)      //!< Bit position for CSU_CSL33_SUW_S1.
#define BM_CSU_CSL33_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL33_SUW_S1.

//! @brief Get value of CSU_CSL33_SUW_S1 from a register value.
#define BG_CSU_CSL33_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_SUW_S1) >> BP_CSU_CSL33_SUW_S1)

//! @brief Format value for bitfield CSU_CSL33_SUW_S1.
#define BF_CSU_CSL33_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_SUW_S1) & BM_CSU_CSL33_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL33_SUW_S1(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_SUW_S1) | BF_CSU_CSL33_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL33_SSW_S1      (21)      //!< Bit position for CSU_CSL33_SSW_S1.
#define BM_CSU_CSL33_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL33_SSW_S1.

//! @brief Get value of CSU_CSL33_SSW_S1 from a register value.
#define BG_CSU_CSL33_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_SSW_S1) >> BP_CSU_CSL33_SSW_S1)

//! @brief Format value for bitfield CSU_CSL33_SSW_S1.
#define BF_CSU_CSL33_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_SSW_S1) & BM_CSU_CSL33_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL33_SSW_S1(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_SSW_S1) | BF_CSU_CSL33_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL33_NUW_S1      (22)      //!< Bit position for CSU_CSL33_NUW_S1.
#define BM_CSU_CSL33_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL33_NUW_S1.

//! @brief Get value of CSU_CSL33_NUW_S1 from a register value.
#define BG_CSU_CSL33_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_NUW_S1) >> BP_CSU_CSL33_NUW_S1)

//! @brief Format value for bitfield CSU_CSL33_NUW_S1.
#define BF_CSU_CSL33_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_NUW_S1) & BM_CSU_CSL33_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL33_NUW_S1(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_NUW_S1) | BF_CSU_CSL33_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL33_NSW_S1      (23)      //!< Bit position for CSU_CSL33_NSW_S1.
#define BM_CSU_CSL33_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL33_NSW_S1.

//! @brief Get value of CSU_CSL33_NSW_S1 from a register value.
#define BG_CSU_CSL33_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_NSW_S1) >> BP_CSU_CSL33_NSW_S1)

//! @brief Format value for bitfield CSU_CSL33_NSW_S1.
#define BF_CSU_CSL33_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_NSW_S1) & BM_CSU_CSL33_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL33_NSW_S1(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_NSW_S1) | BF_CSU_CSL33_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL33, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL33_LOCK_S1      (24)      //!< Bit position for CSU_CSL33_LOCK_S1.
#define BM_CSU_CSL33_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL33_LOCK_S1.

//! @brief Get value of CSU_CSL33_LOCK_S1 from a register value.
#define BG_CSU_CSL33_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL33_LOCK_S1) >> BP_CSU_CSL33_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL33_LOCK_S1.
#define BF_CSU_CSL33_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL33_LOCK_S1) & BM_CSU_CSL33_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL33_LOCK_S1(v)   (HW_CSU_CSL33_WR((HW_CSU_CSL33_RD() & ~BM_CSU_CSL33_LOCK_S1) | BF_CSU_CSL33_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL34 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL34 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl34
{
    reg32_t U;
    struct _hw_csu_csl34_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl34_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL34 register
 */
//@{
#define HW_CSU_CSL34_ADDR      (REGS_CSU_BASE + 0x88)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL34           (*(volatile hw_csu_csl34_t *) HW_CSU_CSL34_ADDR)
#define HW_CSU_CSL34_RD()      (HW_CSU_CSL34.U)
#define HW_CSU_CSL34_WR(v)     (HW_CSU_CSL34.U = (v))
#define HW_CSU_CSL34_SET(v)    (HW_CSU_CSL34_WR(HW_CSU_CSL34_RD() |  (v)))
#define HW_CSU_CSL34_CLR(v)    (HW_CSU_CSL34_WR(HW_CSU_CSL34_RD() & ~(v)))
#define HW_CSU_CSL34_TOG(v)    (HW_CSU_CSL34_WR(HW_CSU_CSL34_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL34 bitfields
 */

/*! @name Register CSU_CSL34, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL34_SUR_S2      (0)      //!< Bit position for CSU_CSL34_SUR_S2.
#define BM_CSU_CSL34_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL34_SUR_S2.

//! @brief Get value of CSU_CSL34_SUR_S2 from a register value.
#define BG_CSU_CSL34_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_SUR_S2) >> BP_CSU_CSL34_SUR_S2)

//! @brief Format value for bitfield CSU_CSL34_SUR_S2.
#define BF_CSU_CSL34_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_SUR_S2) & BM_CSU_CSL34_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL34_SUR_S2(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_SUR_S2) | BF_CSU_CSL34_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL34_SSR_S2      (1)      //!< Bit position for CSU_CSL34_SSR_S2.
#define BM_CSU_CSL34_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL34_SSR_S2.

//! @brief Get value of CSU_CSL34_SSR_S2 from a register value.
#define BG_CSU_CSL34_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_SSR_S2) >> BP_CSU_CSL34_SSR_S2)

//! @brief Format value for bitfield CSU_CSL34_SSR_S2.
#define BF_CSU_CSL34_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_SSR_S2) & BM_CSU_CSL34_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL34_SSR_S2(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_SSR_S2) | BF_CSU_CSL34_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL34_NUR_S2      (2)      //!< Bit position for CSU_CSL34_NUR_S2.
#define BM_CSU_CSL34_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL34_NUR_S2.

//! @brief Get value of CSU_CSL34_NUR_S2 from a register value.
#define BG_CSU_CSL34_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_NUR_S2) >> BP_CSU_CSL34_NUR_S2)

//! @brief Format value for bitfield CSU_CSL34_NUR_S2.
#define BF_CSU_CSL34_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_NUR_S2) & BM_CSU_CSL34_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL34_NUR_S2(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_NUR_S2) | BF_CSU_CSL34_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL34_NSR_S2      (3)      //!< Bit position for CSU_CSL34_NSR_S2.
#define BM_CSU_CSL34_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL34_NSR_S2.

//! @brief Get value of CSU_CSL34_NSR_S2 from a register value.
#define BG_CSU_CSL34_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_NSR_S2) >> BP_CSU_CSL34_NSR_S2)

//! @brief Format value for bitfield CSU_CSL34_NSR_S2.
#define BF_CSU_CSL34_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_NSR_S2) & BM_CSU_CSL34_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL34_NSR_S2(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_NSR_S2) | BF_CSU_CSL34_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL34_SUW_S2      (4)      //!< Bit position for CSU_CSL34_SUW_S2.
#define BM_CSU_CSL34_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL34_SUW_S2.

//! @brief Get value of CSU_CSL34_SUW_S2 from a register value.
#define BG_CSU_CSL34_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_SUW_S2) >> BP_CSU_CSL34_SUW_S2)

//! @brief Format value for bitfield CSU_CSL34_SUW_S2.
#define BF_CSU_CSL34_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_SUW_S2) & BM_CSU_CSL34_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL34_SUW_S2(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_SUW_S2) | BF_CSU_CSL34_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL34_SSW_S2      (5)      //!< Bit position for CSU_CSL34_SSW_S2.
#define BM_CSU_CSL34_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL34_SSW_S2.

//! @brief Get value of CSU_CSL34_SSW_S2 from a register value.
#define BG_CSU_CSL34_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_SSW_S2) >> BP_CSU_CSL34_SSW_S2)

//! @brief Format value for bitfield CSU_CSL34_SSW_S2.
#define BF_CSU_CSL34_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_SSW_S2) & BM_CSU_CSL34_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL34_SSW_S2(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_SSW_S2) | BF_CSU_CSL34_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL34_NUW_S2      (6)      //!< Bit position for CSU_CSL34_NUW_S2.
#define BM_CSU_CSL34_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL34_NUW_S2.

//! @brief Get value of CSU_CSL34_NUW_S2 from a register value.
#define BG_CSU_CSL34_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_NUW_S2) >> BP_CSU_CSL34_NUW_S2)

//! @brief Format value for bitfield CSU_CSL34_NUW_S2.
#define BF_CSU_CSL34_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_NUW_S2) & BM_CSU_CSL34_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL34_NUW_S2(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_NUW_S2) | BF_CSU_CSL34_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL34_NSW_S2      (7)      //!< Bit position for CSU_CSL34_NSW_S2.
#define BM_CSU_CSL34_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL34_NSW_S2.

//! @brief Get value of CSU_CSL34_NSW_S2 from a register value.
#define BG_CSU_CSL34_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_NSW_S2) >> BP_CSU_CSL34_NSW_S2)

//! @brief Format value for bitfield CSU_CSL34_NSW_S2.
#define BF_CSU_CSL34_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_NSW_S2) & BM_CSU_CSL34_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL34_NSW_S2(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_NSW_S2) | BF_CSU_CSL34_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL34_LOCK_S2      (8)      //!< Bit position for CSU_CSL34_LOCK_S2.
#define BM_CSU_CSL34_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL34_LOCK_S2.

//! @brief Get value of CSU_CSL34_LOCK_S2 from a register value.
#define BG_CSU_CSL34_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_LOCK_S2) >> BP_CSU_CSL34_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL34_LOCK_S2.
#define BF_CSU_CSL34_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_LOCK_S2) & BM_CSU_CSL34_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL34_LOCK_S2(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_LOCK_S2) | BF_CSU_CSL34_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL34_SUR_S1      (16)      //!< Bit position for CSU_CSL34_SUR_S1.
#define BM_CSU_CSL34_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL34_SUR_S1.

//! @brief Get value of CSU_CSL34_SUR_S1 from a register value.
#define BG_CSU_CSL34_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_SUR_S1) >> BP_CSU_CSL34_SUR_S1)

//! @brief Format value for bitfield CSU_CSL34_SUR_S1.
#define BF_CSU_CSL34_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_SUR_S1) & BM_CSU_CSL34_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL34_SUR_S1(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_SUR_S1) | BF_CSU_CSL34_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL34_SSR_S1      (17)      //!< Bit position for CSU_CSL34_SSR_S1.
#define BM_CSU_CSL34_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL34_SSR_S1.

//! @brief Get value of CSU_CSL34_SSR_S1 from a register value.
#define BG_CSU_CSL34_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_SSR_S1) >> BP_CSU_CSL34_SSR_S1)

//! @brief Format value for bitfield CSU_CSL34_SSR_S1.
#define BF_CSU_CSL34_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_SSR_S1) & BM_CSU_CSL34_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL34_SSR_S1(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_SSR_S1) | BF_CSU_CSL34_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL34_NUR_S1      (18)      //!< Bit position for CSU_CSL34_NUR_S1.
#define BM_CSU_CSL34_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL34_NUR_S1.

//! @brief Get value of CSU_CSL34_NUR_S1 from a register value.
#define BG_CSU_CSL34_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_NUR_S1) >> BP_CSU_CSL34_NUR_S1)

//! @brief Format value for bitfield CSU_CSL34_NUR_S1.
#define BF_CSU_CSL34_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_NUR_S1) & BM_CSU_CSL34_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL34_NUR_S1(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_NUR_S1) | BF_CSU_CSL34_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL34_NSR_S1      (19)      //!< Bit position for CSU_CSL34_NSR_S1.
#define BM_CSU_CSL34_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL34_NSR_S1.

//! @brief Get value of CSU_CSL34_NSR_S1 from a register value.
#define BG_CSU_CSL34_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_NSR_S1) >> BP_CSU_CSL34_NSR_S1)

//! @brief Format value for bitfield CSU_CSL34_NSR_S1.
#define BF_CSU_CSL34_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_NSR_S1) & BM_CSU_CSL34_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL34_NSR_S1(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_NSR_S1) | BF_CSU_CSL34_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL34_SUW_S1      (20)      //!< Bit position for CSU_CSL34_SUW_S1.
#define BM_CSU_CSL34_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL34_SUW_S1.

//! @brief Get value of CSU_CSL34_SUW_S1 from a register value.
#define BG_CSU_CSL34_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_SUW_S1) >> BP_CSU_CSL34_SUW_S1)

//! @brief Format value for bitfield CSU_CSL34_SUW_S1.
#define BF_CSU_CSL34_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_SUW_S1) & BM_CSU_CSL34_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL34_SUW_S1(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_SUW_S1) | BF_CSU_CSL34_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL34_SSW_S1      (21)      //!< Bit position for CSU_CSL34_SSW_S1.
#define BM_CSU_CSL34_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL34_SSW_S1.

//! @brief Get value of CSU_CSL34_SSW_S1 from a register value.
#define BG_CSU_CSL34_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_SSW_S1) >> BP_CSU_CSL34_SSW_S1)

//! @brief Format value for bitfield CSU_CSL34_SSW_S1.
#define BF_CSU_CSL34_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_SSW_S1) & BM_CSU_CSL34_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL34_SSW_S1(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_SSW_S1) | BF_CSU_CSL34_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL34_NUW_S1      (22)      //!< Bit position for CSU_CSL34_NUW_S1.
#define BM_CSU_CSL34_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL34_NUW_S1.

//! @brief Get value of CSU_CSL34_NUW_S1 from a register value.
#define BG_CSU_CSL34_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_NUW_S1) >> BP_CSU_CSL34_NUW_S1)

//! @brief Format value for bitfield CSU_CSL34_NUW_S1.
#define BF_CSU_CSL34_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_NUW_S1) & BM_CSU_CSL34_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL34_NUW_S1(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_NUW_S1) | BF_CSU_CSL34_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL34_NSW_S1      (23)      //!< Bit position for CSU_CSL34_NSW_S1.
#define BM_CSU_CSL34_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL34_NSW_S1.

//! @brief Get value of CSU_CSL34_NSW_S1 from a register value.
#define BG_CSU_CSL34_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_NSW_S1) >> BP_CSU_CSL34_NSW_S1)

//! @brief Format value for bitfield CSU_CSL34_NSW_S1.
#define BF_CSU_CSL34_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_NSW_S1) & BM_CSU_CSL34_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL34_NSW_S1(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_NSW_S1) | BF_CSU_CSL34_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL34, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL34_LOCK_S1      (24)      //!< Bit position for CSU_CSL34_LOCK_S1.
#define BM_CSU_CSL34_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL34_LOCK_S1.

//! @brief Get value of CSU_CSL34_LOCK_S1 from a register value.
#define BG_CSU_CSL34_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL34_LOCK_S1) >> BP_CSU_CSL34_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL34_LOCK_S1.
#define BF_CSU_CSL34_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL34_LOCK_S1) & BM_CSU_CSL34_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL34_LOCK_S1(v)   (HW_CSU_CSL34_WR((HW_CSU_CSL34_RD() & ~BM_CSU_CSL34_LOCK_S1) | BF_CSU_CSL34_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL35 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL35 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl35
{
    reg32_t U;
    struct _hw_csu_csl35_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl35_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL35 register
 */
//@{
#define HW_CSU_CSL35_ADDR      (REGS_CSU_BASE + 0x8c)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL35           (*(volatile hw_csu_csl35_t *) HW_CSU_CSL35_ADDR)
#define HW_CSU_CSL35_RD()      (HW_CSU_CSL35.U)
#define HW_CSU_CSL35_WR(v)     (HW_CSU_CSL35.U = (v))
#define HW_CSU_CSL35_SET(v)    (HW_CSU_CSL35_WR(HW_CSU_CSL35_RD() |  (v)))
#define HW_CSU_CSL35_CLR(v)    (HW_CSU_CSL35_WR(HW_CSU_CSL35_RD() & ~(v)))
#define HW_CSU_CSL35_TOG(v)    (HW_CSU_CSL35_WR(HW_CSU_CSL35_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL35 bitfields
 */

/*! @name Register CSU_CSL35, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL35_SUR_S2      (0)      //!< Bit position for CSU_CSL35_SUR_S2.
#define BM_CSU_CSL35_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL35_SUR_S2.

//! @brief Get value of CSU_CSL35_SUR_S2 from a register value.
#define BG_CSU_CSL35_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_SUR_S2) >> BP_CSU_CSL35_SUR_S2)

//! @brief Format value for bitfield CSU_CSL35_SUR_S2.
#define BF_CSU_CSL35_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_SUR_S2) & BM_CSU_CSL35_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL35_SUR_S2(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_SUR_S2) | BF_CSU_CSL35_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL35_SSR_S2      (1)      //!< Bit position for CSU_CSL35_SSR_S2.
#define BM_CSU_CSL35_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL35_SSR_S2.

//! @brief Get value of CSU_CSL35_SSR_S2 from a register value.
#define BG_CSU_CSL35_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_SSR_S2) >> BP_CSU_CSL35_SSR_S2)

//! @brief Format value for bitfield CSU_CSL35_SSR_S2.
#define BF_CSU_CSL35_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_SSR_S2) & BM_CSU_CSL35_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL35_SSR_S2(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_SSR_S2) | BF_CSU_CSL35_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL35_NUR_S2      (2)      //!< Bit position for CSU_CSL35_NUR_S2.
#define BM_CSU_CSL35_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL35_NUR_S2.

//! @brief Get value of CSU_CSL35_NUR_S2 from a register value.
#define BG_CSU_CSL35_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_NUR_S2) >> BP_CSU_CSL35_NUR_S2)

//! @brief Format value for bitfield CSU_CSL35_NUR_S2.
#define BF_CSU_CSL35_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_NUR_S2) & BM_CSU_CSL35_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL35_NUR_S2(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_NUR_S2) | BF_CSU_CSL35_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL35_NSR_S2      (3)      //!< Bit position for CSU_CSL35_NSR_S2.
#define BM_CSU_CSL35_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL35_NSR_S2.

//! @brief Get value of CSU_CSL35_NSR_S2 from a register value.
#define BG_CSU_CSL35_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_NSR_S2) >> BP_CSU_CSL35_NSR_S2)

//! @brief Format value for bitfield CSU_CSL35_NSR_S2.
#define BF_CSU_CSL35_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_NSR_S2) & BM_CSU_CSL35_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL35_NSR_S2(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_NSR_S2) | BF_CSU_CSL35_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL35_SUW_S2      (4)      //!< Bit position for CSU_CSL35_SUW_S2.
#define BM_CSU_CSL35_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL35_SUW_S2.

//! @brief Get value of CSU_CSL35_SUW_S2 from a register value.
#define BG_CSU_CSL35_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_SUW_S2) >> BP_CSU_CSL35_SUW_S2)

//! @brief Format value for bitfield CSU_CSL35_SUW_S2.
#define BF_CSU_CSL35_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_SUW_S2) & BM_CSU_CSL35_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL35_SUW_S2(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_SUW_S2) | BF_CSU_CSL35_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL35_SSW_S2      (5)      //!< Bit position for CSU_CSL35_SSW_S2.
#define BM_CSU_CSL35_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL35_SSW_S2.

//! @brief Get value of CSU_CSL35_SSW_S2 from a register value.
#define BG_CSU_CSL35_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_SSW_S2) >> BP_CSU_CSL35_SSW_S2)

//! @brief Format value for bitfield CSU_CSL35_SSW_S2.
#define BF_CSU_CSL35_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_SSW_S2) & BM_CSU_CSL35_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL35_SSW_S2(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_SSW_S2) | BF_CSU_CSL35_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL35_NUW_S2      (6)      //!< Bit position for CSU_CSL35_NUW_S2.
#define BM_CSU_CSL35_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL35_NUW_S2.

//! @brief Get value of CSU_CSL35_NUW_S2 from a register value.
#define BG_CSU_CSL35_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_NUW_S2) >> BP_CSU_CSL35_NUW_S2)

//! @brief Format value for bitfield CSU_CSL35_NUW_S2.
#define BF_CSU_CSL35_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_NUW_S2) & BM_CSU_CSL35_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL35_NUW_S2(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_NUW_S2) | BF_CSU_CSL35_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL35_NSW_S2      (7)      //!< Bit position for CSU_CSL35_NSW_S2.
#define BM_CSU_CSL35_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL35_NSW_S2.

//! @brief Get value of CSU_CSL35_NSW_S2 from a register value.
#define BG_CSU_CSL35_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_NSW_S2) >> BP_CSU_CSL35_NSW_S2)

//! @brief Format value for bitfield CSU_CSL35_NSW_S2.
#define BF_CSU_CSL35_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_NSW_S2) & BM_CSU_CSL35_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL35_NSW_S2(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_NSW_S2) | BF_CSU_CSL35_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL35_LOCK_S2      (8)      //!< Bit position for CSU_CSL35_LOCK_S2.
#define BM_CSU_CSL35_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL35_LOCK_S2.

//! @brief Get value of CSU_CSL35_LOCK_S2 from a register value.
#define BG_CSU_CSL35_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_LOCK_S2) >> BP_CSU_CSL35_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL35_LOCK_S2.
#define BF_CSU_CSL35_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_LOCK_S2) & BM_CSU_CSL35_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL35_LOCK_S2(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_LOCK_S2) | BF_CSU_CSL35_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL35_SUR_S1      (16)      //!< Bit position for CSU_CSL35_SUR_S1.
#define BM_CSU_CSL35_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL35_SUR_S1.

//! @brief Get value of CSU_CSL35_SUR_S1 from a register value.
#define BG_CSU_CSL35_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_SUR_S1) >> BP_CSU_CSL35_SUR_S1)

//! @brief Format value for bitfield CSU_CSL35_SUR_S1.
#define BF_CSU_CSL35_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_SUR_S1) & BM_CSU_CSL35_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL35_SUR_S1(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_SUR_S1) | BF_CSU_CSL35_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL35_SSR_S1      (17)      //!< Bit position for CSU_CSL35_SSR_S1.
#define BM_CSU_CSL35_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL35_SSR_S1.

//! @brief Get value of CSU_CSL35_SSR_S1 from a register value.
#define BG_CSU_CSL35_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_SSR_S1) >> BP_CSU_CSL35_SSR_S1)

//! @brief Format value for bitfield CSU_CSL35_SSR_S1.
#define BF_CSU_CSL35_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_SSR_S1) & BM_CSU_CSL35_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL35_SSR_S1(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_SSR_S1) | BF_CSU_CSL35_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL35_NUR_S1      (18)      //!< Bit position for CSU_CSL35_NUR_S1.
#define BM_CSU_CSL35_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL35_NUR_S1.

//! @brief Get value of CSU_CSL35_NUR_S1 from a register value.
#define BG_CSU_CSL35_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_NUR_S1) >> BP_CSU_CSL35_NUR_S1)

//! @brief Format value for bitfield CSU_CSL35_NUR_S1.
#define BF_CSU_CSL35_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_NUR_S1) & BM_CSU_CSL35_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL35_NUR_S1(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_NUR_S1) | BF_CSU_CSL35_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL35_NSR_S1      (19)      //!< Bit position for CSU_CSL35_NSR_S1.
#define BM_CSU_CSL35_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL35_NSR_S1.

//! @brief Get value of CSU_CSL35_NSR_S1 from a register value.
#define BG_CSU_CSL35_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_NSR_S1) >> BP_CSU_CSL35_NSR_S1)

//! @brief Format value for bitfield CSU_CSL35_NSR_S1.
#define BF_CSU_CSL35_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_NSR_S1) & BM_CSU_CSL35_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL35_NSR_S1(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_NSR_S1) | BF_CSU_CSL35_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL35_SUW_S1      (20)      //!< Bit position for CSU_CSL35_SUW_S1.
#define BM_CSU_CSL35_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL35_SUW_S1.

//! @brief Get value of CSU_CSL35_SUW_S1 from a register value.
#define BG_CSU_CSL35_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_SUW_S1) >> BP_CSU_CSL35_SUW_S1)

//! @brief Format value for bitfield CSU_CSL35_SUW_S1.
#define BF_CSU_CSL35_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_SUW_S1) & BM_CSU_CSL35_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL35_SUW_S1(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_SUW_S1) | BF_CSU_CSL35_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL35_SSW_S1      (21)      //!< Bit position for CSU_CSL35_SSW_S1.
#define BM_CSU_CSL35_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL35_SSW_S1.

//! @brief Get value of CSU_CSL35_SSW_S1 from a register value.
#define BG_CSU_CSL35_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_SSW_S1) >> BP_CSU_CSL35_SSW_S1)

//! @brief Format value for bitfield CSU_CSL35_SSW_S1.
#define BF_CSU_CSL35_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_SSW_S1) & BM_CSU_CSL35_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL35_SSW_S1(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_SSW_S1) | BF_CSU_CSL35_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL35_NUW_S1      (22)      //!< Bit position for CSU_CSL35_NUW_S1.
#define BM_CSU_CSL35_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL35_NUW_S1.

//! @brief Get value of CSU_CSL35_NUW_S1 from a register value.
#define BG_CSU_CSL35_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_NUW_S1) >> BP_CSU_CSL35_NUW_S1)

//! @brief Format value for bitfield CSU_CSL35_NUW_S1.
#define BF_CSU_CSL35_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_NUW_S1) & BM_CSU_CSL35_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL35_NUW_S1(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_NUW_S1) | BF_CSU_CSL35_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL35_NSW_S1      (23)      //!< Bit position for CSU_CSL35_NSW_S1.
#define BM_CSU_CSL35_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL35_NSW_S1.

//! @brief Get value of CSU_CSL35_NSW_S1 from a register value.
#define BG_CSU_CSL35_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_NSW_S1) >> BP_CSU_CSL35_NSW_S1)

//! @brief Format value for bitfield CSU_CSL35_NSW_S1.
#define BF_CSU_CSL35_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_NSW_S1) & BM_CSU_CSL35_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL35_NSW_S1(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_NSW_S1) | BF_CSU_CSL35_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL35, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL35_LOCK_S1      (24)      //!< Bit position for CSU_CSL35_LOCK_S1.
#define BM_CSU_CSL35_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL35_LOCK_S1.

//! @brief Get value of CSU_CSL35_LOCK_S1 from a register value.
#define BG_CSU_CSL35_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL35_LOCK_S1) >> BP_CSU_CSL35_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL35_LOCK_S1.
#define BF_CSU_CSL35_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL35_LOCK_S1) & BM_CSU_CSL35_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL35_LOCK_S1(v)   (HW_CSU_CSL35_WR((HW_CSU_CSL35_RD() & ~BM_CSU_CSL35_LOCK_S1) | BF_CSU_CSL35_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL36 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL36 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl36
{
    reg32_t U;
    struct _hw_csu_csl36_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl36_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL36 register
 */
//@{
#define HW_CSU_CSL36_ADDR      (REGS_CSU_BASE + 0x90)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL36           (*(volatile hw_csu_csl36_t *) HW_CSU_CSL36_ADDR)
#define HW_CSU_CSL36_RD()      (HW_CSU_CSL36.U)
#define HW_CSU_CSL36_WR(v)     (HW_CSU_CSL36.U = (v))
#define HW_CSU_CSL36_SET(v)    (HW_CSU_CSL36_WR(HW_CSU_CSL36_RD() |  (v)))
#define HW_CSU_CSL36_CLR(v)    (HW_CSU_CSL36_WR(HW_CSU_CSL36_RD() & ~(v)))
#define HW_CSU_CSL36_TOG(v)    (HW_CSU_CSL36_WR(HW_CSU_CSL36_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL36 bitfields
 */

/*! @name Register CSU_CSL36, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL36_SUR_S2      (0)      //!< Bit position for CSU_CSL36_SUR_S2.
#define BM_CSU_CSL36_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL36_SUR_S2.

//! @brief Get value of CSU_CSL36_SUR_S2 from a register value.
#define BG_CSU_CSL36_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_SUR_S2) >> BP_CSU_CSL36_SUR_S2)

//! @brief Format value for bitfield CSU_CSL36_SUR_S2.
#define BF_CSU_CSL36_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_SUR_S2) & BM_CSU_CSL36_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL36_SUR_S2(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_SUR_S2) | BF_CSU_CSL36_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL36_SSR_S2      (1)      //!< Bit position for CSU_CSL36_SSR_S2.
#define BM_CSU_CSL36_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL36_SSR_S2.

//! @brief Get value of CSU_CSL36_SSR_S2 from a register value.
#define BG_CSU_CSL36_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_SSR_S2) >> BP_CSU_CSL36_SSR_S2)

//! @brief Format value for bitfield CSU_CSL36_SSR_S2.
#define BF_CSU_CSL36_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_SSR_S2) & BM_CSU_CSL36_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL36_SSR_S2(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_SSR_S2) | BF_CSU_CSL36_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL36_NUR_S2      (2)      //!< Bit position for CSU_CSL36_NUR_S2.
#define BM_CSU_CSL36_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL36_NUR_S2.

//! @brief Get value of CSU_CSL36_NUR_S2 from a register value.
#define BG_CSU_CSL36_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_NUR_S2) >> BP_CSU_CSL36_NUR_S2)

//! @brief Format value for bitfield CSU_CSL36_NUR_S2.
#define BF_CSU_CSL36_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_NUR_S2) & BM_CSU_CSL36_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL36_NUR_S2(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_NUR_S2) | BF_CSU_CSL36_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL36_NSR_S2      (3)      //!< Bit position for CSU_CSL36_NSR_S2.
#define BM_CSU_CSL36_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL36_NSR_S2.

//! @brief Get value of CSU_CSL36_NSR_S2 from a register value.
#define BG_CSU_CSL36_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_NSR_S2) >> BP_CSU_CSL36_NSR_S2)

//! @brief Format value for bitfield CSU_CSL36_NSR_S2.
#define BF_CSU_CSL36_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_NSR_S2) & BM_CSU_CSL36_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL36_NSR_S2(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_NSR_S2) | BF_CSU_CSL36_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL36_SUW_S2      (4)      //!< Bit position for CSU_CSL36_SUW_S2.
#define BM_CSU_CSL36_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL36_SUW_S2.

//! @brief Get value of CSU_CSL36_SUW_S2 from a register value.
#define BG_CSU_CSL36_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_SUW_S2) >> BP_CSU_CSL36_SUW_S2)

//! @brief Format value for bitfield CSU_CSL36_SUW_S2.
#define BF_CSU_CSL36_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_SUW_S2) & BM_CSU_CSL36_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL36_SUW_S2(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_SUW_S2) | BF_CSU_CSL36_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL36_SSW_S2      (5)      //!< Bit position for CSU_CSL36_SSW_S2.
#define BM_CSU_CSL36_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL36_SSW_S2.

//! @brief Get value of CSU_CSL36_SSW_S2 from a register value.
#define BG_CSU_CSL36_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_SSW_S2) >> BP_CSU_CSL36_SSW_S2)

//! @brief Format value for bitfield CSU_CSL36_SSW_S2.
#define BF_CSU_CSL36_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_SSW_S2) & BM_CSU_CSL36_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL36_SSW_S2(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_SSW_S2) | BF_CSU_CSL36_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL36_NUW_S2      (6)      //!< Bit position for CSU_CSL36_NUW_S2.
#define BM_CSU_CSL36_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL36_NUW_S2.

//! @brief Get value of CSU_CSL36_NUW_S2 from a register value.
#define BG_CSU_CSL36_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_NUW_S2) >> BP_CSU_CSL36_NUW_S2)

//! @brief Format value for bitfield CSU_CSL36_NUW_S2.
#define BF_CSU_CSL36_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_NUW_S2) & BM_CSU_CSL36_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL36_NUW_S2(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_NUW_S2) | BF_CSU_CSL36_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL36_NSW_S2      (7)      //!< Bit position for CSU_CSL36_NSW_S2.
#define BM_CSU_CSL36_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL36_NSW_S2.

//! @brief Get value of CSU_CSL36_NSW_S2 from a register value.
#define BG_CSU_CSL36_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_NSW_S2) >> BP_CSU_CSL36_NSW_S2)

//! @brief Format value for bitfield CSU_CSL36_NSW_S2.
#define BF_CSU_CSL36_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_NSW_S2) & BM_CSU_CSL36_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL36_NSW_S2(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_NSW_S2) | BF_CSU_CSL36_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL36_LOCK_S2      (8)      //!< Bit position for CSU_CSL36_LOCK_S2.
#define BM_CSU_CSL36_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL36_LOCK_S2.

//! @brief Get value of CSU_CSL36_LOCK_S2 from a register value.
#define BG_CSU_CSL36_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_LOCK_S2) >> BP_CSU_CSL36_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL36_LOCK_S2.
#define BF_CSU_CSL36_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_LOCK_S2) & BM_CSU_CSL36_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL36_LOCK_S2(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_LOCK_S2) | BF_CSU_CSL36_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL36_SUR_S1      (16)      //!< Bit position for CSU_CSL36_SUR_S1.
#define BM_CSU_CSL36_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL36_SUR_S1.

//! @brief Get value of CSU_CSL36_SUR_S1 from a register value.
#define BG_CSU_CSL36_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_SUR_S1) >> BP_CSU_CSL36_SUR_S1)

//! @brief Format value for bitfield CSU_CSL36_SUR_S1.
#define BF_CSU_CSL36_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_SUR_S1) & BM_CSU_CSL36_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL36_SUR_S1(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_SUR_S1) | BF_CSU_CSL36_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL36_SSR_S1      (17)      //!< Bit position for CSU_CSL36_SSR_S1.
#define BM_CSU_CSL36_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL36_SSR_S1.

//! @brief Get value of CSU_CSL36_SSR_S1 from a register value.
#define BG_CSU_CSL36_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_SSR_S1) >> BP_CSU_CSL36_SSR_S1)

//! @brief Format value for bitfield CSU_CSL36_SSR_S1.
#define BF_CSU_CSL36_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_SSR_S1) & BM_CSU_CSL36_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL36_SSR_S1(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_SSR_S1) | BF_CSU_CSL36_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL36_NUR_S1      (18)      //!< Bit position for CSU_CSL36_NUR_S1.
#define BM_CSU_CSL36_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL36_NUR_S1.

//! @brief Get value of CSU_CSL36_NUR_S1 from a register value.
#define BG_CSU_CSL36_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_NUR_S1) >> BP_CSU_CSL36_NUR_S1)

//! @brief Format value for bitfield CSU_CSL36_NUR_S1.
#define BF_CSU_CSL36_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_NUR_S1) & BM_CSU_CSL36_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL36_NUR_S1(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_NUR_S1) | BF_CSU_CSL36_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL36_NSR_S1      (19)      //!< Bit position for CSU_CSL36_NSR_S1.
#define BM_CSU_CSL36_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL36_NSR_S1.

//! @brief Get value of CSU_CSL36_NSR_S1 from a register value.
#define BG_CSU_CSL36_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_NSR_S1) >> BP_CSU_CSL36_NSR_S1)

//! @brief Format value for bitfield CSU_CSL36_NSR_S1.
#define BF_CSU_CSL36_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_NSR_S1) & BM_CSU_CSL36_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL36_NSR_S1(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_NSR_S1) | BF_CSU_CSL36_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL36_SUW_S1      (20)      //!< Bit position for CSU_CSL36_SUW_S1.
#define BM_CSU_CSL36_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL36_SUW_S1.

//! @brief Get value of CSU_CSL36_SUW_S1 from a register value.
#define BG_CSU_CSL36_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_SUW_S1) >> BP_CSU_CSL36_SUW_S1)

//! @brief Format value for bitfield CSU_CSL36_SUW_S1.
#define BF_CSU_CSL36_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_SUW_S1) & BM_CSU_CSL36_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL36_SUW_S1(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_SUW_S1) | BF_CSU_CSL36_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL36_SSW_S1      (21)      //!< Bit position for CSU_CSL36_SSW_S1.
#define BM_CSU_CSL36_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL36_SSW_S1.

//! @brief Get value of CSU_CSL36_SSW_S1 from a register value.
#define BG_CSU_CSL36_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_SSW_S1) >> BP_CSU_CSL36_SSW_S1)

//! @brief Format value for bitfield CSU_CSL36_SSW_S1.
#define BF_CSU_CSL36_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_SSW_S1) & BM_CSU_CSL36_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL36_SSW_S1(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_SSW_S1) | BF_CSU_CSL36_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL36_NUW_S1      (22)      //!< Bit position for CSU_CSL36_NUW_S1.
#define BM_CSU_CSL36_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL36_NUW_S1.

//! @brief Get value of CSU_CSL36_NUW_S1 from a register value.
#define BG_CSU_CSL36_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_NUW_S1) >> BP_CSU_CSL36_NUW_S1)

//! @brief Format value for bitfield CSU_CSL36_NUW_S1.
#define BF_CSU_CSL36_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_NUW_S1) & BM_CSU_CSL36_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL36_NUW_S1(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_NUW_S1) | BF_CSU_CSL36_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL36_NSW_S1      (23)      //!< Bit position for CSU_CSL36_NSW_S1.
#define BM_CSU_CSL36_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL36_NSW_S1.

//! @brief Get value of CSU_CSL36_NSW_S1 from a register value.
#define BG_CSU_CSL36_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_NSW_S1) >> BP_CSU_CSL36_NSW_S1)

//! @brief Format value for bitfield CSU_CSL36_NSW_S1.
#define BF_CSU_CSL36_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_NSW_S1) & BM_CSU_CSL36_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL36_NSW_S1(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_NSW_S1) | BF_CSU_CSL36_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL36, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL36_LOCK_S1      (24)      //!< Bit position for CSU_CSL36_LOCK_S1.
#define BM_CSU_CSL36_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL36_LOCK_S1.

//! @brief Get value of CSU_CSL36_LOCK_S1 from a register value.
#define BG_CSU_CSL36_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL36_LOCK_S1) >> BP_CSU_CSL36_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL36_LOCK_S1.
#define BF_CSU_CSL36_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL36_LOCK_S1) & BM_CSU_CSL36_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL36_LOCK_S1(v)   (HW_CSU_CSL36_WR((HW_CSU_CSL36_RD() & ~BM_CSU_CSL36_LOCK_S1) | BF_CSU_CSL36_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL37 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL37 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl37
{
    reg32_t U;
    struct _hw_csu_csl37_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl37_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL37 register
 */
//@{
#define HW_CSU_CSL37_ADDR      (REGS_CSU_BASE + 0x94)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL37           (*(volatile hw_csu_csl37_t *) HW_CSU_CSL37_ADDR)
#define HW_CSU_CSL37_RD()      (HW_CSU_CSL37.U)
#define HW_CSU_CSL37_WR(v)     (HW_CSU_CSL37.U = (v))
#define HW_CSU_CSL37_SET(v)    (HW_CSU_CSL37_WR(HW_CSU_CSL37_RD() |  (v)))
#define HW_CSU_CSL37_CLR(v)    (HW_CSU_CSL37_WR(HW_CSU_CSL37_RD() & ~(v)))
#define HW_CSU_CSL37_TOG(v)    (HW_CSU_CSL37_WR(HW_CSU_CSL37_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL37 bitfields
 */

/*! @name Register CSU_CSL37, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL37_SUR_S2      (0)      //!< Bit position for CSU_CSL37_SUR_S2.
#define BM_CSU_CSL37_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL37_SUR_S2.

//! @brief Get value of CSU_CSL37_SUR_S2 from a register value.
#define BG_CSU_CSL37_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_SUR_S2) >> BP_CSU_CSL37_SUR_S2)

//! @brief Format value for bitfield CSU_CSL37_SUR_S2.
#define BF_CSU_CSL37_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_SUR_S2) & BM_CSU_CSL37_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL37_SUR_S2(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_SUR_S2) | BF_CSU_CSL37_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL37_SSR_S2      (1)      //!< Bit position for CSU_CSL37_SSR_S2.
#define BM_CSU_CSL37_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL37_SSR_S2.

//! @brief Get value of CSU_CSL37_SSR_S2 from a register value.
#define BG_CSU_CSL37_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_SSR_S2) >> BP_CSU_CSL37_SSR_S2)

//! @brief Format value for bitfield CSU_CSL37_SSR_S2.
#define BF_CSU_CSL37_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_SSR_S2) & BM_CSU_CSL37_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL37_SSR_S2(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_SSR_S2) | BF_CSU_CSL37_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL37_NUR_S2      (2)      //!< Bit position for CSU_CSL37_NUR_S2.
#define BM_CSU_CSL37_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL37_NUR_S2.

//! @brief Get value of CSU_CSL37_NUR_S2 from a register value.
#define BG_CSU_CSL37_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_NUR_S2) >> BP_CSU_CSL37_NUR_S2)

//! @brief Format value for bitfield CSU_CSL37_NUR_S2.
#define BF_CSU_CSL37_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_NUR_S2) & BM_CSU_CSL37_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL37_NUR_S2(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_NUR_S2) | BF_CSU_CSL37_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL37_NSR_S2      (3)      //!< Bit position for CSU_CSL37_NSR_S2.
#define BM_CSU_CSL37_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL37_NSR_S2.

//! @brief Get value of CSU_CSL37_NSR_S2 from a register value.
#define BG_CSU_CSL37_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_NSR_S2) >> BP_CSU_CSL37_NSR_S2)

//! @brief Format value for bitfield CSU_CSL37_NSR_S2.
#define BF_CSU_CSL37_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_NSR_S2) & BM_CSU_CSL37_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL37_NSR_S2(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_NSR_S2) | BF_CSU_CSL37_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL37_SUW_S2      (4)      //!< Bit position for CSU_CSL37_SUW_S2.
#define BM_CSU_CSL37_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL37_SUW_S2.

//! @brief Get value of CSU_CSL37_SUW_S2 from a register value.
#define BG_CSU_CSL37_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_SUW_S2) >> BP_CSU_CSL37_SUW_S2)

//! @brief Format value for bitfield CSU_CSL37_SUW_S2.
#define BF_CSU_CSL37_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_SUW_S2) & BM_CSU_CSL37_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL37_SUW_S2(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_SUW_S2) | BF_CSU_CSL37_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL37_SSW_S2      (5)      //!< Bit position for CSU_CSL37_SSW_S2.
#define BM_CSU_CSL37_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL37_SSW_S2.

//! @brief Get value of CSU_CSL37_SSW_S2 from a register value.
#define BG_CSU_CSL37_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_SSW_S2) >> BP_CSU_CSL37_SSW_S2)

//! @brief Format value for bitfield CSU_CSL37_SSW_S2.
#define BF_CSU_CSL37_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_SSW_S2) & BM_CSU_CSL37_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL37_SSW_S2(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_SSW_S2) | BF_CSU_CSL37_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL37_NUW_S2      (6)      //!< Bit position for CSU_CSL37_NUW_S2.
#define BM_CSU_CSL37_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL37_NUW_S2.

//! @brief Get value of CSU_CSL37_NUW_S2 from a register value.
#define BG_CSU_CSL37_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_NUW_S2) >> BP_CSU_CSL37_NUW_S2)

//! @brief Format value for bitfield CSU_CSL37_NUW_S2.
#define BF_CSU_CSL37_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_NUW_S2) & BM_CSU_CSL37_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL37_NUW_S2(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_NUW_S2) | BF_CSU_CSL37_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL37_NSW_S2      (7)      //!< Bit position for CSU_CSL37_NSW_S2.
#define BM_CSU_CSL37_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL37_NSW_S2.

//! @brief Get value of CSU_CSL37_NSW_S2 from a register value.
#define BG_CSU_CSL37_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_NSW_S2) >> BP_CSU_CSL37_NSW_S2)

//! @brief Format value for bitfield CSU_CSL37_NSW_S2.
#define BF_CSU_CSL37_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_NSW_S2) & BM_CSU_CSL37_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL37_NSW_S2(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_NSW_S2) | BF_CSU_CSL37_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL37_LOCK_S2      (8)      //!< Bit position for CSU_CSL37_LOCK_S2.
#define BM_CSU_CSL37_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL37_LOCK_S2.

//! @brief Get value of CSU_CSL37_LOCK_S2 from a register value.
#define BG_CSU_CSL37_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_LOCK_S2) >> BP_CSU_CSL37_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL37_LOCK_S2.
#define BF_CSU_CSL37_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_LOCK_S2) & BM_CSU_CSL37_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL37_LOCK_S2(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_LOCK_S2) | BF_CSU_CSL37_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL37_SUR_S1      (16)      //!< Bit position for CSU_CSL37_SUR_S1.
#define BM_CSU_CSL37_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL37_SUR_S1.

//! @brief Get value of CSU_CSL37_SUR_S1 from a register value.
#define BG_CSU_CSL37_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_SUR_S1) >> BP_CSU_CSL37_SUR_S1)

//! @brief Format value for bitfield CSU_CSL37_SUR_S1.
#define BF_CSU_CSL37_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_SUR_S1) & BM_CSU_CSL37_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL37_SUR_S1(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_SUR_S1) | BF_CSU_CSL37_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL37_SSR_S1      (17)      //!< Bit position for CSU_CSL37_SSR_S1.
#define BM_CSU_CSL37_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL37_SSR_S1.

//! @brief Get value of CSU_CSL37_SSR_S1 from a register value.
#define BG_CSU_CSL37_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_SSR_S1) >> BP_CSU_CSL37_SSR_S1)

//! @brief Format value for bitfield CSU_CSL37_SSR_S1.
#define BF_CSU_CSL37_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_SSR_S1) & BM_CSU_CSL37_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL37_SSR_S1(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_SSR_S1) | BF_CSU_CSL37_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL37_NUR_S1      (18)      //!< Bit position for CSU_CSL37_NUR_S1.
#define BM_CSU_CSL37_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL37_NUR_S1.

//! @brief Get value of CSU_CSL37_NUR_S1 from a register value.
#define BG_CSU_CSL37_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_NUR_S1) >> BP_CSU_CSL37_NUR_S1)

//! @brief Format value for bitfield CSU_CSL37_NUR_S1.
#define BF_CSU_CSL37_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_NUR_S1) & BM_CSU_CSL37_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL37_NUR_S1(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_NUR_S1) | BF_CSU_CSL37_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL37_NSR_S1      (19)      //!< Bit position for CSU_CSL37_NSR_S1.
#define BM_CSU_CSL37_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL37_NSR_S1.

//! @brief Get value of CSU_CSL37_NSR_S1 from a register value.
#define BG_CSU_CSL37_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_NSR_S1) >> BP_CSU_CSL37_NSR_S1)

//! @brief Format value for bitfield CSU_CSL37_NSR_S1.
#define BF_CSU_CSL37_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_NSR_S1) & BM_CSU_CSL37_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL37_NSR_S1(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_NSR_S1) | BF_CSU_CSL37_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL37_SUW_S1      (20)      //!< Bit position for CSU_CSL37_SUW_S1.
#define BM_CSU_CSL37_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL37_SUW_S1.

//! @brief Get value of CSU_CSL37_SUW_S1 from a register value.
#define BG_CSU_CSL37_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_SUW_S1) >> BP_CSU_CSL37_SUW_S1)

//! @brief Format value for bitfield CSU_CSL37_SUW_S1.
#define BF_CSU_CSL37_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_SUW_S1) & BM_CSU_CSL37_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL37_SUW_S1(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_SUW_S1) | BF_CSU_CSL37_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL37_SSW_S1      (21)      //!< Bit position for CSU_CSL37_SSW_S1.
#define BM_CSU_CSL37_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL37_SSW_S1.

//! @brief Get value of CSU_CSL37_SSW_S1 from a register value.
#define BG_CSU_CSL37_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_SSW_S1) >> BP_CSU_CSL37_SSW_S1)

//! @brief Format value for bitfield CSU_CSL37_SSW_S1.
#define BF_CSU_CSL37_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_SSW_S1) & BM_CSU_CSL37_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL37_SSW_S1(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_SSW_S1) | BF_CSU_CSL37_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL37_NUW_S1      (22)      //!< Bit position for CSU_CSL37_NUW_S1.
#define BM_CSU_CSL37_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL37_NUW_S1.

//! @brief Get value of CSU_CSL37_NUW_S1 from a register value.
#define BG_CSU_CSL37_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_NUW_S1) >> BP_CSU_CSL37_NUW_S1)

//! @brief Format value for bitfield CSU_CSL37_NUW_S1.
#define BF_CSU_CSL37_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_NUW_S1) & BM_CSU_CSL37_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL37_NUW_S1(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_NUW_S1) | BF_CSU_CSL37_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL37_NSW_S1      (23)      //!< Bit position for CSU_CSL37_NSW_S1.
#define BM_CSU_CSL37_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL37_NSW_S1.

//! @brief Get value of CSU_CSL37_NSW_S1 from a register value.
#define BG_CSU_CSL37_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_NSW_S1) >> BP_CSU_CSL37_NSW_S1)

//! @brief Format value for bitfield CSU_CSL37_NSW_S1.
#define BF_CSU_CSL37_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_NSW_S1) & BM_CSU_CSL37_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL37_NSW_S1(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_NSW_S1) | BF_CSU_CSL37_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL37, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL37_LOCK_S1      (24)      //!< Bit position for CSU_CSL37_LOCK_S1.
#define BM_CSU_CSL37_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL37_LOCK_S1.

//! @brief Get value of CSU_CSL37_LOCK_S1 from a register value.
#define BG_CSU_CSL37_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL37_LOCK_S1) >> BP_CSU_CSL37_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL37_LOCK_S1.
#define BF_CSU_CSL37_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL37_LOCK_S1) & BM_CSU_CSL37_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL37_LOCK_S1(v)   (HW_CSU_CSL37_WR((HW_CSU_CSL37_RD() & ~BM_CSU_CSL37_LOCK_S1) | BF_CSU_CSL37_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL38 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL38 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl38
{
    reg32_t U;
    struct _hw_csu_csl38_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl38_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL38 register
 */
//@{
#define HW_CSU_CSL38_ADDR      (REGS_CSU_BASE + 0x98)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL38           (*(volatile hw_csu_csl38_t *) HW_CSU_CSL38_ADDR)
#define HW_CSU_CSL38_RD()      (HW_CSU_CSL38.U)
#define HW_CSU_CSL38_WR(v)     (HW_CSU_CSL38.U = (v))
#define HW_CSU_CSL38_SET(v)    (HW_CSU_CSL38_WR(HW_CSU_CSL38_RD() |  (v)))
#define HW_CSU_CSL38_CLR(v)    (HW_CSU_CSL38_WR(HW_CSU_CSL38_RD() & ~(v)))
#define HW_CSU_CSL38_TOG(v)    (HW_CSU_CSL38_WR(HW_CSU_CSL38_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL38 bitfields
 */

/*! @name Register CSU_CSL38, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL38_SUR_S2      (0)      //!< Bit position for CSU_CSL38_SUR_S2.
#define BM_CSU_CSL38_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL38_SUR_S2.

//! @brief Get value of CSU_CSL38_SUR_S2 from a register value.
#define BG_CSU_CSL38_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_SUR_S2) >> BP_CSU_CSL38_SUR_S2)

//! @brief Format value for bitfield CSU_CSL38_SUR_S2.
#define BF_CSU_CSL38_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_SUR_S2) & BM_CSU_CSL38_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL38_SUR_S2(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_SUR_S2) | BF_CSU_CSL38_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL38_SSR_S2      (1)      //!< Bit position for CSU_CSL38_SSR_S2.
#define BM_CSU_CSL38_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL38_SSR_S2.

//! @brief Get value of CSU_CSL38_SSR_S2 from a register value.
#define BG_CSU_CSL38_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_SSR_S2) >> BP_CSU_CSL38_SSR_S2)

//! @brief Format value for bitfield CSU_CSL38_SSR_S2.
#define BF_CSU_CSL38_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_SSR_S2) & BM_CSU_CSL38_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL38_SSR_S2(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_SSR_S2) | BF_CSU_CSL38_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL38_NUR_S2      (2)      //!< Bit position for CSU_CSL38_NUR_S2.
#define BM_CSU_CSL38_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL38_NUR_S2.

//! @brief Get value of CSU_CSL38_NUR_S2 from a register value.
#define BG_CSU_CSL38_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_NUR_S2) >> BP_CSU_CSL38_NUR_S2)

//! @brief Format value for bitfield CSU_CSL38_NUR_S2.
#define BF_CSU_CSL38_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_NUR_S2) & BM_CSU_CSL38_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL38_NUR_S2(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_NUR_S2) | BF_CSU_CSL38_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL38_NSR_S2      (3)      //!< Bit position for CSU_CSL38_NSR_S2.
#define BM_CSU_CSL38_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL38_NSR_S2.

//! @brief Get value of CSU_CSL38_NSR_S2 from a register value.
#define BG_CSU_CSL38_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_NSR_S2) >> BP_CSU_CSL38_NSR_S2)

//! @brief Format value for bitfield CSU_CSL38_NSR_S2.
#define BF_CSU_CSL38_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_NSR_S2) & BM_CSU_CSL38_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL38_NSR_S2(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_NSR_S2) | BF_CSU_CSL38_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL38_SUW_S2      (4)      //!< Bit position for CSU_CSL38_SUW_S2.
#define BM_CSU_CSL38_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL38_SUW_S2.

//! @brief Get value of CSU_CSL38_SUW_S2 from a register value.
#define BG_CSU_CSL38_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_SUW_S2) >> BP_CSU_CSL38_SUW_S2)

//! @brief Format value for bitfield CSU_CSL38_SUW_S2.
#define BF_CSU_CSL38_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_SUW_S2) & BM_CSU_CSL38_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL38_SUW_S2(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_SUW_S2) | BF_CSU_CSL38_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL38_SSW_S2      (5)      //!< Bit position for CSU_CSL38_SSW_S2.
#define BM_CSU_CSL38_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL38_SSW_S2.

//! @brief Get value of CSU_CSL38_SSW_S2 from a register value.
#define BG_CSU_CSL38_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_SSW_S2) >> BP_CSU_CSL38_SSW_S2)

//! @brief Format value for bitfield CSU_CSL38_SSW_S2.
#define BF_CSU_CSL38_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_SSW_S2) & BM_CSU_CSL38_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL38_SSW_S2(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_SSW_S2) | BF_CSU_CSL38_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL38_NUW_S2      (6)      //!< Bit position for CSU_CSL38_NUW_S2.
#define BM_CSU_CSL38_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL38_NUW_S2.

//! @brief Get value of CSU_CSL38_NUW_S2 from a register value.
#define BG_CSU_CSL38_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_NUW_S2) >> BP_CSU_CSL38_NUW_S2)

//! @brief Format value for bitfield CSU_CSL38_NUW_S2.
#define BF_CSU_CSL38_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_NUW_S2) & BM_CSU_CSL38_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL38_NUW_S2(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_NUW_S2) | BF_CSU_CSL38_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL38_NSW_S2      (7)      //!< Bit position for CSU_CSL38_NSW_S2.
#define BM_CSU_CSL38_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL38_NSW_S2.

//! @brief Get value of CSU_CSL38_NSW_S2 from a register value.
#define BG_CSU_CSL38_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_NSW_S2) >> BP_CSU_CSL38_NSW_S2)

//! @brief Format value for bitfield CSU_CSL38_NSW_S2.
#define BF_CSU_CSL38_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_NSW_S2) & BM_CSU_CSL38_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL38_NSW_S2(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_NSW_S2) | BF_CSU_CSL38_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL38_LOCK_S2      (8)      //!< Bit position for CSU_CSL38_LOCK_S2.
#define BM_CSU_CSL38_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL38_LOCK_S2.

//! @brief Get value of CSU_CSL38_LOCK_S2 from a register value.
#define BG_CSU_CSL38_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_LOCK_S2) >> BP_CSU_CSL38_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL38_LOCK_S2.
#define BF_CSU_CSL38_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_LOCK_S2) & BM_CSU_CSL38_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL38_LOCK_S2(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_LOCK_S2) | BF_CSU_CSL38_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL38_SUR_S1      (16)      //!< Bit position for CSU_CSL38_SUR_S1.
#define BM_CSU_CSL38_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL38_SUR_S1.

//! @brief Get value of CSU_CSL38_SUR_S1 from a register value.
#define BG_CSU_CSL38_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_SUR_S1) >> BP_CSU_CSL38_SUR_S1)

//! @brief Format value for bitfield CSU_CSL38_SUR_S1.
#define BF_CSU_CSL38_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_SUR_S1) & BM_CSU_CSL38_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL38_SUR_S1(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_SUR_S1) | BF_CSU_CSL38_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL38_SSR_S1      (17)      //!< Bit position for CSU_CSL38_SSR_S1.
#define BM_CSU_CSL38_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL38_SSR_S1.

//! @brief Get value of CSU_CSL38_SSR_S1 from a register value.
#define BG_CSU_CSL38_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_SSR_S1) >> BP_CSU_CSL38_SSR_S1)

//! @brief Format value for bitfield CSU_CSL38_SSR_S1.
#define BF_CSU_CSL38_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_SSR_S1) & BM_CSU_CSL38_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL38_SSR_S1(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_SSR_S1) | BF_CSU_CSL38_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL38_NUR_S1      (18)      //!< Bit position for CSU_CSL38_NUR_S1.
#define BM_CSU_CSL38_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL38_NUR_S1.

//! @brief Get value of CSU_CSL38_NUR_S1 from a register value.
#define BG_CSU_CSL38_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_NUR_S1) >> BP_CSU_CSL38_NUR_S1)

//! @brief Format value for bitfield CSU_CSL38_NUR_S1.
#define BF_CSU_CSL38_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_NUR_S1) & BM_CSU_CSL38_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL38_NUR_S1(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_NUR_S1) | BF_CSU_CSL38_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL38_NSR_S1      (19)      //!< Bit position for CSU_CSL38_NSR_S1.
#define BM_CSU_CSL38_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL38_NSR_S1.

//! @brief Get value of CSU_CSL38_NSR_S1 from a register value.
#define BG_CSU_CSL38_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_NSR_S1) >> BP_CSU_CSL38_NSR_S1)

//! @brief Format value for bitfield CSU_CSL38_NSR_S1.
#define BF_CSU_CSL38_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_NSR_S1) & BM_CSU_CSL38_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL38_NSR_S1(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_NSR_S1) | BF_CSU_CSL38_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL38_SUW_S1      (20)      //!< Bit position for CSU_CSL38_SUW_S1.
#define BM_CSU_CSL38_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL38_SUW_S1.

//! @brief Get value of CSU_CSL38_SUW_S1 from a register value.
#define BG_CSU_CSL38_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_SUW_S1) >> BP_CSU_CSL38_SUW_S1)

//! @brief Format value for bitfield CSU_CSL38_SUW_S1.
#define BF_CSU_CSL38_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_SUW_S1) & BM_CSU_CSL38_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL38_SUW_S1(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_SUW_S1) | BF_CSU_CSL38_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL38_SSW_S1      (21)      //!< Bit position for CSU_CSL38_SSW_S1.
#define BM_CSU_CSL38_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL38_SSW_S1.

//! @brief Get value of CSU_CSL38_SSW_S1 from a register value.
#define BG_CSU_CSL38_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_SSW_S1) >> BP_CSU_CSL38_SSW_S1)

//! @brief Format value for bitfield CSU_CSL38_SSW_S1.
#define BF_CSU_CSL38_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_SSW_S1) & BM_CSU_CSL38_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL38_SSW_S1(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_SSW_S1) | BF_CSU_CSL38_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL38_NUW_S1      (22)      //!< Bit position for CSU_CSL38_NUW_S1.
#define BM_CSU_CSL38_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL38_NUW_S1.

//! @brief Get value of CSU_CSL38_NUW_S1 from a register value.
#define BG_CSU_CSL38_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_NUW_S1) >> BP_CSU_CSL38_NUW_S1)

//! @brief Format value for bitfield CSU_CSL38_NUW_S1.
#define BF_CSU_CSL38_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_NUW_S1) & BM_CSU_CSL38_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL38_NUW_S1(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_NUW_S1) | BF_CSU_CSL38_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL38_NSW_S1      (23)      //!< Bit position for CSU_CSL38_NSW_S1.
#define BM_CSU_CSL38_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL38_NSW_S1.

//! @brief Get value of CSU_CSL38_NSW_S1 from a register value.
#define BG_CSU_CSL38_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_NSW_S1) >> BP_CSU_CSL38_NSW_S1)

//! @brief Format value for bitfield CSU_CSL38_NSW_S1.
#define BF_CSU_CSL38_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_NSW_S1) & BM_CSU_CSL38_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL38_NSW_S1(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_NSW_S1) | BF_CSU_CSL38_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL38, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL38_LOCK_S1      (24)      //!< Bit position for CSU_CSL38_LOCK_S1.
#define BM_CSU_CSL38_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL38_LOCK_S1.

//! @brief Get value of CSU_CSL38_LOCK_S1 from a register value.
#define BG_CSU_CSL38_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL38_LOCK_S1) >> BP_CSU_CSL38_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL38_LOCK_S1.
#define BF_CSU_CSL38_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL38_LOCK_S1) & BM_CSU_CSL38_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL38_LOCK_S1(v)   (HW_CSU_CSL38_WR((HW_CSU_CSL38_RD() & ~BM_CSU_CSL38_LOCK_S1) | BF_CSU_CSL38_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_CSL39 - Config security level register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_CSL39 - Config security level register (RW)
 *
 * Reset value: 0x00330033
 *
 * There are 40 Config Security Level (CSU_CSL0-CSU_CSL39) registers. Each CSU_CSL is comprised of
 * two fields, each field used to determine the read and write access permissions for a slave
 * peripheral. These 8-bit fields for the first and second slaves are in the locations b23-b16 and
 * bits b7-b0, respectively. Permission Access Table shows security levels and csu_sec_level signal
 * levels corresponding to different values of the 8-bit CSU_CSL field for a given slave. Most
 * slaves have unique CSL registers. Some slaves are grouped together. The following table shows
 * allocation of CSL register per slave or group of slave modules. CSL Slave Modules Mapping
 * Corresponding CSL register and bit field Slave Module Comments CSL0 [7:0] PWM1 PWM2 PWM3 PWM4
 * CSL0 [23:16] DBGMON CSL1 [7:0] QOS CSL1 [23:16] GPT EPIT1 EPIT2 CSL2 [7:0] GPIO1 GPIO2 CSL2
 * [23:16] GPIO3 GPIO4 CSL3 [7:0] GPIO5 CSL3 [23:16] ---- CSL4 [7:0] KPP CSL4 [23:16] WDOG1 CSL5
 * [7:0] WDOG2 CSL5 [23:16] CCM SNVS_HP SRC GPC CSL6 [7:0] ANATOP CSL6 [23:16] IOMUXC CSL7 [7:0] CSI
 * TCON CSL7 [23:16] SDMA CSL8 [7:0] USB CSL8 [23:16] FEC CSL9 [7:0] MSHC CSL9 [23:16] USDHC1 CSL10
 * [7:0] USDHC2 CSL10 [23:16] USDHC3 CSL11 [7:0] USDHC4 CSL11 [23:16] I2C1 CSL12 [7:0] I2C2 CSL12
 * [23:16] I2C3 CSL13 [7:0] ROMCP CSL13 [23:16] DCP MMDC CSL14 [7:0] WEIM CSL14 [23:16] OCOTP_CTRL
 * CSL15 [7:0] ---- CSL15 [23:16] PERFMON1 PERFMON2 CSL16 [7:0] TZASC1 CSL16 [23:16] RNGB CSL17
 * [7:0] AUDMUX CSL17 [23:16] ---- CSL18 [7:0] SPDIF CSL18 [23:16] eCSPI1 CSL19 [7:0] eCSPI2 CSL19
 * [23:16] eCSPI3 CSL20 [7:0] eCSPI4 CSL20 [23:16] UART5 CSL21 [7:0] UART1 CSL21 [23:16] UART2 CSL22
 * [7:0] SSI1 CSL22 [23:16] SSI2 CSL23 [7:0] SSI3 CSL23 [23:16] UART3 CSL24 [7:0] ---- CSL24 [23:16]
 * ROMCP CSL25 [7:0] ---- CSL25 [23:16] ---- CSL26 [7:0] OCRAM CSL26 [23:16] ---- CSL27 [7:0] ----
 * CSL27 [23:16] ---- CSL28 [7:0] ---- CSL28 [23:16] PXP CSL29 [7:0] OPENVG CSL29 [23:16] ARM CSL30
 * [7:0] EPDC CSL30 [23:16] ---- CSL31 [7:0] LCDIF CSL31 [23:16] WEIM CSL32 [7:0] ---- CSL32 [23:16]
 * GPU2D CSL33 [7:0] ---- CSL33 [23:16] ---- CSL34 [7:0] ---- CSL34 [23:16] ---- CSL35 [7:0] ----
 * CSL35 [23:16] ---- CSL36 [7:0] ---- CSL36 [23:16] ---- CSL37 [7:0] ---- CSL37 [23:16] ---- CSL38
 * [7:0] ---- CSL38 [23:16] UART4 CSL39 [7:0] SPBA CSL39 [23:16] ---- Do not modify the following
 * peripherals' CSL register bits while they are being accessed through the AHB/AXI slave bus: EIM,.
 */
typedef union _hw_csu_csl39
{
    reg32_t U;
    struct _hw_csu_csl39_bitfields
    {
        unsigned SUR_S2 : 1; //!< [0] Secure user read access control for the second slave
        unsigned SSR_S2 : 1; //!< [1] Secure supervisor read access control for the second slave
        unsigned NUR_S2 : 1; //!< [2] Non-secure user read access control for the second slave
        unsigned NSR_S2 : 1; //!< [3] Non-secure supervisor read access control for the second slave
        unsigned SUW_S2 : 1; //!< [4] Secure user write access control for the second slave
        unsigned SSW_S2 : 1; //!< [5] Secure supervisor write access control for the second slave
        unsigned NUW_S2 : 1; //!< [6] Non-secure user write access control for the second slave
        unsigned NSW_S2 : 1; //!< [7] Non-secure supervisor write access control for the second slave
        unsigned LOCK_S2 : 1; //!< [8] Lock bit corresponding to the second slave.
        unsigned RESERVED0 : 7; //!< [15:9] Reserved
        unsigned SUR_S1 : 1; //!< [16] Secure user read access control for the first slave
        unsigned SSR_S1 : 1; //!< [17] Secure supervisor read access control for the first slave
        unsigned NUR_S1 : 1; //!< [18] Non-secure user read access control for the first slave
        unsigned NSR_S1 : 1; //!< [19] Non-secure supervisor read access control for the first slave
        unsigned SUW_S1 : 1; //!< [20] Secure user write access control for the first slave
        unsigned SSW_S1 : 1; //!< [21] Secure supervisor write access control for the first slave
        unsigned NUW_S1 : 1; //!< [22] Non-secure user write access control for the first slave
        unsigned NSW_S1 : 1; //!< [23] Non-secure supervisor write access control for the first slave
        unsigned LOCK_S1 : 1; //!< [24] Lock bit corresponding to the first slave.
        unsigned RESERVED1 : 7; //!< [31:25] Reserved
    } B;
} hw_csu_csl39_t;
#endif

/*!
 * @name Constants and macros for entire CSU_CSL39 register
 */
//@{
#define HW_CSU_CSL39_ADDR      (REGS_CSU_BASE + 0x9c)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_CSL39           (*(volatile hw_csu_csl39_t *) HW_CSU_CSL39_ADDR)
#define HW_CSU_CSL39_RD()      (HW_CSU_CSL39.U)
#define HW_CSU_CSL39_WR(v)     (HW_CSU_CSL39.U = (v))
#define HW_CSU_CSL39_SET(v)    (HW_CSU_CSL39_WR(HW_CSU_CSL39_RD() |  (v)))
#define HW_CSU_CSL39_CLR(v)    (HW_CSU_CSL39_WR(HW_CSU_CSL39_RD() & ~(v)))
#define HW_CSU_CSL39_TOG(v)    (HW_CSU_CSL39_WR(HW_CSU_CSL39_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_CSL39 bitfields
 */

/*! @name Register CSU_CSL39, field SUR_S2[0] (RW)
 *
 * Secure user read access control for the second slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the second slave.
 * - 1 - Secure user read access enabled for the second slave
 */
//@{

#define BP_CSU_CSL39_SUR_S2      (0)      //!< Bit position for CSU_CSL39_SUR_S2.
#define BM_CSU_CSL39_SUR_S2      (0x00000001)  //!< Bit mask for CSU_CSL39_SUR_S2.

//! @brief Get value of CSU_CSL39_SUR_S2 from a register value.
#define BG_CSU_CSL39_SUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_SUR_S2) >> BP_CSU_CSL39_SUR_S2)

//! @brief Format value for bitfield CSU_CSL39_SUR_S2.
#define BF_CSU_CSL39_SUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_SUR_S2) & BM_CSU_CSL39_SUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S2 field to a new value.
#define BW_CSU_CSL39_SUR_S2(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_SUR_S2) | BF_CSU_CSL39_SUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field SSR_S2[1] (RW)
 *
 * Secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the second slave.
 * - 1 - Secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL39_SSR_S2      (1)      //!< Bit position for CSU_CSL39_SSR_S2.
#define BM_CSU_CSL39_SSR_S2      (0x00000002)  //!< Bit mask for CSU_CSL39_SSR_S2.

//! @brief Get value of CSU_CSL39_SSR_S2 from a register value.
#define BG_CSU_CSL39_SSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_SSR_S2) >> BP_CSU_CSL39_SSR_S2)

//! @brief Format value for bitfield CSU_CSL39_SSR_S2.
#define BF_CSU_CSL39_SSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_SSR_S2) & BM_CSU_CSL39_SSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S2 field to a new value.
#define BW_CSU_CSL39_SSR_S2(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_SSR_S2) | BF_CSU_CSL39_SSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field NUR_S2[2] (RW)
 *
 * Non-secure user read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the second slave.
 * - 1 - Non-secure user read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL39_NUR_S2      (2)      //!< Bit position for CSU_CSL39_NUR_S2.
#define BM_CSU_CSL39_NUR_S2      (0x00000004)  //!< Bit mask for CSU_CSL39_NUR_S2.

//! @brief Get value of CSU_CSL39_NUR_S2 from a register value.
#define BG_CSU_CSL39_NUR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_NUR_S2) >> BP_CSU_CSL39_NUR_S2)

//! @brief Format value for bitfield CSU_CSL39_NUR_S2.
#define BF_CSU_CSL39_NUR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_NUR_S2) & BM_CSU_CSL39_NUR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S2 field to a new value.
#define BW_CSU_CSL39_NUR_S2(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_NUR_S2) | BF_CSU_CSL39_NUR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field NSR_S2[3] (RW)
 *
 * Non-secure supervisor read access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the second slave.
 * - 1 - Non-secure supervisor read access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL39_NSR_S2      (3)      //!< Bit position for CSU_CSL39_NSR_S2.
#define BM_CSU_CSL39_NSR_S2      (0x00000008)  //!< Bit mask for CSU_CSL39_NSR_S2.

//! @brief Get value of CSU_CSL39_NSR_S2 from a register value.
#define BG_CSU_CSL39_NSR_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_NSR_S2) >> BP_CSU_CSL39_NSR_S2)

//! @brief Format value for bitfield CSU_CSL39_NSR_S2.
#define BF_CSU_CSL39_NSR_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_NSR_S2) & BM_CSU_CSL39_NSR_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S2 field to a new value.
#define BW_CSU_CSL39_NSR_S2(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_NSR_S2) | BF_CSU_CSL39_NSR_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field SUW_S2[4] (RW)
 *
 * Secure user write access control for the second slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the second slave.
 * - 1 - Secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL39_SUW_S2      (4)      //!< Bit position for CSU_CSL39_SUW_S2.
#define BM_CSU_CSL39_SUW_S2      (0x00000010)  //!< Bit mask for CSU_CSL39_SUW_S2.

//! @brief Get value of CSU_CSL39_SUW_S2 from a register value.
#define BG_CSU_CSL39_SUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_SUW_S2) >> BP_CSU_CSL39_SUW_S2)

//! @brief Format value for bitfield CSU_CSL39_SUW_S2.
#define BF_CSU_CSL39_SUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_SUW_S2) & BM_CSU_CSL39_SUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S2 field to a new value.
#define BW_CSU_CSL39_SUW_S2(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_SUW_S2) | BF_CSU_CSL39_SUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field SSW_S2[5] (RW)
 *
 * Secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the second slave.
 * - 1 - Secure supervisor write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL39_SSW_S2      (5)      //!< Bit position for CSU_CSL39_SSW_S2.
#define BM_CSU_CSL39_SSW_S2      (0x00000020)  //!< Bit mask for CSU_CSL39_SSW_S2.

//! @brief Get value of CSU_CSL39_SSW_S2 from a register value.
#define BG_CSU_CSL39_SSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_SSW_S2) >> BP_CSU_CSL39_SSW_S2)

//! @brief Format value for bitfield CSU_CSL39_SSW_S2.
#define BF_CSU_CSL39_SSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_SSW_S2) & BM_CSU_CSL39_SSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S2 field to a new value.
#define BW_CSU_CSL39_SSW_S2(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_SSW_S2) | BF_CSU_CSL39_SSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field NUW_S2[6] (RW)
 *
 * Non-secure user write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the second slave.
 * - 1 - Non-secure user write access enabled for the second slave.
 */
//@{

#define BP_CSU_CSL39_NUW_S2      (6)      //!< Bit position for CSU_CSL39_NUW_S2.
#define BM_CSU_CSL39_NUW_S2      (0x00000040)  //!< Bit mask for CSU_CSL39_NUW_S2.

//! @brief Get value of CSU_CSL39_NUW_S2 from a register value.
#define BG_CSU_CSL39_NUW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_NUW_S2) >> BP_CSU_CSL39_NUW_S2)

//! @brief Format value for bitfield CSU_CSL39_NUW_S2.
#define BF_CSU_CSL39_NUW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_NUW_S2) & BM_CSU_CSL39_NUW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S2 field to a new value.
#define BW_CSU_CSL39_NUW_S2(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_NUW_S2) | BF_CSU_CSL39_NUW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field NSW_S2[7] (RW)
 *
 * Non-secure supervisor write access control for the second slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the second slave.
 * - 1 - Non-secure supervisor write access enabled for the second slave
 */
//@{

#define BP_CSU_CSL39_NSW_S2      (7)      //!< Bit position for CSU_CSL39_NSW_S2.
#define BM_CSU_CSL39_NSW_S2      (0x00000080)  //!< Bit mask for CSU_CSL39_NSW_S2.

//! @brief Get value of CSU_CSL39_NSW_S2 from a register value.
#define BG_CSU_CSL39_NSW_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_NSW_S2) >> BP_CSU_CSL39_NSW_S2)

//! @brief Format value for bitfield CSU_CSL39_NSW_S2.
#define BF_CSU_CSL39_NSW_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_NSW_S2) & BM_CSU_CSL39_NSW_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S2 field to a new value.
#define BW_CSU_CSL39_NSW_S2(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_NSW_S2) | BF_CSU_CSL39_NSW_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field LOCK_S2[8] (RW)
 *
 * Lock bit corresponding to the second slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 7-0 may be written by software
 * - 1 - Bits 7-0 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL39_LOCK_S2      (8)      //!< Bit position for CSU_CSL39_LOCK_S2.
#define BM_CSU_CSL39_LOCK_S2      (0x00000100)  //!< Bit mask for CSU_CSL39_LOCK_S2.

//! @brief Get value of CSU_CSL39_LOCK_S2 from a register value.
#define BG_CSU_CSL39_LOCK_S2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_LOCK_S2) >> BP_CSU_CSL39_LOCK_S2)

//! @brief Format value for bitfield CSU_CSL39_LOCK_S2.
#define BF_CSU_CSL39_LOCK_S2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_LOCK_S2) & BM_CSU_CSL39_LOCK_S2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S2 field to a new value.
#define BW_CSU_CSL39_LOCK_S2(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_LOCK_S2) | BF_CSU_CSL39_LOCK_S2(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field SUR_S1[16] (RW)
 *
 * Secure user read access control for the first slave
 *
 * Values:
 * - 0 - Secure user read access disabled for the first slave.
 * - 1 - Secure user read access enabled for the first slave
 */
//@{

#define BP_CSU_CSL39_SUR_S1      (16)      //!< Bit position for CSU_CSL39_SUR_S1.
#define BM_CSU_CSL39_SUR_S1      (0x00010000)  //!< Bit mask for CSU_CSL39_SUR_S1.

//! @brief Get value of CSU_CSL39_SUR_S1 from a register value.
#define BG_CSU_CSL39_SUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_SUR_S1) >> BP_CSU_CSL39_SUR_S1)

//! @brief Format value for bitfield CSU_CSL39_SUR_S1.
#define BF_CSU_CSL39_SUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_SUR_S1) & BM_CSU_CSL39_SUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUR_S1 field to a new value.
#define BW_CSU_CSL39_SUR_S1(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_SUR_S1) | BF_CSU_CSL39_SUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field SSR_S1[17] (RW)
 *
 * Secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor read access disabled for the first slave.
 * - 1 - Secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL39_SSR_S1      (17)      //!< Bit position for CSU_CSL39_SSR_S1.
#define BM_CSU_CSL39_SSR_S1      (0x00020000)  //!< Bit mask for CSU_CSL39_SSR_S1.

//! @brief Get value of CSU_CSL39_SSR_S1 from a register value.
#define BG_CSU_CSL39_SSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_SSR_S1) >> BP_CSU_CSL39_SSR_S1)

//! @brief Format value for bitfield CSU_CSL39_SSR_S1.
#define BF_CSU_CSL39_SSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_SSR_S1) & BM_CSU_CSL39_SSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSR_S1 field to a new value.
#define BW_CSU_CSL39_SSR_S1(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_SSR_S1) | BF_CSU_CSL39_SSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field NUR_S1[18] (RW)
 *
 * Non-secure user read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user read access disabled for the first slave.
 * - 1 - Non-secure user read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL39_NUR_S1      (18)      //!< Bit position for CSU_CSL39_NUR_S1.
#define BM_CSU_CSL39_NUR_S1      (0x00040000)  //!< Bit mask for CSU_CSL39_NUR_S1.

//! @brief Get value of CSU_CSL39_NUR_S1 from a register value.
#define BG_CSU_CSL39_NUR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_NUR_S1) >> BP_CSU_CSL39_NUR_S1)

//! @brief Format value for bitfield CSU_CSL39_NUR_S1.
#define BF_CSU_CSL39_NUR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_NUR_S1) & BM_CSU_CSL39_NUR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUR_S1 field to a new value.
#define BW_CSU_CSL39_NUR_S1(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_NUR_S1) | BF_CSU_CSL39_NUR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field NSR_S1[19] (RW)
 *
 * Non-secure supervisor read access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor read access disabled for the first slave.
 * - 1 - Non-secure supervisor read access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL39_NSR_S1      (19)      //!< Bit position for CSU_CSL39_NSR_S1.
#define BM_CSU_CSL39_NSR_S1      (0x00080000)  //!< Bit mask for CSU_CSL39_NSR_S1.

//! @brief Get value of CSU_CSL39_NSR_S1 from a register value.
#define BG_CSU_CSL39_NSR_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_NSR_S1) >> BP_CSU_CSL39_NSR_S1)

//! @brief Format value for bitfield CSU_CSL39_NSR_S1.
#define BF_CSU_CSL39_NSR_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_NSR_S1) & BM_CSU_CSL39_NSR_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSR_S1 field to a new value.
#define BW_CSU_CSL39_NSR_S1(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_NSR_S1) | BF_CSU_CSL39_NSR_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field SUW_S1[20] (RW)
 *
 * Secure user write access control for the first slave
 *
 * Values:
 * - 0 - Secure user write access disabled for the first slave.
 * - 1 - Secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL39_SUW_S1      (20)      //!< Bit position for CSU_CSL39_SUW_S1.
#define BM_CSU_CSL39_SUW_S1      (0x00100000)  //!< Bit mask for CSU_CSL39_SUW_S1.

//! @brief Get value of CSU_CSL39_SUW_S1 from a register value.
#define BG_CSU_CSL39_SUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_SUW_S1) >> BP_CSU_CSL39_SUW_S1)

//! @brief Format value for bitfield CSU_CSL39_SUW_S1.
#define BF_CSU_CSL39_SUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_SUW_S1) & BM_CSU_CSL39_SUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SUW_S1 field to a new value.
#define BW_CSU_CSL39_SUW_S1(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_SUW_S1) | BF_CSU_CSL39_SUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field SSW_S1[21] (RW)
 *
 * Secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Secure supervisor write access disabled for the first slave.
 * - 1 - Secure supervisor write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL39_SSW_S1      (21)      //!< Bit position for CSU_CSL39_SSW_S1.
#define BM_CSU_CSL39_SSW_S1      (0x00200000)  //!< Bit mask for CSU_CSL39_SSW_S1.

//! @brief Get value of CSU_CSL39_SSW_S1 from a register value.
#define BG_CSU_CSL39_SSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_SSW_S1) >> BP_CSU_CSL39_SSW_S1)

//! @brief Format value for bitfield CSU_CSL39_SSW_S1.
#define BF_CSU_CSL39_SSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_SSW_S1) & BM_CSU_CSL39_SSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the SSW_S1 field to a new value.
#define BW_CSU_CSL39_SSW_S1(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_SSW_S1) | BF_CSU_CSL39_SSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field NUW_S1[22] (RW)
 *
 * Non-secure user write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure user write access disabled for the first slave.
 * - 1 - Non-secure user write access enabled for the first slave.
 */
//@{

#define BP_CSU_CSL39_NUW_S1      (22)      //!< Bit position for CSU_CSL39_NUW_S1.
#define BM_CSU_CSL39_NUW_S1      (0x00400000)  //!< Bit mask for CSU_CSL39_NUW_S1.

//! @brief Get value of CSU_CSL39_NUW_S1 from a register value.
#define BG_CSU_CSL39_NUW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_NUW_S1) >> BP_CSU_CSL39_NUW_S1)

//! @brief Format value for bitfield CSU_CSL39_NUW_S1.
#define BF_CSU_CSL39_NUW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_NUW_S1) & BM_CSU_CSL39_NUW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NUW_S1 field to a new value.
#define BW_CSU_CSL39_NUW_S1(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_NUW_S1) | BF_CSU_CSL39_NUW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field NSW_S1[23] (RW)
 *
 * Non-secure supervisor write access control for the first slave
 *
 * Values:
 * - 0 - Non-secure supervisor write access disabled for the first slave.
 * - 1 - Non-secure supervisor write access enabled for the first slave
 */
//@{

#define BP_CSU_CSL39_NSW_S1      (23)      //!< Bit position for CSU_CSL39_NSW_S1.
#define BM_CSU_CSL39_NSW_S1      (0x00800000)  //!< Bit mask for CSU_CSL39_NSW_S1.

//! @brief Get value of CSU_CSL39_NSW_S1 from a register value.
#define BG_CSU_CSL39_NSW_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_NSW_S1) >> BP_CSU_CSL39_NSW_S1)

//! @brief Format value for bitfield CSU_CSL39_NSW_S1.
#define BF_CSU_CSL39_NSW_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_NSW_S1) & BM_CSU_CSL39_NSW_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSW_S1 field to a new value.
#define BW_CSU_CSL39_NSW_S1(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_NSW_S1) | BF_CSU_CSL39_NSW_S1(v)))
#endif

//@}

/*! @name Register CSU_CSL39, field LOCK_S1[24] (RW)
 *
 * Lock bit corresponding to the first slave. Written by secure software.
 *
 * Values:
 * - 0 - Not locked. Bits 16-23 may be written by software
 * - 1 - Bits 16-23 locked and cannot be written by software
 */
//@{

#define BP_CSU_CSL39_LOCK_S1      (24)      //!< Bit position for CSU_CSL39_LOCK_S1.
#define BM_CSU_CSL39_LOCK_S1      (0x01000000)  //!< Bit mask for CSU_CSL39_LOCK_S1.

//! @brief Get value of CSU_CSL39_LOCK_S1 from a register value.
#define BG_CSU_CSL39_LOCK_S1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_CSL39_LOCK_S1) >> BP_CSU_CSL39_LOCK_S1)

//! @brief Format value for bitfield CSU_CSL39_LOCK_S1.
#define BF_CSU_CSL39_LOCK_S1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_CSL39_LOCK_S1) & BM_CSU_CSL39_LOCK_S1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the LOCK_S1 field to a new value.
#define BW_CSU_CSL39_LOCK_S1(v)   (HW_CSU_CSL39_WR((HW_CSU_CSL39_RD() & ~BM_CSU_CSL39_LOCK_S1) | BF_CSU_CSL39_LOCK_S1(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_HP0 - HP register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_HP0 - HP register (RW)
 *
 * Reset value: 0x00000000
 *
 * The HP register may be programmed to determine the privilege (either User Mode or Supervisor
 * Mode) for up to sixteen different masters. The privilege of a particular master may be overridden
 * by muxing it with the corresponding bit in this register. The sixteen even bit positions
 * (CSU_HP[30,28,...0]) in the register hold the privilege indicator bits; while the odd bit
 * positions (CSU_HP[31,29,...,1])) contain lock bits which enable/disable writing to the
 * corresponding privilege indicator bits. HP Slave Modules Mapping Corresponding HP register and
 * bit field Master Module Comments HP[1:0] ---- HP[3:2] DCP HP[5:4] SDMA HP[7:6] EPDC TCON LCDIF
 * PXP GPU2D HP[9:8] USB HP[11:10] Test Port HP[13:12] CSI HP[15:14] MSHC HP[17:16] ---- HP[19:18]
 * ---- HP[21:20] FEC HP[23:22] DAP/ARM HP[25:24] USDHC1 HP[27:26] USDHC2 HP[29:28] USDHC3 HP[31:30]
 * USDHC4
 */
typedef union _hw_csu_hp0
{
    reg32_t U;
    struct _hw_csu_hp0_bitfields
    {
        unsigned HP : 1; //!< [0] Privilege indicator bits
        unsigned L : 1; //!< [1] Lock bit set by secure software
        unsigned HP1 : 1; //!< [2] Privilege indicator bits
        unsigned L1 : 1; //!< [3] Lock bit set by secure software
        unsigned HP2 : 1; //!< [4] Privilege indicator bits
        unsigned L2 : 1; //!< [5] Lock bit set by secure software
        unsigned HP3 : 1; //!< [6] Privilege indicator bits
        unsigned L3 : 1; //!< [7] Lock bit set by secure software
        unsigned HP4 : 1; //!< [8] Privilege indicator bits
        unsigned L4 : 1; //!< [9] Lock bit set by secure software
        unsigned HP5 : 1; //!< [10] Privilege indicator bits
        unsigned L5 : 1; //!< [11] Lock bit set by secure software
        unsigned HP6 : 1; //!< [12] Privilege indicator bits
        unsigned L6 : 1; //!< [13] Lock bit set by secure software
        unsigned HP7 : 1; //!< [14] Privilege indicator bits
        unsigned L7 : 1; //!< [15] Lock bit set by secure software
        unsigned HP8 : 1; //!< [16] Privilege indicator bits
        unsigned L8 : 1; //!< [17] Lock bit set by secure software
        unsigned HP9 : 1; //!< [18] Privilege indicator bits
        unsigned L9 : 1; //!< [19] Lock bit set by secure software
        unsigned HP10 : 1; //!< [20] Privilege indicator bits
        unsigned L10 : 1; //!< [21] Lock bit set by secure software
        unsigned HP11 : 1; //!< [22] Privilege indicator bits
        unsigned L11 : 1; //!< [23] Lock bit set by secure software
        unsigned HP12 : 1; //!< [24] Privilege indicator bits
        unsigned L12 : 1; //!< [25] Lock bit set by secure software
        unsigned HP13 : 1; //!< [26] Privilege indicator bits
        unsigned L13 : 1; //!< [27] Lock bit set by secure software
        unsigned HP14 : 1; //!< [28] Privilege indicator bits
        unsigned L14 : 1; //!< [29] Lock bit set by secure software
        unsigned HP15 : 1; //!< [30] Privilege indicator bits
        unsigned L15 : 1; //!< [31] Lock bit set by secure software
    } B;
} hw_csu_hp0_t;
#endif

/*!
 * @name Constants and macros for entire CSU_HP0 register
 */
//@{
#define HW_CSU_HP0_ADDR      (REGS_CSU_BASE + 0x200)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_HP0           (*(volatile hw_csu_hp0_t *) HW_CSU_HP0_ADDR)
#define HW_CSU_HP0_RD()      (HW_CSU_HP0.U)
#define HW_CSU_HP0_WR(v)     (HW_CSU_HP0.U = (v))
#define HW_CSU_HP0_SET(v)    (HW_CSU_HP0_WR(HW_CSU_HP0_RD() |  (v)))
#define HW_CSU_HP0_CLR(v)    (HW_CSU_HP0_WR(HW_CSU_HP0_RD() & ~(v)))
#define HW_CSU_HP0_TOG(v)    (HW_CSU_HP0_WR(HW_CSU_HP0_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_HP0 bitfields
 */

/*! @name Register CSU_HP0, field HP[0] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP      (0)      //!< Bit position for CSU_HP0_HP.
#define BM_CSU_HP0_HP      (0x00000001)  //!< Bit mask for CSU_HP0_HP.

//! @brief Get value of CSU_HP0_HP from a register value.
#define BG_CSU_HP0_HP(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP) >> BP_CSU_HP0_HP)

//! @brief Format value for bitfield CSU_HP0_HP.
#define BF_CSU_HP0_HP(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP) & BM_CSU_HP0_HP)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP field to a new value.
#define BW_CSU_HP0_HP(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP) | BF_CSU_HP0_HP(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L[1] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L      (1)      //!< Bit position for CSU_HP0_L.
#define BM_CSU_HP0_L      (0x00000002)  //!< Bit mask for CSU_HP0_L.

//! @brief Get value of CSU_HP0_L from a register value.
#define BG_CSU_HP0_L(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L) >> BP_CSU_HP0_L)

//! @brief Format value for bitfield CSU_HP0_L.
#define BF_CSU_HP0_L(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L) & BM_CSU_HP0_L)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L field to a new value.
#define BW_CSU_HP0_L(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L) | BF_CSU_HP0_L(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP1[2] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP1      (2)      //!< Bit position for CSU_HP0_HP1.
#define BM_CSU_HP0_HP1      (0x00000004)  //!< Bit mask for CSU_HP0_HP1.

//! @brief Get value of CSU_HP0_HP1 from a register value.
#define BG_CSU_HP0_HP1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP1) >> BP_CSU_HP0_HP1)

//! @brief Format value for bitfield CSU_HP0_HP1.
#define BF_CSU_HP0_HP1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP1) & BM_CSU_HP0_HP1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP1 field to a new value.
#define BW_CSU_HP0_HP1(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP1) | BF_CSU_HP0_HP1(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L1[3] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L1      (3)      //!< Bit position for CSU_HP0_L1.
#define BM_CSU_HP0_L1      (0x00000008)  //!< Bit mask for CSU_HP0_L1.

//! @brief Get value of CSU_HP0_L1 from a register value.
#define BG_CSU_HP0_L1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L1) >> BP_CSU_HP0_L1)

//! @brief Format value for bitfield CSU_HP0_L1.
#define BF_CSU_HP0_L1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L1) & BM_CSU_HP0_L1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L1 field to a new value.
#define BW_CSU_HP0_L1(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L1) | BF_CSU_HP0_L1(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP2[4] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP2      (4)      //!< Bit position for CSU_HP0_HP2.
#define BM_CSU_HP0_HP2      (0x00000010)  //!< Bit mask for CSU_HP0_HP2.

//! @brief Get value of CSU_HP0_HP2 from a register value.
#define BG_CSU_HP0_HP2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP2) >> BP_CSU_HP0_HP2)

//! @brief Format value for bitfield CSU_HP0_HP2.
#define BF_CSU_HP0_HP2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP2) & BM_CSU_HP0_HP2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP2 field to a new value.
#define BW_CSU_HP0_HP2(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP2) | BF_CSU_HP0_HP2(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L2[5] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L2      (5)      //!< Bit position for CSU_HP0_L2.
#define BM_CSU_HP0_L2      (0x00000020)  //!< Bit mask for CSU_HP0_L2.

//! @brief Get value of CSU_HP0_L2 from a register value.
#define BG_CSU_HP0_L2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L2) >> BP_CSU_HP0_L2)

//! @brief Format value for bitfield CSU_HP0_L2.
#define BF_CSU_HP0_L2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L2) & BM_CSU_HP0_L2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L2 field to a new value.
#define BW_CSU_HP0_L2(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L2) | BF_CSU_HP0_L2(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP3[6] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP3      (6)      //!< Bit position for CSU_HP0_HP3.
#define BM_CSU_HP0_HP3      (0x00000040)  //!< Bit mask for CSU_HP0_HP3.

//! @brief Get value of CSU_HP0_HP3 from a register value.
#define BG_CSU_HP0_HP3(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP3) >> BP_CSU_HP0_HP3)

//! @brief Format value for bitfield CSU_HP0_HP3.
#define BF_CSU_HP0_HP3(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP3) & BM_CSU_HP0_HP3)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP3 field to a new value.
#define BW_CSU_HP0_HP3(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP3) | BF_CSU_HP0_HP3(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L3[7] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L3      (7)      //!< Bit position for CSU_HP0_L3.
#define BM_CSU_HP0_L3      (0x00000080)  //!< Bit mask for CSU_HP0_L3.

//! @brief Get value of CSU_HP0_L3 from a register value.
#define BG_CSU_HP0_L3(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L3) >> BP_CSU_HP0_L3)

//! @brief Format value for bitfield CSU_HP0_L3.
#define BF_CSU_HP0_L3(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L3) & BM_CSU_HP0_L3)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L3 field to a new value.
#define BW_CSU_HP0_L3(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L3) | BF_CSU_HP0_L3(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP4[8] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP4      (8)      //!< Bit position for CSU_HP0_HP4.
#define BM_CSU_HP0_HP4      (0x00000100)  //!< Bit mask for CSU_HP0_HP4.

//! @brief Get value of CSU_HP0_HP4 from a register value.
#define BG_CSU_HP0_HP4(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP4) >> BP_CSU_HP0_HP4)

//! @brief Format value for bitfield CSU_HP0_HP4.
#define BF_CSU_HP0_HP4(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP4) & BM_CSU_HP0_HP4)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP4 field to a new value.
#define BW_CSU_HP0_HP4(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP4) | BF_CSU_HP0_HP4(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L4[9] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L4      (9)      //!< Bit position for CSU_HP0_L4.
#define BM_CSU_HP0_L4      (0x00000200)  //!< Bit mask for CSU_HP0_L4.

//! @brief Get value of CSU_HP0_L4 from a register value.
#define BG_CSU_HP0_L4(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L4) >> BP_CSU_HP0_L4)

//! @brief Format value for bitfield CSU_HP0_L4.
#define BF_CSU_HP0_L4(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L4) & BM_CSU_HP0_L4)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L4 field to a new value.
#define BW_CSU_HP0_L4(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L4) | BF_CSU_HP0_L4(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP5[10] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP5      (10)      //!< Bit position for CSU_HP0_HP5.
#define BM_CSU_HP0_HP5      (0x00000400)  //!< Bit mask for CSU_HP0_HP5.

//! @brief Get value of CSU_HP0_HP5 from a register value.
#define BG_CSU_HP0_HP5(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP5) >> BP_CSU_HP0_HP5)

//! @brief Format value for bitfield CSU_HP0_HP5.
#define BF_CSU_HP0_HP5(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP5) & BM_CSU_HP0_HP5)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP5 field to a new value.
#define BW_CSU_HP0_HP5(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP5) | BF_CSU_HP0_HP5(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L5[11] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L5      (11)      //!< Bit position for CSU_HP0_L5.
#define BM_CSU_HP0_L5      (0x00000800)  //!< Bit mask for CSU_HP0_L5.

//! @brief Get value of CSU_HP0_L5 from a register value.
#define BG_CSU_HP0_L5(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L5) >> BP_CSU_HP0_L5)

//! @brief Format value for bitfield CSU_HP0_L5.
#define BF_CSU_HP0_L5(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L5) & BM_CSU_HP0_L5)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L5 field to a new value.
#define BW_CSU_HP0_L5(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L5) | BF_CSU_HP0_L5(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP6[12] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP6      (12)      //!< Bit position for CSU_HP0_HP6.
#define BM_CSU_HP0_HP6      (0x00001000)  //!< Bit mask for CSU_HP0_HP6.

//! @brief Get value of CSU_HP0_HP6 from a register value.
#define BG_CSU_HP0_HP6(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP6) >> BP_CSU_HP0_HP6)

//! @brief Format value for bitfield CSU_HP0_HP6.
#define BF_CSU_HP0_HP6(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP6) & BM_CSU_HP0_HP6)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP6 field to a new value.
#define BW_CSU_HP0_HP6(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP6) | BF_CSU_HP0_HP6(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L6[13] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L6      (13)      //!< Bit position for CSU_HP0_L6.
#define BM_CSU_HP0_L6      (0x00002000)  //!< Bit mask for CSU_HP0_L6.

//! @brief Get value of CSU_HP0_L6 from a register value.
#define BG_CSU_HP0_L6(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L6) >> BP_CSU_HP0_L6)

//! @brief Format value for bitfield CSU_HP0_L6.
#define BF_CSU_HP0_L6(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L6) & BM_CSU_HP0_L6)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L6 field to a new value.
#define BW_CSU_HP0_L6(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L6) | BF_CSU_HP0_L6(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP7[14] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP7      (14)      //!< Bit position for CSU_HP0_HP7.
#define BM_CSU_HP0_HP7      (0x00004000)  //!< Bit mask for CSU_HP0_HP7.

//! @brief Get value of CSU_HP0_HP7 from a register value.
#define BG_CSU_HP0_HP7(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP7) >> BP_CSU_HP0_HP7)

//! @brief Format value for bitfield CSU_HP0_HP7.
#define BF_CSU_HP0_HP7(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP7) & BM_CSU_HP0_HP7)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP7 field to a new value.
#define BW_CSU_HP0_HP7(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP7) | BF_CSU_HP0_HP7(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L7[15] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L7      (15)      //!< Bit position for CSU_HP0_L7.
#define BM_CSU_HP0_L7      (0x00008000)  //!< Bit mask for CSU_HP0_L7.

//! @brief Get value of CSU_HP0_L7 from a register value.
#define BG_CSU_HP0_L7(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L7) >> BP_CSU_HP0_L7)

//! @brief Format value for bitfield CSU_HP0_L7.
#define BF_CSU_HP0_L7(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L7) & BM_CSU_HP0_L7)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L7 field to a new value.
#define BW_CSU_HP0_L7(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L7) | BF_CSU_HP0_L7(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP8[16] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP8      (16)      //!< Bit position for CSU_HP0_HP8.
#define BM_CSU_HP0_HP8      (0x00010000)  //!< Bit mask for CSU_HP0_HP8.

//! @brief Get value of CSU_HP0_HP8 from a register value.
#define BG_CSU_HP0_HP8(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP8) >> BP_CSU_HP0_HP8)

//! @brief Format value for bitfield CSU_HP0_HP8.
#define BF_CSU_HP0_HP8(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP8) & BM_CSU_HP0_HP8)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP8 field to a new value.
#define BW_CSU_HP0_HP8(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP8) | BF_CSU_HP0_HP8(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L8[17] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L8      (17)      //!< Bit position for CSU_HP0_L8.
#define BM_CSU_HP0_L8      (0x00020000)  //!< Bit mask for CSU_HP0_L8.

//! @brief Get value of CSU_HP0_L8 from a register value.
#define BG_CSU_HP0_L8(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L8) >> BP_CSU_HP0_L8)

//! @brief Format value for bitfield CSU_HP0_L8.
#define BF_CSU_HP0_L8(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L8) & BM_CSU_HP0_L8)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L8 field to a new value.
#define BW_CSU_HP0_L8(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L8) | BF_CSU_HP0_L8(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP9[18] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP9      (18)      //!< Bit position for CSU_HP0_HP9.
#define BM_CSU_HP0_HP9      (0x00040000)  //!< Bit mask for CSU_HP0_HP9.

//! @brief Get value of CSU_HP0_HP9 from a register value.
#define BG_CSU_HP0_HP9(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP9) >> BP_CSU_HP0_HP9)

//! @brief Format value for bitfield CSU_HP0_HP9.
#define BF_CSU_HP0_HP9(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP9) & BM_CSU_HP0_HP9)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP9 field to a new value.
#define BW_CSU_HP0_HP9(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP9) | BF_CSU_HP0_HP9(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L9[19] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L9      (19)      //!< Bit position for CSU_HP0_L9.
#define BM_CSU_HP0_L9      (0x00080000)  //!< Bit mask for CSU_HP0_L9.

//! @brief Get value of CSU_HP0_L9 from a register value.
#define BG_CSU_HP0_L9(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L9) >> BP_CSU_HP0_L9)

//! @brief Format value for bitfield CSU_HP0_L9.
#define BF_CSU_HP0_L9(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L9) & BM_CSU_HP0_L9)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L9 field to a new value.
#define BW_CSU_HP0_L9(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L9) | BF_CSU_HP0_L9(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP10[20] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP10      (20)      //!< Bit position for CSU_HP0_HP10.
#define BM_CSU_HP0_HP10      (0x00100000)  //!< Bit mask for CSU_HP0_HP10.

//! @brief Get value of CSU_HP0_HP10 from a register value.
#define BG_CSU_HP0_HP10(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP10) >> BP_CSU_HP0_HP10)

//! @brief Format value for bitfield CSU_HP0_HP10.
#define BF_CSU_HP0_HP10(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP10) & BM_CSU_HP0_HP10)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP10 field to a new value.
#define BW_CSU_HP0_HP10(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP10) | BF_CSU_HP0_HP10(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L10[21] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L10      (21)      //!< Bit position for CSU_HP0_L10.
#define BM_CSU_HP0_L10      (0x00200000)  //!< Bit mask for CSU_HP0_L10.

//! @brief Get value of CSU_HP0_L10 from a register value.
#define BG_CSU_HP0_L10(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L10) >> BP_CSU_HP0_L10)

//! @brief Format value for bitfield CSU_HP0_L10.
#define BF_CSU_HP0_L10(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L10) & BM_CSU_HP0_L10)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L10 field to a new value.
#define BW_CSU_HP0_L10(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L10) | BF_CSU_HP0_L10(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP11[22] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP11      (22)      //!< Bit position for CSU_HP0_HP11.
#define BM_CSU_HP0_HP11      (0x00400000)  //!< Bit mask for CSU_HP0_HP11.

//! @brief Get value of CSU_HP0_HP11 from a register value.
#define BG_CSU_HP0_HP11(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP11) >> BP_CSU_HP0_HP11)

//! @brief Format value for bitfield CSU_HP0_HP11.
#define BF_CSU_HP0_HP11(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP11) & BM_CSU_HP0_HP11)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP11 field to a new value.
#define BW_CSU_HP0_HP11(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP11) | BF_CSU_HP0_HP11(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L11[23] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L11      (23)      //!< Bit position for CSU_HP0_L11.
#define BM_CSU_HP0_L11      (0x00800000)  //!< Bit mask for CSU_HP0_L11.

//! @brief Get value of CSU_HP0_L11 from a register value.
#define BG_CSU_HP0_L11(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L11) >> BP_CSU_HP0_L11)

//! @brief Format value for bitfield CSU_HP0_L11.
#define BF_CSU_HP0_L11(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L11) & BM_CSU_HP0_L11)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L11 field to a new value.
#define BW_CSU_HP0_L11(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L11) | BF_CSU_HP0_L11(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP12[24] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP12      (24)      //!< Bit position for CSU_HP0_HP12.
#define BM_CSU_HP0_HP12      (0x01000000)  //!< Bit mask for CSU_HP0_HP12.

//! @brief Get value of CSU_HP0_HP12 from a register value.
#define BG_CSU_HP0_HP12(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP12) >> BP_CSU_HP0_HP12)

//! @brief Format value for bitfield CSU_HP0_HP12.
#define BF_CSU_HP0_HP12(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP12) & BM_CSU_HP0_HP12)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP12 field to a new value.
#define BW_CSU_HP0_HP12(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP12) | BF_CSU_HP0_HP12(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L12[25] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L12      (25)      //!< Bit position for CSU_HP0_L12.
#define BM_CSU_HP0_L12      (0x02000000)  //!< Bit mask for CSU_HP0_L12.

//! @brief Get value of CSU_HP0_L12 from a register value.
#define BG_CSU_HP0_L12(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L12) >> BP_CSU_HP0_L12)

//! @brief Format value for bitfield CSU_HP0_L12.
#define BF_CSU_HP0_L12(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L12) & BM_CSU_HP0_L12)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L12 field to a new value.
#define BW_CSU_HP0_L12(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L12) | BF_CSU_HP0_L12(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP13[26] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP13      (26)      //!< Bit position for CSU_HP0_HP13.
#define BM_CSU_HP0_HP13      (0x04000000)  //!< Bit mask for CSU_HP0_HP13.

//! @brief Get value of CSU_HP0_HP13 from a register value.
#define BG_CSU_HP0_HP13(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP13) >> BP_CSU_HP0_HP13)

//! @brief Format value for bitfield CSU_HP0_HP13.
#define BF_CSU_HP0_HP13(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP13) & BM_CSU_HP0_HP13)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP13 field to a new value.
#define BW_CSU_HP0_HP13(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP13) | BF_CSU_HP0_HP13(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L13[27] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L13      (27)      //!< Bit position for CSU_HP0_L13.
#define BM_CSU_HP0_L13      (0x08000000)  //!< Bit mask for CSU_HP0_L13.

//! @brief Get value of CSU_HP0_L13 from a register value.
#define BG_CSU_HP0_L13(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L13) >> BP_CSU_HP0_L13)

//! @brief Format value for bitfield CSU_HP0_L13.
#define BF_CSU_HP0_L13(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L13) & BM_CSU_HP0_L13)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L13 field to a new value.
#define BW_CSU_HP0_L13(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L13) | BF_CSU_HP0_L13(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP14[28] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP14      (28)      //!< Bit position for CSU_HP0_HP14.
#define BM_CSU_HP0_HP14      (0x10000000)  //!< Bit mask for CSU_HP0_HP14.

//! @brief Get value of CSU_HP0_HP14 from a register value.
#define BG_CSU_HP0_HP14(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP14) >> BP_CSU_HP0_HP14)

//! @brief Format value for bitfield CSU_HP0_HP14.
#define BF_CSU_HP0_HP14(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP14) & BM_CSU_HP0_HP14)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP14 field to a new value.
#define BW_CSU_HP0_HP14(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP14) | BF_CSU_HP0_HP14(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L14[29] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L14      (29)      //!< Bit position for CSU_HP0_L14.
#define BM_CSU_HP0_L14      (0x20000000)  //!< Bit mask for CSU_HP0_L14.

//! @brief Get value of CSU_HP0_L14 from a register value.
#define BG_CSU_HP0_L14(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L14) >> BP_CSU_HP0_L14)

//! @brief Format value for bitfield CSU_HP0_L14.
#define BF_CSU_HP0_L14(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L14) & BM_CSU_HP0_L14)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L14 field to a new value.
#define BW_CSU_HP0_L14(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L14) | BF_CSU_HP0_L14(v)))
#endif

//@}

/*! @name Register CSU_HP0, field HP15[30] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP0_HP15      (30)      //!< Bit position for CSU_HP0_HP15.
#define BM_CSU_HP0_HP15      (0x40000000)  //!< Bit mask for CSU_HP0_HP15.

//! @brief Get value of CSU_HP0_HP15 from a register value.
#define BG_CSU_HP0_HP15(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_HP15) >> BP_CSU_HP0_HP15)

//! @brief Format value for bitfield CSU_HP0_HP15.
#define BF_CSU_HP0_HP15(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_HP15) & BM_CSU_HP0_HP15)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP15 field to a new value.
#define BW_CSU_HP0_HP15(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_HP15) | BF_CSU_HP0_HP15(v)))
#endif

//@}

/*! @name Register CSU_HP0, field L15[31] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP0_L15      (31)      //!< Bit position for CSU_HP0_L15.
#define BM_CSU_HP0_L15      (0x80000000)  //!< Bit mask for CSU_HP0_L15.

//! @brief Get value of CSU_HP0_L15 from a register value.
#define BG_CSU_HP0_L15(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP0_L15) >> BP_CSU_HP0_L15)

//! @brief Format value for bitfield CSU_HP0_L15.
#define BF_CSU_HP0_L15(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP0_L15) & BM_CSU_HP0_L15)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L15 field to a new value.
#define BW_CSU_HP0_L15(v)   (HW_CSU_HP0_WR((HW_CSU_HP0_RD() & ~BM_CSU_HP0_L15) | BF_CSU_HP0_L15(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_HP1 - HP register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_HP1 - HP register (RW)
 *
 * Reset value: 0x00000000
 *
 * The HP register may be programmed to determine the privilege (either User Mode or Supervisor
 * Mode) for up to sixteen different masters. The privilege of a particular master may be overridden
 * by muxing it with the corresponding bit in this register. The sixteen even bit positions
 * (CSU_HP[30,28,...0]) in the register hold the privilege indicator bits; while the odd bit
 * positions (CSU_HP[31,29,...,1])) contain lock bits which enable/disable writing to the
 * corresponding privilege indicator bits. HP Slave Modules Mapping Corresponding HP register and
 * bit field Master Module Comments HP[1:0] ---- HP[3:2] DCP HP[5:4] SDMA HP[7:6] EPDC TCON LCDIF
 * PXP GPU2D HP[9:8] USB HP[11:10] Test Port HP[13:12] CSI HP[15:14] MSHC HP[17:16] ---- HP[19:18]
 * ---- HP[21:20] FEC HP[23:22] DAP/ARM HP[25:24] USDHC1 HP[27:26] USDHC2 HP[29:28] USDHC3 HP[31:30]
 * USDHC4
 */
typedef union _hw_csu_hp1
{
    reg32_t U;
    struct _hw_csu_hp1_bitfields
    {
        unsigned HP : 1; //!< [0] Privilege indicator bits
        unsigned L : 1; //!< [1] Lock bit set by secure software
        unsigned HP1 : 1; //!< [2] Privilege indicator bits
        unsigned L1 : 1; //!< [3] Lock bit set by secure software
        unsigned HP2 : 1; //!< [4] Privilege indicator bits
        unsigned L2 : 1; //!< [5] Lock bit set by secure software
        unsigned HP3 : 1; //!< [6] Privilege indicator bits
        unsigned L3 : 1; //!< [7] Lock bit set by secure software
        unsigned HP4 : 1; //!< [8] Privilege indicator bits
        unsigned L4 : 1; //!< [9] Lock bit set by secure software
        unsigned HP5 : 1; //!< [10] Privilege indicator bits
        unsigned L5 : 1; //!< [11] Lock bit set by secure software
        unsigned HP6 : 1; //!< [12] Privilege indicator bits
        unsigned L6 : 1; //!< [13] Lock bit set by secure software
        unsigned HP7 : 1; //!< [14] Privilege indicator bits
        unsigned L7 : 1; //!< [15] Lock bit set by secure software
        unsigned HP8 : 1; //!< [16] Privilege indicator bits
        unsigned L8 : 1; //!< [17] Lock bit set by secure software
        unsigned HP9 : 1; //!< [18] Privilege indicator bits
        unsigned L9 : 1; //!< [19] Lock bit set by secure software
        unsigned HP10 : 1; //!< [20] Privilege indicator bits
        unsigned L10 : 1; //!< [21] Lock bit set by secure software
        unsigned HP11 : 1; //!< [22] Privilege indicator bits
        unsigned L11 : 1; //!< [23] Lock bit set by secure software
        unsigned HP12 : 1; //!< [24] Privilege indicator bits
        unsigned L12 : 1; //!< [25] Lock bit set by secure software
        unsigned HP13 : 1; //!< [26] Privilege indicator bits
        unsigned L13 : 1; //!< [27] Lock bit set by secure software
        unsigned HP14 : 1; //!< [28] Privilege indicator bits
        unsigned L14 : 1; //!< [29] Lock bit set by secure software
        unsigned HP15 : 1; //!< [30] Privilege indicator bits
        unsigned L15 : 1; //!< [31] Lock bit set by secure software
    } B;
} hw_csu_hp1_t;
#endif

/*!
 * @name Constants and macros for entire CSU_HP1 register
 */
//@{
#define HW_CSU_HP1_ADDR      (REGS_CSU_BASE + 0x204)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_HP1           (*(volatile hw_csu_hp1_t *) HW_CSU_HP1_ADDR)
#define HW_CSU_HP1_RD()      (HW_CSU_HP1.U)
#define HW_CSU_HP1_WR(v)     (HW_CSU_HP1.U = (v))
#define HW_CSU_HP1_SET(v)    (HW_CSU_HP1_WR(HW_CSU_HP1_RD() |  (v)))
#define HW_CSU_HP1_CLR(v)    (HW_CSU_HP1_WR(HW_CSU_HP1_RD() & ~(v)))
#define HW_CSU_HP1_TOG(v)    (HW_CSU_HP1_WR(HW_CSU_HP1_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_HP1 bitfields
 */

/*! @name Register CSU_HP1, field HP[0] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP      (0)      //!< Bit position for CSU_HP1_HP.
#define BM_CSU_HP1_HP      (0x00000001)  //!< Bit mask for CSU_HP1_HP.

//! @brief Get value of CSU_HP1_HP from a register value.
#define BG_CSU_HP1_HP(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP) >> BP_CSU_HP1_HP)

//! @brief Format value for bitfield CSU_HP1_HP.
#define BF_CSU_HP1_HP(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP) & BM_CSU_HP1_HP)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP field to a new value.
#define BW_CSU_HP1_HP(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP) | BF_CSU_HP1_HP(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L[1] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L      (1)      //!< Bit position for CSU_HP1_L.
#define BM_CSU_HP1_L      (0x00000002)  //!< Bit mask for CSU_HP1_L.

//! @brief Get value of CSU_HP1_L from a register value.
#define BG_CSU_HP1_L(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L) >> BP_CSU_HP1_L)

//! @brief Format value for bitfield CSU_HP1_L.
#define BF_CSU_HP1_L(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L) & BM_CSU_HP1_L)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L field to a new value.
#define BW_CSU_HP1_L(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L) | BF_CSU_HP1_L(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP1[2] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP1      (2)      //!< Bit position for CSU_HP1_HP1.
#define BM_CSU_HP1_HP1      (0x00000004)  //!< Bit mask for CSU_HP1_HP1.

//! @brief Get value of CSU_HP1_HP1 from a register value.
#define BG_CSU_HP1_HP1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP1) >> BP_CSU_HP1_HP1)

//! @brief Format value for bitfield CSU_HP1_HP1.
#define BF_CSU_HP1_HP1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP1) & BM_CSU_HP1_HP1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP1 field to a new value.
#define BW_CSU_HP1_HP1(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP1) | BF_CSU_HP1_HP1(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L1[3] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L1      (3)      //!< Bit position for CSU_HP1_L1.
#define BM_CSU_HP1_L1      (0x00000008)  //!< Bit mask for CSU_HP1_L1.

//! @brief Get value of CSU_HP1_L1 from a register value.
#define BG_CSU_HP1_L1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L1) >> BP_CSU_HP1_L1)

//! @brief Format value for bitfield CSU_HP1_L1.
#define BF_CSU_HP1_L1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L1) & BM_CSU_HP1_L1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L1 field to a new value.
#define BW_CSU_HP1_L1(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L1) | BF_CSU_HP1_L1(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP2[4] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP2      (4)      //!< Bit position for CSU_HP1_HP2.
#define BM_CSU_HP1_HP2      (0x00000010)  //!< Bit mask for CSU_HP1_HP2.

//! @brief Get value of CSU_HP1_HP2 from a register value.
#define BG_CSU_HP1_HP2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP2) >> BP_CSU_HP1_HP2)

//! @brief Format value for bitfield CSU_HP1_HP2.
#define BF_CSU_HP1_HP2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP2) & BM_CSU_HP1_HP2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP2 field to a new value.
#define BW_CSU_HP1_HP2(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP2) | BF_CSU_HP1_HP2(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L2[5] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L2      (5)      //!< Bit position for CSU_HP1_L2.
#define BM_CSU_HP1_L2      (0x00000020)  //!< Bit mask for CSU_HP1_L2.

//! @brief Get value of CSU_HP1_L2 from a register value.
#define BG_CSU_HP1_L2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L2) >> BP_CSU_HP1_L2)

//! @brief Format value for bitfield CSU_HP1_L2.
#define BF_CSU_HP1_L2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L2) & BM_CSU_HP1_L2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L2 field to a new value.
#define BW_CSU_HP1_L2(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L2) | BF_CSU_HP1_L2(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP3[6] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP3      (6)      //!< Bit position for CSU_HP1_HP3.
#define BM_CSU_HP1_HP3      (0x00000040)  //!< Bit mask for CSU_HP1_HP3.

//! @brief Get value of CSU_HP1_HP3 from a register value.
#define BG_CSU_HP1_HP3(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP3) >> BP_CSU_HP1_HP3)

//! @brief Format value for bitfield CSU_HP1_HP3.
#define BF_CSU_HP1_HP3(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP3) & BM_CSU_HP1_HP3)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP3 field to a new value.
#define BW_CSU_HP1_HP3(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP3) | BF_CSU_HP1_HP3(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L3[7] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L3      (7)      //!< Bit position for CSU_HP1_L3.
#define BM_CSU_HP1_L3      (0x00000080)  //!< Bit mask for CSU_HP1_L3.

//! @brief Get value of CSU_HP1_L3 from a register value.
#define BG_CSU_HP1_L3(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L3) >> BP_CSU_HP1_L3)

//! @brief Format value for bitfield CSU_HP1_L3.
#define BF_CSU_HP1_L3(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L3) & BM_CSU_HP1_L3)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L3 field to a new value.
#define BW_CSU_HP1_L3(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L3) | BF_CSU_HP1_L3(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP4[8] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP4      (8)      //!< Bit position for CSU_HP1_HP4.
#define BM_CSU_HP1_HP4      (0x00000100)  //!< Bit mask for CSU_HP1_HP4.

//! @brief Get value of CSU_HP1_HP4 from a register value.
#define BG_CSU_HP1_HP4(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP4) >> BP_CSU_HP1_HP4)

//! @brief Format value for bitfield CSU_HP1_HP4.
#define BF_CSU_HP1_HP4(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP4) & BM_CSU_HP1_HP4)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP4 field to a new value.
#define BW_CSU_HP1_HP4(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP4) | BF_CSU_HP1_HP4(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L4[9] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L4      (9)      //!< Bit position for CSU_HP1_L4.
#define BM_CSU_HP1_L4      (0x00000200)  //!< Bit mask for CSU_HP1_L4.

//! @brief Get value of CSU_HP1_L4 from a register value.
#define BG_CSU_HP1_L4(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L4) >> BP_CSU_HP1_L4)

//! @brief Format value for bitfield CSU_HP1_L4.
#define BF_CSU_HP1_L4(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L4) & BM_CSU_HP1_L4)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L4 field to a new value.
#define BW_CSU_HP1_L4(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L4) | BF_CSU_HP1_L4(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP5[10] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP5      (10)      //!< Bit position for CSU_HP1_HP5.
#define BM_CSU_HP1_HP5      (0x00000400)  //!< Bit mask for CSU_HP1_HP5.

//! @brief Get value of CSU_HP1_HP5 from a register value.
#define BG_CSU_HP1_HP5(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP5) >> BP_CSU_HP1_HP5)

//! @brief Format value for bitfield CSU_HP1_HP5.
#define BF_CSU_HP1_HP5(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP5) & BM_CSU_HP1_HP5)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP5 field to a new value.
#define BW_CSU_HP1_HP5(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP5) | BF_CSU_HP1_HP5(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L5[11] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L5      (11)      //!< Bit position for CSU_HP1_L5.
#define BM_CSU_HP1_L5      (0x00000800)  //!< Bit mask for CSU_HP1_L5.

//! @brief Get value of CSU_HP1_L5 from a register value.
#define BG_CSU_HP1_L5(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L5) >> BP_CSU_HP1_L5)

//! @brief Format value for bitfield CSU_HP1_L5.
#define BF_CSU_HP1_L5(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L5) & BM_CSU_HP1_L5)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L5 field to a new value.
#define BW_CSU_HP1_L5(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L5) | BF_CSU_HP1_L5(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP6[12] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP6      (12)      //!< Bit position for CSU_HP1_HP6.
#define BM_CSU_HP1_HP6      (0x00001000)  //!< Bit mask for CSU_HP1_HP6.

//! @brief Get value of CSU_HP1_HP6 from a register value.
#define BG_CSU_HP1_HP6(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP6) >> BP_CSU_HP1_HP6)

//! @brief Format value for bitfield CSU_HP1_HP6.
#define BF_CSU_HP1_HP6(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP6) & BM_CSU_HP1_HP6)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP6 field to a new value.
#define BW_CSU_HP1_HP6(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP6) | BF_CSU_HP1_HP6(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L6[13] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L6      (13)      //!< Bit position for CSU_HP1_L6.
#define BM_CSU_HP1_L6      (0x00002000)  //!< Bit mask for CSU_HP1_L6.

//! @brief Get value of CSU_HP1_L6 from a register value.
#define BG_CSU_HP1_L6(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L6) >> BP_CSU_HP1_L6)

//! @brief Format value for bitfield CSU_HP1_L6.
#define BF_CSU_HP1_L6(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L6) & BM_CSU_HP1_L6)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L6 field to a new value.
#define BW_CSU_HP1_L6(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L6) | BF_CSU_HP1_L6(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP7[14] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP7      (14)      //!< Bit position for CSU_HP1_HP7.
#define BM_CSU_HP1_HP7      (0x00004000)  //!< Bit mask for CSU_HP1_HP7.

//! @brief Get value of CSU_HP1_HP7 from a register value.
#define BG_CSU_HP1_HP7(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP7) >> BP_CSU_HP1_HP7)

//! @brief Format value for bitfield CSU_HP1_HP7.
#define BF_CSU_HP1_HP7(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP7) & BM_CSU_HP1_HP7)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP7 field to a new value.
#define BW_CSU_HP1_HP7(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP7) | BF_CSU_HP1_HP7(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L7[15] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L7      (15)      //!< Bit position for CSU_HP1_L7.
#define BM_CSU_HP1_L7      (0x00008000)  //!< Bit mask for CSU_HP1_L7.

//! @brief Get value of CSU_HP1_L7 from a register value.
#define BG_CSU_HP1_L7(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L7) >> BP_CSU_HP1_L7)

//! @brief Format value for bitfield CSU_HP1_L7.
#define BF_CSU_HP1_L7(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L7) & BM_CSU_HP1_L7)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L7 field to a new value.
#define BW_CSU_HP1_L7(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L7) | BF_CSU_HP1_L7(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP8[16] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP8      (16)      //!< Bit position for CSU_HP1_HP8.
#define BM_CSU_HP1_HP8      (0x00010000)  //!< Bit mask for CSU_HP1_HP8.

//! @brief Get value of CSU_HP1_HP8 from a register value.
#define BG_CSU_HP1_HP8(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP8) >> BP_CSU_HP1_HP8)

//! @brief Format value for bitfield CSU_HP1_HP8.
#define BF_CSU_HP1_HP8(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP8) & BM_CSU_HP1_HP8)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP8 field to a new value.
#define BW_CSU_HP1_HP8(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP8) | BF_CSU_HP1_HP8(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L8[17] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L8      (17)      //!< Bit position for CSU_HP1_L8.
#define BM_CSU_HP1_L8      (0x00020000)  //!< Bit mask for CSU_HP1_L8.

//! @brief Get value of CSU_HP1_L8 from a register value.
#define BG_CSU_HP1_L8(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L8) >> BP_CSU_HP1_L8)

//! @brief Format value for bitfield CSU_HP1_L8.
#define BF_CSU_HP1_L8(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L8) & BM_CSU_HP1_L8)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L8 field to a new value.
#define BW_CSU_HP1_L8(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L8) | BF_CSU_HP1_L8(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP9[18] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP9      (18)      //!< Bit position for CSU_HP1_HP9.
#define BM_CSU_HP1_HP9      (0x00040000)  //!< Bit mask for CSU_HP1_HP9.

//! @brief Get value of CSU_HP1_HP9 from a register value.
#define BG_CSU_HP1_HP9(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP9) >> BP_CSU_HP1_HP9)

//! @brief Format value for bitfield CSU_HP1_HP9.
#define BF_CSU_HP1_HP9(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP9) & BM_CSU_HP1_HP9)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP9 field to a new value.
#define BW_CSU_HP1_HP9(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP9) | BF_CSU_HP1_HP9(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L9[19] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L9      (19)      //!< Bit position for CSU_HP1_L9.
#define BM_CSU_HP1_L9      (0x00080000)  //!< Bit mask for CSU_HP1_L9.

//! @brief Get value of CSU_HP1_L9 from a register value.
#define BG_CSU_HP1_L9(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L9) >> BP_CSU_HP1_L9)

//! @brief Format value for bitfield CSU_HP1_L9.
#define BF_CSU_HP1_L9(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L9) & BM_CSU_HP1_L9)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L9 field to a new value.
#define BW_CSU_HP1_L9(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L9) | BF_CSU_HP1_L9(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP10[20] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP10      (20)      //!< Bit position for CSU_HP1_HP10.
#define BM_CSU_HP1_HP10      (0x00100000)  //!< Bit mask for CSU_HP1_HP10.

//! @brief Get value of CSU_HP1_HP10 from a register value.
#define BG_CSU_HP1_HP10(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP10) >> BP_CSU_HP1_HP10)

//! @brief Format value for bitfield CSU_HP1_HP10.
#define BF_CSU_HP1_HP10(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP10) & BM_CSU_HP1_HP10)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP10 field to a new value.
#define BW_CSU_HP1_HP10(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP10) | BF_CSU_HP1_HP10(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L10[21] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L10      (21)      //!< Bit position for CSU_HP1_L10.
#define BM_CSU_HP1_L10      (0x00200000)  //!< Bit mask for CSU_HP1_L10.

//! @brief Get value of CSU_HP1_L10 from a register value.
#define BG_CSU_HP1_L10(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L10) >> BP_CSU_HP1_L10)

//! @brief Format value for bitfield CSU_HP1_L10.
#define BF_CSU_HP1_L10(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L10) & BM_CSU_HP1_L10)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L10 field to a new value.
#define BW_CSU_HP1_L10(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L10) | BF_CSU_HP1_L10(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP11[22] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP11      (22)      //!< Bit position for CSU_HP1_HP11.
#define BM_CSU_HP1_HP11      (0x00400000)  //!< Bit mask for CSU_HP1_HP11.

//! @brief Get value of CSU_HP1_HP11 from a register value.
#define BG_CSU_HP1_HP11(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP11) >> BP_CSU_HP1_HP11)

//! @brief Format value for bitfield CSU_HP1_HP11.
#define BF_CSU_HP1_HP11(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP11) & BM_CSU_HP1_HP11)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP11 field to a new value.
#define BW_CSU_HP1_HP11(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP11) | BF_CSU_HP1_HP11(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L11[23] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L11      (23)      //!< Bit position for CSU_HP1_L11.
#define BM_CSU_HP1_L11      (0x00800000)  //!< Bit mask for CSU_HP1_L11.

//! @brief Get value of CSU_HP1_L11 from a register value.
#define BG_CSU_HP1_L11(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L11) >> BP_CSU_HP1_L11)

//! @brief Format value for bitfield CSU_HP1_L11.
#define BF_CSU_HP1_L11(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L11) & BM_CSU_HP1_L11)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L11 field to a new value.
#define BW_CSU_HP1_L11(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L11) | BF_CSU_HP1_L11(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP12[24] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP12      (24)      //!< Bit position for CSU_HP1_HP12.
#define BM_CSU_HP1_HP12      (0x01000000)  //!< Bit mask for CSU_HP1_HP12.

//! @brief Get value of CSU_HP1_HP12 from a register value.
#define BG_CSU_HP1_HP12(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP12) >> BP_CSU_HP1_HP12)

//! @brief Format value for bitfield CSU_HP1_HP12.
#define BF_CSU_HP1_HP12(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP12) & BM_CSU_HP1_HP12)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP12 field to a new value.
#define BW_CSU_HP1_HP12(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP12) | BF_CSU_HP1_HP12(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L12[25] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L12      (25)      //!< Bit position for CSU_HP1_L12.
#define BM_CSU_HP1_L12      (0x02000000)  //!< Bit mask for CSU_HP1_L12.

//! @brief Get value of CSU_HP1_L12 from a register value.
#define BG_CSU_HP1_L12(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L12) >> BP_CSU_HP1_L12)

//! @brief Format value for bitfield CSU_HP1_L12.
#define BF_CSU_HP1_L12(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L12) & BM_CSU_HP1_L12)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L12 field to a new value.
#define BW_CSU_HP1_L12(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L12) | BF_CSU_HP1_L12(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP13[26] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP13      (26)      //!< Bit position for CSU_HP1_HP13.
#define BM_CSU_HP1_HP13      (0x04000000)  //!< Bit mask for CSU_HP1_HP13.

//! @brief Get value of CSU_HP1_HP13 from a register value.
#define BG_CSU_HP1_HP13(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP13) >> BP_CSU_HP1_HP13)

//! @brief Format value for bitfield CSU_HP1_HP13.
#define BF_CSU_HP1_HP13(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP13) & BM_CSU_HP1_HP13)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP13 field to a new value.
#define BW_CSU_HP1_HP13(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP13) | BF_CSU_HP1_HP13(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L13[27] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L13      (27)      //!< Bit position for CSU_HP1_L13.
#define BM_CSU_HP1_L13      (0x08000000)  //!< Bit mask for CSU_HP1_L13.

//! @brief Get value of CSU_HP1_L13 from a register value.
#define BG_CSU_HP1_L13(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L13) >> BP_CSU_HP1_L13)

//! @brief Format value for bitfield CSU_HP1_L13.
#define BF_CSU_HP1_L13(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L13) & BM_CSU_HP1_L13)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L13 field to a new value.
#define BW_CSU_HP1_L13(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L13) | BF_CSU_HP1_L13(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP14[28] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP14      (28)      //!< Bit position for CSU_HP1_HP14.
#define BM_CSU_HP1_HP14      (0x10000000)  //!< Bit mask for CSU_HP1_HP14.

//! @brief Get value of CSU_HP1_HP14 from a register value.
#define BG_CSU_HP1_HP14(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP14) >> BP_CSU_HP1_HP14)

//! @brief Format value for bitfield CSU_HP1_HP14.
#define BF_CSU_HP1_HP14(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP14) & BM_CSU_HP1_HP14)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP14 field to a new value.
#define BW_CSU_HP1_HP14(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP14) | BF_CSU_HP1_HP14(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L14[29] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L14      (29)      //!< Bit position for CSU_HP1_L14.
#define BM_CSU_HP1_L14      (0x20000000)  //!< Bit mask for CSU_HP1_L14.

//! @brief Get value of CSU_HP1_L14 from a register value.
#define BG_CSU_HP1_L14(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L14) >> BP_CSU_HP1_L14)

//! @brief Format value for bitfield CSU_HP1_L14.
#define BF_CSU_HP1_L14(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L14) & BM_CSU_HP1_L14)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L14 field to a new value.
#define BW_CSU_HP1_L14(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L14) | BF_CSU_HP1_L14(v)))
#endif

//@}

/*! @name Register CSU_HP1, field HP15[30] (RW)
 *
 * Privilege indicator bits
 *
 * Values:
 * - 0 - User Mode for the corresponding master
 * - 1 - Supervisor Mode for the corresponding master
 */
//@{

#define BP_CSU_HP1_HP15      (30)      //!< Bit position for CSU_HP1_HP15.
#define BM_CSU_HP1_HP15      (0x40000000)  //!< Bit mask for CSU_HP1_HP15.

//! @brief Get value of CSU_HP1_HP15 from a register value.
#define BG_CSU_HP1_HP15(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_HP15) >> BP_CSU_HP1_HP15)

//! @brief Format value for bitfield CSU_HP1_HP15.
#define BF_CSU_HP1_HP15(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_HP15) & BM_CSU_HP1_HP15)

#ifndef __LANGUAGE_ASM__
//! @brief Set the HP15 field to a new value.
#define BW_CSU_HP1_HP15(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_HP15) | BF_CSU_HP1_HP15(v)))
#endif

//@}

/*! @name Register CSU_HP1, field L15[31] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_HP1_L15      (31)      //!< Bit position for CSU_HP1_L15.
#define BM_CSU_HP1_L15      (0x80000000)  //!< Bit mask for CSU_HP1_L15.

//! @brief Get value of CSU_HP1_L15 from a register value.
#define BG_CSU_HP1_L15(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_HP1_L15) >> BP_CSU_HP1_L15)

//! @brief Format value for bitfield CSU_HP1_L15.
#define BF_CSU_HP1_L15(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_HP1_L15) & BM_CSU_HP1_L15)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L15 field to a new value.
#define BW_CSU_HP1_L15(v)   (HW_CSU_HP1_WR((HW_CSU_HP1_RD() & ~BM_CSU_HP1_L15) | BF_CSU_HP1_L15(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// HW_CSU_SA - Secure access register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_CSU_SA - Secure access register (RW)
 *
 * Reset value: 0x00000000
 *
 * The Secure Access register may be programmed to specify the access policy (either Secure or Non-
 * secure) for up to sixteen different masters. This register is used to set the access policy for
 * Type 1 masters which are incapable of setting the policy by themselves. The sixteen even bit
 * positions (CSU_SA[30,28,...,0]) in the register hold the policy indicator bits; while the odd bit
 * positions (CSU_SA[31,29,...,1]) contain lock bits which enable/disable writing to the
 * corresponding policy indicator bits. SA Slave Modules Mapping Corresponding SA register and bit
 * field Master Module Comments SA[1:0] --- SA[3:2] DCP SA[5:4] SDMA SA[7:6] EPDC TCON LCDIF PXP
 * GPU2D SA[9:8] USB SA[11:10] Test Port SA[13:12] CSI SA[15:14] MSHC SA[17:16] FEC SA[19:18] DAP
 * SA[21:20] USDHC1 SA[23:22] USDHC2 SA[25:24] USDHC3 SA[27:26] USDHC4 SA[29:28] ---- SA[31:30] ----
 */
typedef union _hw_csu_sa
{
    reg32_t U;
    struct _hw_csu_sa_bitfields
    {
        unsigned NSA : 1; //!< [0] Non-Secure Access Policy indicator bits
        unsigned L : 1; //!< [1] Lock bit set by secure software
        unsigned NSA1 : 1; //!< [2] Non-Secure Access Policy indicator bits
        unsigned L1 : 1; //!< [3] Lock bit set by secure software
        unsigned NSA2 : 1; //!< [4] Non-Secure Access Policy indicator bits
        unsigned L2 : 1; //!< [5] Lock bit set by secure software
        unsigned NSA3 : 1; //!< [6] Non-Secure Access Policy indicator bits
        unsigned L3 : 1; //!< [7] Lock bit set by secure software
        unsigned NSA4 : 1; //!< [8] Non-Secure Access Policy indicator bits
        unsigned L4 : 1; //!< [9] Lock bit set by secure software
        unsigned NSA5 : 1; //!< [10] Non-Secure Access Policy indicator bits
        unsigned L5 : 1; //!< [11] Lock bit set by secure software
        unsigned NSA6 : 1; //!< [12] Non-Secure Access Policy indicator bits
        unsigned L6 : 1; //!< [13] Lock bit set by secure software
        unsigned NSA7 : 1; //!< [14] Non-Secure Access Policy indicator bits
        unsigned L7 : 1; //!< [15] Lock bit set by secure software
        unsigned NSA8 : 1; //!< [16] Non-Secure Access Policy indicator bits
        unsigned L8 : 1; //!< [17] Lock bit set by secure software
        unsigned NSA9 : 1; //!< [18] Non-Secure Access Policy indicator bits
        unsigned L9 : 1; //!< [19] Lock bit set by secure software
        unsigned NSA10 : 1; //!< [20] Non-Secure Access Policy indicator bits
        unsigned L10 : 1; //!< [21] Lock bit set by secure software
        unsigned NSA11 : 1; //!< [22] Non-Secure Access Policy indicator bits
        unsigned L11 : 1; //!< [23] Lock bit set by secure software
        unsigned NSA12 : 1; //!< [24] Non-Secure Access Policy indicator bits
        unsigned L12 : 1; //!< [25] Lock bit set by secure software
        unsigned NSA13 : 1; //!< [26] Non-Secure Access Policy indicator bits
        unsigned L13 : 1; //!< [27] Lock bit set by secure software
        unsigned NSA14 : 1; //!< [28] Non-Secure Access Policy indicator bits
        unsigned L14 : 1; //!< [29] Lock bit set by secure software
        unsigned NSA15 : 1; //!< [30] Non-Secure Access Policy indicator bits
        unsigned L15 : 1; //!< [31] Lock bit set by secure software
    } B;
} hw_csu_sa_t;
#endif

/*!
 * @name Constants and macros for entire CSU_SA register
 */
//@{
#define HW_CSU_SA_ADDR      (REGS_CSU_BASE + 0x218)

#ifndef __LANGUAGE_ASM__
#define HW_CSU_SA           (*(volatile hw_csu_sa_t *) HW_CSU_SA_ADDR)
#define HW_CSU_SA_RD()      (HW_CSU_SA.U)
#define HW_CSU_SA_WR(v)     (HW_CSU_SA.U = (v))
#define HW_CSU_SA_SET(v)    (HW_CSU_SA_WR(HW_CSU_SA_RD() |  (v)))
#define HW_CSU_SA_CLR(v)    (HW_CSU_SA_WR(HW_CSU_SA_RD() & ~(v)))
#define HW_CSU_SA_TOG(v)    (HW_CSU_SA_WR(HW_CSU_SA_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual CSU_SA bitfields
 */

/*! @name Register CSU_SA, field NSA[0] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA      (0)      //!< Bit position for CSU_SA_NSA.
#define BM_CSU_SA_NSA      (0x00000001)  //!< Bit mask for CSU_SA_NSA.

//! @brief Get value of CSU_SA_NSA from a register value.
#define BG_CSU_SA_NSA(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA) >> BP_CSU_SA_NSA)

//! @brief Format value for bitfield CSU_SA_NSA.
#define BF_CSU_SA_NSA(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA) & BM_CSU_SA_NSA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA field to a new value.
#define BW_CSU_SA_NSA(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA) | BF_CSU_SA_NSA(v)))
#endif

//@}

/*! @name Register CSU_SA, field L[1] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L      (1)      //!< Bit position for CSU_SA_L.
#define BM_CSU_SA_L      (0x00000002)  //!< Bit mask for CSU_SA_L.

//! @brief Get value of CSU_SA_L from a register value.
#define BG_CSU_SA_L(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L) >> BP_CSU_SA_L)

//! @brief Format value for bitfield CSU_SA_L.
#define BF_CSU_SA_L(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L) & BM_CSU_SA_L)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L field to a new value.
#define BW_CSU_SA_L(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L) | BF_CSU_SA_L(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA1[2] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA1      (2)      //!< Bit position for CSU_SA_NSA1.
#define BM_CSU_SA_NSA1      (0x00000004)  //!< Bit mask for CSU_SA_NSA1.

//! @brief Get value of CSU_SA_NSA1 from a register value.
#define BG_CSU_SA_NSA1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA1) >> BP_CSU_SA_NSA1)

//! @brief Format value for bitfield CSU_SA_NSA1.
#define BF_CSU_SA_NSA1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA1) & BM_CSU_SA_NSA1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA1 field to a new value.
#define BW_CSU_SA_NSA1(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA1) | BF_CSU_SA_NSA1(v)))
#endif

//@}

/*! @name Register CSU_SA, field L1[3] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L1      (3)      //!< Bit position for CSU_SA_L1.
#define BM_CSU_SA_L1      (0x00000008)  //!< Bit mask for CSU_SA_L1.

//! @brief Get value of CSU_SA_L1 from a register value.
#define BG_CSU_SA_L1(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L1) >> BP_CSU_SA_L1)

//! @brief Format value for bitfield CSU_SA_L1.
#define BF_CSU_SA_L1(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L1) & BM_CSU_SA_L1)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L1 field to a new value.
#define BW_CSU_SA_L1(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L1) | BF_CSU_SA_L1(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA2[4] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA2      (4)      //!< Bit position for CSU_SA_NSA2.
#define BM_CSU_SA_NSA2      (0x00000010)  //!< Bit mask for CSU_SA_NSA2.

//! @brief Get value of CSU_SA_NSA2 from a register value.
#define BG_CSU_SA_NSA2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA2) >> BP_CSU_SA_NSA2)

//! @brief Format value for bitfield CSU_SA_NSA2.
#define BF_CSU_SA_NSA2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA2) & BM_CSU_SA_NSA2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA2 field to a new value.
#define BW_CSU_SA_NSA2(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA2) | BF_CSU_SA_NSA2(v)))
#endif

//@}

/*! @name Register CSU_SA, field L2[5] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L2      (5)      //!< Bit position for CSU_SA_L2.
#define BM_CSU_SA_L2      (0x00000020)  //!< Bit mask for CSU_SA_L2.

//! @brief Get value of CSU_SA_L2 from a register value.
#define BG_CSU_SA_L2(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L2) >> BP_CSU_SA_L2)

//! @brief Format value for bitfield CSU_SA_L2.
#define BF_CSU_SA_L2(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L2) & BM_CSU_SA_L2)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L2 field to a new value.
#define BW_CSU_SA_L2(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L2) | BF_CSU_SA_L2(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA3[6] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA3      (6)      //!< Bit position for CSU_SA_NSA3.
#define BM_CSU_SA_NSA3      (0x00000040)  //!< Bit mask for CSU_SA_NSA3.

//! @brief Get value of CSU_SA_NSA3 from a register value.
#define BG_CSU_SA_NSA3(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA3) >> BP_CSU_SA_NSA3)

//! @brief Format value for bitfield CSU_SA_NSA3.
#define BF_CSU_SA_NSA3(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA3) & BM_CSU_SA_NSA3)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA3 field to a new value.
#define BW_CSU_SA_NSA3(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA3) | BF_CSU_SA_NSA3(v)))
#endif

//@}

/*! @name Register CSU_SA, field L3[7] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L3      (7)      //!< Bit position for CSU_SA_L3.
#define BM_CSU_SA_L3      (0x00000080)  //!< Bit mask for CSU_SA_L3.

//! @brief Get value of CSU_SA_L3 from a register value.
#define BG_CSU_SA_L3(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L3) >> BP_CSU_SA_L3)

//! @brief Format value for bitfield CSU_SA_L3.
#define BF_CSU_SA_L3(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L3) & BM_CSU_SA_L3)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L3 field to a new value.
#define BW_CSU_SA_L3(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L3) | BF_CSU_SA_L3(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA4[8] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA4      (8)      //!< Bit position for CSU_SA_NSA4.
#define BM_CSU_SA_NSA4      (0x00000100)  //!< Bit mask for CSU_SA_NSA4.

//! @brief Get value of CSU_SA_NSA4 from a register value.
#define BG_CSU_SA_NSA4(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA4) >> BP_CSU_SA_NSA4)

//! @brief Format value for bitfield CSU_SA_NSA4.
#define BF_CSU_SA_NSA4(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA4) & BM_CSU_SA_NSA4)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA4 field to a new value.
#define BW_CSU_SA_NSA4(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA4) | BF_CSU_SA_NSA4(v)))
#endif

//@}

/*! @name Register CSU_SA, field L4[9] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L4      (9)      //!< Bit position for CSU_SA_L4.
#define BM_CSU_SA_L4      (0x00000200)  //!< Bit mask for CSU_SA_L4.

//! @brief Get value of CSU_SA_L4 from a register value.
#define BG_CSU_SA_L4(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L4) >> BP_CSU_SA_L4)

//! @brief Format value for bitfield CSU_SA_L4.
#define BF_CSU_SA_L4(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L4) & BM_CSU_SA_L4)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L4 field to a new value.
#define BW_CSU_SA_L4(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L4) | BF_CSU_SA_L4(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA5[10] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA5      (10)      //!< Bit position for CSU_SA_NSA5.
#define BM_CSU_SA_NSA5      (0x00000400)  //!< Bit mask for CSU_SA_NSA5.

//! @brief Get value of CSU_SA_NSA5 from a register value.
#define BG_CSU_SA_NSA5(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA5) >> BP_CSU_SA_NSA5)

//! @brief Format value for bitfield CSU_SA_NSA5.
#define BF_CSU_SA_NSA5(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA5) & BM_CSU_SA_NSA5)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA5 field to a new value.
#define BW_CSU_SA_NSA5(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA5) | BF_CSU_SA_NSA5(v)))
#endif

//@}

/*! @name Register CSU_SA, field L5[11] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L5      (11)      //!< Bit position for CSU_SA_L5.
#define BM_CSU_SA_L5      (0x00000800)  //!< Bit mask for CSU_SA_L5.

//! @brief Get value of CSU_SA_L5 from a register value.
#define BG_CSU_SA_L5(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L5) >> BP_CSU_SA_L5)

//! @brief Format value for bitfield CSU_SA_L5.
#define BF_CSU_SA_L5(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L5) & BM_CSU_SA_L5)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L5 field to a new value.
#define BW_CSU_SA_L5(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L5) | BF_CSU_SA_L5(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA6[12] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA6      (12)      //!< Bit position for CSU_SA_NSA6.
#define BM_CSU_SA_NSA6      (0x00001000)  //!< Bit mask for CSU_SA_NSA6.

//! @brief Get value of CSU_SA_NSA6 from a register value.
#define BG_CSU_SA_NSA6(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA6) >> BP_CSU_SA_NSA6)

//! @brief Format value for bitfield CSU_SA_NSA6.
#define BF_CSU_SA_NSA6(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA6) & BM_CSU_SA_NSA6)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA6 field to a new value.
#define BW_CSU_SA_NSA6(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA6) | BF_CSU_SA_NSA6(v)))
#endif

//@}

/*! @name Register CSU_SA, field L6[13] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L6      (13)      //!< Bit position for CSU_SA_L6.
#define BM_CSU_SA_L6      (0x00002000)  //!< Bit mask for CSU_SA_L6.

//! @brief Get value of CSU_SA_L6 from a register value.
#define BG_CSU_SA_L6(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L6) >> BP_CSU_SA_L6)

//! @brief Format value for bitfield CSU_SA_L6.
#define BF_CSU_SA_L6(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L6) & BM_CSU_SA_L6)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L6 field to a new value.
#define BW_CSU_SA_L6(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L6) | BF_CSU_SA_L6(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA7[14] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA7      (14)      //!< Bit position for CSU_SA_NSA7.
#define BM_CSU_SA_NSA7      (0x00004000)  //!< Bit mask for CSU_SA_NSA7.

//! @brief Get value of CSU_SA_NSA7 from a register value.
#define BG_CSU_SA_NSA7(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA7) >> BP_CSU_SA_NSA7)

//! @brief Format value for bitfield CSU_SA_NSA7.
#define BF_CSU_SA_NSA7(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA7) & BM_CSU_SA_NSA7)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA7 field to a new value.
#define BW_CSU_SA_NSA7(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA7) | BF_CSU_SA_NSA7(v)))
#endif

//@}

/*! @name Register CSU_SA, field L7[15] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L7      (15)      //!< Bit position for CSU_SA_L7.
#define BM_CSU_SA_L7      (0x00008000)  //!< Bit mask for CSU_SA_L7.

//! @brief Get value of CSU_SA_L7 from a register value.
#define BG_CSU_SA_L7(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L7) >> BP_CSU_SA_L7)

//! @brief Format value for bitfield CSU_SA_L7.
#define BF_CSU_SA_L7(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L7) & BM_CSU_SA_L7)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L7 field to a new value.
#define BW_CSU_SA_L7(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L7) | BF_CSU_SA_L7(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA8[16] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA8      (16)      //!< Bit position for CSU_SA_NSA8.
#define BM_CSU_SA_NSA8      (0x00010000)  //!< Bit mask for CSU_SA_NSA8.

//! @brief Get value of CSU_SA_NSA8 from a register value.
#define BG_CSU_SA_NSA8(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA8) >> BP_CSU_SA_NSA8)

//! @brief Format value for bitfield CSU_SA_NSA8.
#define BF_CSU_SA_NSA8(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA8) & BM_CSU_SA_NSA8)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA8 field to a new value.
#define BW_CSU_SA_NSA8(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA8) | BF_CSU_SA_NSA8(v)))
#endif

//@}

/*! @name Register CSU_SA, field L8[17] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L8      (17)      //!< Bit position for CSU_SA_L8.
#define BM_CSU_SA_L8      (0x00020000)  //!< Bit mask for CSU_SA_L8.

//! @brief Get value of CSU_SA_L8 from a register value.
#define BG_CSU_SA_L8(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L8) >> BP_CSU_SA_L8)

//! @brief Format value for bitfield CSU_SA_L8.
#define BF_CSU_SA_L8(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L8) & BM_CSU_SA_L8)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L8 field to a new value.
#define BW_CSU_SA_L8(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L8) | BF_CSU_SA_L8(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA9[18] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA9      (18)      //!< Bit position for CSU_SA_NSA9.
#define BM_CSU_SA_NSA9      (0x00040000)  //!< Bit mask for CSU_SA_NSA9.

//! @brief Get value of CSU_SA_NSA9 from a register value.
#define BG_CSU_SA_NSA9(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA9) >> BP_CSU_SA_NSA9)

//! @brief Format value for bitfield CSU_SA_NSA9.
#define BF_CSU_SA_NSA9(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA9) & BM_CSU_SA_NSA9)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA9 field to a new value.
#define BW_CSU_SA_NSA9(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA9) | BF_CSU_SA_NSA9(v)))
#endif

//@}

/*! @name Register CSU_SA, field L9[19] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L9      (19)      //!< Bit position for CSU_SA_L9.
#define BM_CSU_SA_L9      (0x00080000)  //!< Bit mask for CSU_SA_L9.

//! @brief Get value of CSU_SA_L9 from a register value.
#define BG_CSU_SA_L9(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L9) >> BP_CSU_SA_L9)

//! @brief Format value for bitfield CSU_SA_L9.
#define BF_CSU_SA_L9(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L9) & BM_CSU_SA_L9)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L9 field to a new value.
#define BW_CSU_SA_L9(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L9) | BF_CSU_SA_L9(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA10[20] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA10      (20)      //!< Bit position for CSU_SA_NSA10.
#define BM_CSU_SA_NSA10      (0x00100000)  //!< Bit mask for CSU_SA_NSA10.

//! @brief Get value of CSU_SA_NSA10 from a register value.
#define BG_CSU_SA_NSA10(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA10) >> BP_CSU_SA_NSA10)

//! @brief Format value for bitfield CSU_SA_NSA10.
#define BF_CSU_SA_NSA10(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA10) & BM_CSU_SA_NSA10)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA10 field to a new value.
#define BW_CSU_SA_NSA10(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA10) | BF_CSU_SA_NSA10(v)))
#endif

//@}

/*! @name Register CSU_SA, field L10[21] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L10      (21)      //!< Bit position for CSU_SA_L10.
#define BM_CSU_SA_L10      (0x00200000)  //!< Bit mask for CSU_SA_L10.

//! @brief Get value of CSU_SA_L10 from a register value.
#define BG_CSU_SA_L10(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L10) >> BP_CSU_SA_L10)

//! @brief Format value for bitfield CSU_SA_L10.
#define BF_CSU_SA_L10(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L10) & BM_CSU_SA_L10)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L10 field to a new value.
#define BW_CSU_SA_L10(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L10) | BF_CSU_SA_L10(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA11[22] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA11      (22)      //!< Bit position for CSU_SA_NSA11.
#define BM_CSU_SA_NSA11      (0x00400000)  //!< Bit mask for CSU_SA_NSA11.

//! @brief Get value of CSU_SA_NSA11 from a register value.
#define BG_CSU_SA_NSA11(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA11) >> BP_CSU_SA_NSA11)

//! @brief Format value for bitfield CSU_SA_NSA11.
#define BF_CSU_SA_NSA11(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA11) & BM_CSU_SA_NSA11)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA11 field to a new value.
#define BW_CSU_SA_NSA11(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA11) | BF_CSU_SA_NSA11(v)))
#endif

//@}

/*! @name Register CSU_SA, field L11[23] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L11      (23)      //!< Bit position for CSU_SA_L11.
#define BM_CSU_SA_L11      (0x00800000)  //!< Bit mask for CSU_SA_L11.

//! @brief Get value of CSU_SA_L11 from a register value.
#define BG_CSU_SA_L11(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L11) >> BP_CSU_SA_L11)

//! @brief Format value for bitfield CSU_SA_L11.
#define BF_CSU_SA_L11(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L11) & BM_CSU_SA_L11)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L11 field to a new value.
#define BW_CSU_SA_L11(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L11) | BF_CSU_SA_L11(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA12[24] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA12      (24)      //!< Bit position for CSU_SA_NSA12.
#define BM_CSU_SA_NSA12      (0x01000000)  //!< Bit mask for CSU_SA_NSA12.

//! @brief Get value of CSU_SA_NSA12 from a register value.
#define BG_CSU_SA_NSA12(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA12) >> BP_CSU_SA_NSA12)

//! @brief Format value for bitfield CSU_SA_NSA12.
#define BF_CSU_SA_NSA12(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA12) & BM_CSU_SA_NSA12)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA12 field to a new value.
#define BW_CSU_SA_NSA12(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA12) | BF_CSU_SA_NSA12(v)))
#endif

//@}

/*! @name Register CSU_SA, field L12[25] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L12      (25)      //!< Bit position for CSU_SA_L12.
#define BM_CSU_SA_L12      (0x02000000)  //!< Bit mask for CSU_SA_L12.

//! @brief Get value of CSU_SA_L12 from a register value.
#define BG_CSU_SA_L12(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L12) >> BP_CSU_SA_L12)

//! @brief Format value for bitfield CSU_SA_L12.
#define BF_CSU_SA_L12(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L12) & BM_CSU_SA_L12)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L12 field to a new value.
#define BW_CSU_SA_L12(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L12) | BF_CSU_SA_L12(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA13[26] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA13      (26)      //!< Bit position for CSU_SA_NSA13.
#define BM_CSU_SA_NSA13      (0x04000000)  //!< Bit mask for CSU_SA_NSA13.

//! @brief Get value of CSU_SA_NSA13 from a register value.
#define BG_CSU_SA_NSA13(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA13) >> BP_CSU_SA_NSA13)

//! @brief Format value for bitfield CSU_SA_NSA13.
#define BF_CSU_SA_NSA13(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA13) & BM_CSU_SA_NSA13)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA13 field to a new value.
#define BW_CSU_SA_NSA13(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA13) | BF_CSU_SA_NSA13(v)))
#endif

//@}

/*! @name Register CSU_SA, field L13[27] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L13      (27)      //!< Bit position for CSU_SA_L13.
#define BM_CSU_SA_L13      (0x08000000)  //!< Bit mask for CSU_SA_L13.

//! @brief Get value of CSU_SA_L13 from a register value.
#define BG_CSU_SA_L13(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L13) >> BP_CSU_SA_L13)

//! @brief Format value for bitfield CSU_SA_L13.
#define BF_CSU_SA_L13(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L13) & BM_CSU_SA_L13)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L13 field to a new value.
#define BW_CSU_SA_L13(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L13) | BF_CSU_SA_L13(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA14[28] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA14      (28)      //!< Bit position for CSU_SA_NSA14.
#define BM_CSU_SA_NSA14      (0x10000000)  //!< Bit mask for CSU_SA_NSA14.

//! @brief Get value of CSU_SA_NSA14 from a register value.
#define BG_CSU_SA_NSA14(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA14) >> BP_CSU_SA_NSA14)

//! @brief Format value for bitfield CSU_SA_NSA14.
#define BF_CSU_SA_NSA14(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA14) & BM_CSU_SA_NSA14)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA14 field to a new value.
#define BW_CSU_SA_NSA14(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA14) | BF_CSU_SA_NSA14(v)))
#endif

//@}

/*! @name Register CSU_SA, field L14[29] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L14      (29)      //!< Bit position for CSU_SA_L14.
#define BM_CSU_SA_L14      (0x20000000)  //!< Bit mask for CSU_SA_L14.

//! @brief Get value of CSU_SA_L14 from a register value.
#define BG_CSU_SA_L14(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L14) >> BP_CSU_SA_L14)

//! @brief Format value for bitfield CSU_SA_L14.
#define BF_CSU_SA_L14(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L14) & BM_CSU_SA_L14)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L14 field to a new value.
#define BW_CSU_SA_L14(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L14) | BF_CSU_SA_L14(v)))
#endif

//@}

/*! @name Register CSU_SA, field NSA15[30] (RW)
 *
 * Non-Secure Access Policy indicator bits
 *
 * Values:
 * - 0 - Secure access for the corresponding Type 1 master
 * - 1 - Non-secure access for the corresponding Type 1 master
 */
//@{

#define BP_CSU_SA_NSA15      (30)      //!< Bit position for CSU_SA_NSA15.
#define BM_CSU_SA_NSA15      (0x40000000)  //!< Bit mask for CSU_SA_NSA15.

//! @brief Get value of CSU_SA_NSA15 from a register value.
#define BG_CSU_SA_NSA15(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_NSA15) >> BP_CSU_SA_NSA15)

//! @brief Format value for bitfield CSU_SA_NSA15.
#define BF_CSU_SA_NSA15(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_NSA15) & BM_CSU_SA_NSA15)

#ifndef __LANGUAGE_ASM__
//! @brief Set the NSA15 field to a new value.
#define BW_CSU_SA_NSA15(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_NSA15) | BF_CSU_SA_NSA15(v)))
#endif

//@}

/*! @name Register CSU_SA, field L15[31] (RW)
 *
 * Lock bit set by secure software
 *
 * Values:
 * - 0 - No lock -- adjacent (next lower) bit can be written by software
 * - 1 - Lock -- adjacent (next lower) bit cannot be written by software
 */
//@{

#define BP_CSU_SA_L15      (31)      //!< Bit position for CSU_SA_L15.
#define BM_CSU_SA_L15      (0x80000000)  //!< Bit mask for CSU_SA_L15.

//! @brief Get value of CSU_SA_L15 from a register value.
#define BG_CSU_SA_L15(r)   ((__REG_VALUE_TYPE((r), reg32_t) & BM_CSU_SA_L15) >> BP_CSU_SA_L15)

//! @brief Format value for bitfield CSU_SA_L15.
#define BF_CSU_SA_L15(v)   ((__REG_VALUE_TYPE((v), reg32_t) << BP_CSU_SA_L15) & BM_CSU_SA_L15)

#ifndef __LANGUAGE_ASM__
//! @brief Set the L15 field to a new value.
#define BW_CSU_SA_L15(v)   (HW_CSU_SA_WR((HW_CSU_SA_RD() & ~BM_CSU_SA_L15) | BF_CSU_SA_L15(v)))
#endif

//@}

//-------------------------------------------------------------------------------------------
// hw_csu_t - module struct
//-------------------------------------------------------------------------------------------
/*!
 * @brief All CSU module registers.
 */
#ifndef __LANGUAGE_ASM__
#pragma pack(1)
typedef struct _hw_csu
{
    volatile hw_csu_csl0_t CSL0; //!< Config security level register
    volatile hw_csu_csl1_t CSL1; //!< Config security level register
    volatile hw_csu_csl2_t CSL2; //!< Config security level register
    volatile hw_csu_csl3_t CSL3; //!< Config security level register
    volatile hw_csu_csl4_t CSL4; //!< Config security level register
    volatile hw_csu_csl5_t CSL5; //!< Config security level register
    volatile hw_csu_csl6_t CSL6; //!< Config security level register
    volatile hw_csu_csl7_t CSL7; //!< Config security level register
    volatile hw_csu_csl8_t CSL8; //!< Config security level register
    volatile hw_csu_csl9_t CSL9; //!< Config security level register
    volatile hw_csu_csl10_t CSL10; //!< Config security level register
    volatile hw_csu_csl11_t CSL11; //!< Config security level register
    volatile hw_csu_csl12_t CSL12; //!< Config security level register
    volatile hw_csu_csl13_t CSL13; //!< Config security level register
    volatile hw_csu_csl14_t CSL14; //!< Config security level register
    volatile hw_csu_csl15_t CSL15; //!< Config security level register
    volatile hw_csu_csl16_t CSL16; //!< Config security level register
    volatile hw_csu_csl17_t CSL17; //!< Config security level register
    volatile hw_csu_csl18_t CSL18; //!< Config security level register
    volatile hw_csu_csl19_t CSL19; //!< Config security level register
    volatile hw_csu_csl20_t CSL20; //!< Config security level register
    volatile hw_csu_csl21_t CSL21; //!< Config security level register
    volatile hw_csu_csl22_t CSL22; //!< Config security level register
    volatile hw_csu_csl23_t CSL23; //!< Config security level register
    volatile hw_csu_csl24_t CSL24; //!< Config security level register
    volatile hw_csu_csl25_t CSL25; //!< Config security level register
    volatile hw_csu_csl26_t CSL26; //!< Config security level register
    volatile hw_csu_csl27_t CSL27; //!< Config security level register
    volatile hw_csu_csl28_t CSL28; //!< Config security level register
    volatile hw_csu_csl29_t CSL29; //!< Config security level register
    volatile hw_csu_csl30_t CSL30; //!< Config security level register
    volatile hw_csu_csl31_t CSL31; //!< Config security level register
    volatile hw_csu_csl32_t CSL32; //!< Config security level register
    volatile hw_csu_csl33_t CSL33; //!< Config security level register
    volatile hw_csu_csl34_t CSL34; //!< Config security level register
    volatile hw_csu_csl35_t CSL35; //!< Config security level register
    volatile hw_csu_csl36_t CSL36; //!< Config security level register
    volatile hw_csu_csl37_t CSL37; //!< Config security level register
    volatile hw_csu_csl38_t CSL38; //!< Config security level register
    volatile hw_csu_csl39_t CSL39; //!< Config security level register
    reg32_t _reserved0[88];
    volatile hw_csu_hp0_t HP0; //!< HP register
    volatile hw_csu_hp1_t HP1; //!< HP register
    reg32_t _reserved1[4];
    volatile hw_csu_sa_t SA; //!< Secure access register
} hw_csu_t;
#pragma pack()

//! @brief Macro to access all CSU registers.
//! @return Reference (not a pointer) to the registers struct. To get a pointer to the struct,
//!     use the '&' operator, like <code>&HW_CSU</code>.
#define HW_CSU     (*(hw_csu_t *) REGS_CSU_BASE)
#endif

#endif // __HW_CSU_REGISTERS_H__
